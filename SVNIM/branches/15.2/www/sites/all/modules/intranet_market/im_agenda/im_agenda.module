<?php
/**
 * @file
 * Module file for im_agenda.
 */
/**
 * 
 * Implement Hook_INIT ...
 */
function im_agenda_init() {
	global $user;
	$uid = $user->uid;
	$userProfile = user_load($uid);
	if(isset($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) && arg(0)== 'agenda' && arg(1)== 'list' && $uid != 0) {
	  $msg_nids = _im_messages_popup_get_nid();
	  if(!empty($msg_nids)){
	  foreach($msg_nids as $msg_nid){
	    $nid = $msg_nid['nid'];
	    $node = node_load($nid);
	    $msg_node_view_count = node_view_count_db_count_view_select((object)$node, $user);	
		if($msg_node_view_count['0']->expression == 0) {
	 		 drupal_add_js('jQuery(document).ready(function () { jQuery("#message_popup a").trigger("click"); });', 'inline'); 
	  
		}
	  }
    }		
  }	
}
/**
* Implements hook_menu().
*/

function im_agenda_menu() {
  $items = array();
  $items['relaisautocomplete'] = array(
  'page callback' => '_relais_item_autocompletes',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,  
  'weight' => 1,
  );
  $items['view-all-content'] = array(
    'page callback' => '_im_agenda_add_additional_content', 
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,     
  );
  $items['view-less-content'] = array(
   'page callback' => '_im_agenda_remove_additional_content',
   'access callback' => TRUE,
   'type' => MENU_CALLBACK,     
  );
  $items['node/%/%/%ctools_js/user_search_details'] = array(
  'page callback' => '_action_search_user_popup',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,  
  'page arguments' => array(3),
  'weight' => 1,
  );
  $items['agenda/list/%/%/%'] = array(
	'title' => '',
	'page callback' => 'im_agenda_list_all',
    'access callback' =>true,
    'page arguments' => array(3),
	'type' => MENU_CALLBACK,
  );
  $items['agenda/list/load_content'] = array(
	'title' => '',
	'page callback' => 'im_agenda_list_load',
    'access callback' =>true,     
	'type' => MENU_CALLBACK,
  );
  $items['agenda-day/%'] = array(
	'title' => '',
	'page callback' => 'im_agenda_day',
  'access callback' => TRUE,
	'type' => MENU_CALLBACK,
  );
  $items['agenda-detail/%/%ctools_js/%'] = array(
	'title' => 'Agenda Detail',
	'page callback' => 'im_agenda_detail',
	'access callback' => TRUE,
	'type' => MENU_CALLBACK,
  );
  $items['agenda-test-month'] = array(
	'title' => 'Agenda Detail',
	'page callback' => 'im_agenda_month',
	'access callback' => TRUE,
	'type' => MENU_CALLBACK,
  );
  $items['admin/popup/%ctools_js/node/%/moderation/%/change-state/draft'] = array(
    'title' => 'Change to draft popup',
    'page callback' => 'im_agenda_draft_popup',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/moderation/%/change-state/published'] = array(
    'title' => '',
    'page callback' => 'im_agenda_change_state_to_publish',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/im/manage/agenda'] = array(
	'title' => 'Manage Agenda',
	'page callback' => 'im_agenda_manage_content',
	'access callback' => '_im_agenda_manage_user_access',
	'file' => 'includes/im_agenda_manage_content.inc',
    'file path' => drupal_get_path('module', 'im_agenda'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
  );
  $items['agenda/autosave/handler'] = array(
    'title'           => 'Autosave save',
    'page callback'   => 'agenda_autosave_save',
    'access callback' => 'autosave_save_access',
    'type'            => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Implements hook_block_info().
 */
function im_agenda_block_info() {
  $blocks['im_agenda_user_input_block'] = array(
    'info' => t('User input form'),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'module' => 'im_agenda',
  );
  $blocks['im_agenda_for_week'] = array(
    'info' => t('Agenda for the week'),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'module' => 'im_agenda',
  );
  $blocks['im_agenda_manage_content_block'] = array(
    'info' => t('Agenda Manage Content'),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'module' => 'im_agenda',
  );
  return $blocks;
}
/**
* Implements hook_block_view().
*
* This hook generates the contents of the blocks.
*/
function im_agenda_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'im_agenda_user_input_block':
      $block['subject'] = t('User input form');
      $block['content'] = drupal_get_form('im_agenda_user_input_form');
      break;
    case 'im_agenda_for_week':
      $start_date = date('Y-m-d 00:00:00');
      $block['subject'] = t('Agenda list for week');
      $block['content'] = im_agenda_for_week_list($start_date);
      break;
    case 'im_agenda_manage_content_block':
      $block['subject'] = t('Agenda Manage Content');
      $block['content'] = im_agenda_manage_content_block();
      break;
    }
  return $block;
}
/**
 * Implements hook_entity_info_alter().
 * create custom view mode.
 */
function im_agenda_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['im_agenda_day'] = array(
    'label' => t('View for agenda for the day'),
    'custom settings' => TRUE,
  );
}
/*
* Implementation of hook_theme
*
*/
/*function im_agenda_theme() {
  return array(
    'im_agenda_list_for_week_output' => array(
      'variables' => array('agenda' => NULL),
      'template' => 'theme/im_agenda_list_for_week_template'
    ),
  );
}*/

/*
 * Function to check color code is existing or not.     
 */
function check_existing_color_code($selectedcolor) {
  static $colors_array = array('#9D2235','#C6A1CF','#672146','#94795D','#59CBE8','#5CB8B2','#753BBD','#78D64B','#B7BF10','#F1BE48','#FC4C02','#512F2E','#FDDA24','#EF3340','#ECC7CD','#EF4A81','#E782A9','#B9D9EB','#EFD19F','#43B02A','#64CCC9','#009639','#0085CA','#E9EC6B','#FFA38B');    
 if(!in_array($selectedcolor,$colors_array)){
  	 $department_color = 'ag_default';
  	} else {
     $department_color = $selectedcolor;
  	}
 return $department_color;
}
/**
 *
 * Function to list the agenda filtered by date and store.
 */
function im_agenda_list_all() {
  drupal_add_js('misc/tabledrag.js');
  drupal_add_css(drupal_get_path('module', 'im_features_stores') . '/css/im_features_stores.css');
  drupal_add_js(drupal_get_path('module', 'im_features_stores') . '/js/im_features_stores.js');
  drupal_add_js(drupal_get_path('module', 'multiselect') . '/multiselect.js');
  drupal_add_css(drupal_get_path('module', 'multiselect') . '/multiselect.css');
  drupal_add_js(array('date_filters' => array()), 'setting');
  global $user;
  global $base_url;
  $output = '';
  $userProfile = user_load($user->uid);
	//Fix for  - IM 14.2.9 - UATIM-632 : For store user the attachment store shouldn't be stored in the user Profile
	//if (isset($_SESSION['ldap_user_role'])) {
    	if(isset($_SESSION['profil']['stores'])){
    		$userProfile->field_user_stores[LANGUAGE_NONE][0]['value'] = $_SESSION['profil']['stores'];
    		user_save($userProfile);
    		$favStore = TRUE;
    	}
    	elseif(isset($_SESSION['profil']['store'])){
    		$userProfile->field_user_stores[LANGUAGE_NONE][0]['value'] = $_SESSION['profil']['store'];
    		user_save($userProfile);
    		$favStore = TRUE;
    	}
    	else if(isset($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) && $userProfile->field_user_stores[LANGUAGE_NONE][0]['value'] != '') {
    	  $favStore = TRUE;
    	}
    	else{
    	  $favStore = FALSE;
    	}
   /* }
    else{
      $favStore = FALSE;
    }*/
		
	//Commented below lines for UATIM-632 and replace with above code.
	/*if (isset($_SESSION['ldap_user_role'])) {//&& $_SESSION['ldap_user_role'] == 'store_director'
	  if (!isset($userProfile->field_user_stores[LANGUAGE_NONE][0]['value'])) {
	  	if (isset($_SESSION['profil']['store']) && $_SESSION['profil']['store']) {	  		
	  		$userProfile->field_user_stores[LANGUAGE_NONE][0]['value'] = $_SESSION['profil']['store'];
	  		user_save($userProfile);
	  	}	  	
	  }	  
	}
	else {
	  if (isset($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) && $userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) {
        $favStore = isset($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) ? trim($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) : '';
      }
	}*/
	//For Agenda detail page
	//save user selected store
	$current_date = date('Ymd');
  if ((isset($_SESSION['user_selected_store']) && is_numeric ($_SESSION['user_selected_store']) && $_SESSION['user_selected_store'] != arg(3) && arg(3)!= 'all') || ((arg(3) == 'all' && arg(2)== 'today' && isset($_SESSION['user_selected_store'])))) {
    if ((arg(2)!= 'today' && isset($_SESSION['user_selected_store'])) || is_numeric(arg(2)) && arg(3) != 'all' ) {
      $_SESSION['user_selected_store'] = arg(3);
    }
    if(isset($_POST['form_id'])){
      if ($_POST['form_id'] == "search_block_form") {
        drupal_goto("search/site/" . base64_encode($_POST['search_block_form']));
      exit;
      }	
    }
//    drupal_goto('agenda/list/'.$current_date.'/'.$_SESSION['user_selected_store'].'/all');//UATIM-649
  }
	 $_SESSION['user_selected_store'] = arg(3);
	
	$userProfile = user_load($user->uid);
 // $favStore = isset($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) ? trim($userProfile->field_user_stores[LANGUAGE_NONE][0]['value']) : ''; 
  $user_input_block = module_invoke("im_agenda",'block_view', "im_agenda_user_input_block");
  $output  = drupal_render($user_input_block['content']);
  if (!$favStore) {
    im_feature_agenda_ctools_popup_settings();	
    $output .= '<div id="user_store_preference_form_ctools" style="display:none">' . ctools_modal_text_button(t('Define the criteria of CONCERNED stores'), 'agenda/list/all/nojs/user_store_preference_form', t('Define the criteria of CONCERNED stores'),  'ctools-modal-ctools-sample-style') . '</div>';
  
    $user_role_flag = 0;
    //$user_role_flag_array = array('visitor' => t('visitor'), 'salarie_siege' => t("salarie_siege"), 'technical_director' => t('Technical Director'), 'administrator' => t('Administrator'), 'contributor_action' => t('Contributor Action'), 'content_manager_action' => t('Content Manager Action'), 'contributor_alert' => t('Contributor Alert'), 'content_manager_alert' => t('Content Manager Alert'), 'contributor_news' => t('Contributor News'));
    $user_role = array_values($user->roles);
/*    foreach ($user_role_flag_array as $key=>$value) {
      if (in_array($key, $user_role)) {
        $user_role_flag = 1;
        break;
      }
    }*/
//    if ($user_role_flag == 1) { //empty($_SESSION['popup_flag']) && 
      drupal_add_js('jQuery(document).ready(function () { jQuery("#user_store_preference_form_ctools a").trigger("click"); });', 'inline');	  
//    }
    //$_SESSION['popup_flag'] = 1;
  }
  //Popup function for message content type in home page    
  im_agenda_message_popup_settings();
  $output .= '<div id="message_popup" style="display:none">' . ctools_modal_text_button(t('Message info popup'), 'message/list/all/nojs/message_info_popup/0', t('Message info popup'), 'ctools-modal-ctools-sample-style') . '</div>';
  //Code for showing search result for Action, Alert, News and Benchmark content popup if you are coming from search result page...
  if(isset($_GET['search_id']) && isset($_GET['type']) && is_numeric($_GET['search_id']) && ($_GET['type'] == 'action' || $_GET['type'] == 'alert')) {    
    //for Action and Alert...
      $action_alert = "#agenda-content-".$_GET['search_id']." a";
      $agenda_date = arg(2);
      $agenda_date = date("Y-m-d", strtotime($agenda_date));
      //Trigger click the plus button if the the content is hidden. Next step trigger click the teaser content.
      $load_more_content= "#load-more-content-" . $agenda_date;
      $load_more_ajax_url = $base_url . '/view-all-content/';      
      drupal_add_js('jQuery(document).ready(function () { if(jQuery("'.$action_alert.'").length) {jQuery("'.$action_alert.'").trigger("click");}else {jQuery("'.$load_more_content.'").trigger("click");jQuery(document).ajaxComplete(function( event, xhr, settings ) { if ( settings.url === "'.$load_more_ajax_url.'" ) { jQuery("'.$action_alert.'").trigger("click"); } });} });', 'inline');
//      drupal_add_js('jQuery(document).ready(function () { jQuery("'.$action_alert.'").trigger("click"); });', 'inline');    
  }
  
  return $output;
}
/**
 *
 * Function to list the agenda for the week
 * @param date $selected_date: Start date of the week
 */
function im_agenda_for_week_list($selected_date, $user_store , $user_department = NULL) {
  global $user;
  $user_load = user_load($user->uid);
  $userstores ='';
  //Unset the agenda detail session
  unset($_SESSION["agenda_detail"]);
  drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/im_agenda.css');
  drupal_add_js(drupal_get_path('module', 'im_agenda') . '/js/im_agenda.js');
  drupal_add_js(drupal_get_path('module', 'im_agenda') . '/js/jquery.alerts.js');
  drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/jquery.alerts.css');
  $output = "";
  $requestDate = variable_get('agenda_content_settings', '7');
  if (!empty($selected_date)) {
    $start_date = date("Y-m-d", strtotime($selected_date));
  }
  else {
    $start_date = date('Y-m-d 00:00:00');
  }  
  $end_date  = date( "Y-m-d", strtotime($start_date . "-60 days" ));  
  $lazyload_end_date = date( "Y-m-d", strtotime($start_date  . "-". $requestDate ." days" ));
  $_SESSION['agenda_start_date'] = '';
  $_SESSION['agenda_end_date'] = '';
  $_SESSION['agenda_user_store'] = '';
  $_SESSION['agenda_user_department'] = '';  
 /* unset($_SESSION['agenda_start_date']);
  unset($_SESSION['agenda_end_date']);
  unset($_SESSION['agenda_user_store']);
  unset($_SESSION['agenda_user_department']);*/
  $output = im_agenda_load_contents($start_date, $lazyload_end_date, $user_store, $user_department);
  /*Set the session for the Agenda detail pop-up*/
  $_SESSION['user_store'] = $user_store;
  $_SESSION['user_department'] = $user_department; 
  $image_uri = drupal_get_path("module", "im_agenda") . '/css/images/' . 'animation.gif';
  $user_image = array(
    'path' => $image_uri,
	'alt' => "User Image",
  );
  $output .= '<div class="animation_image" style="display:none" align="center">'  . @render(theme ('image', $user_image)) . '</div>';
//  }
//  $output = theme('im_agenda_list_for_week_output', array('agenda' => $content));
  return $output;
}
/**
 * 
 * Implements hook_views_query_alter..
 */
function im_agenda_views_query_alter(&$view, &$query) {
	global $user;
	$user_obj = user_load($user->uid); 
  if ($view->name == 'agenda_list') {
//  	echo "<pre>"; print_r($view->query->orderby);exit;
     if (isset($view->query->where[0]['conditions'][1])) {
      if ($view->query->where[0]['conditions'][1]['field'] == "field_data_field_agenda_store.field_agenda_store_value") {
        $view->query->where[0]['conditions'][1]['field'] = "field_data_field_agenda_store.field_agenda_store_value LIKE (:field_agenda_store_value)";
        $view->query->where[0]['conditions'][1]['value'] = array(":field_agenda_store_value" => "%" . $view->query->where[0]['conditions'][1]['value'] ."%");
        $view->query->where[0]['conditions'][1]['operator'] = 'formula';
      }
  	}
  	if (isset($view->query->orderby[0])) {
  	  $view->query->orderby[0]['field'] = "(case when node.type = 'alert' then 1 when node.type = 'action' then 2 when field_data_field_agenda_info.field_agenda_info_value = 'info' then 3 when node.type = 'news' then 4 when node.type = 'benchmark' then 5 end)";
  	  $view->query->orderby[0]['direction'] = "";
  	}
  	if (isset($view->query->orderby[1])) {  	  
  	  unset($view->query->orderby[1]);   	    	  
  	}
  }
  if ($view->name == 'news_benchmark') { 
  	if (isset($view->query->where[0]['conditions'][1])) { 
      if ($view->query->where[0]['conditions'][1]['field'] == "field_data_field_agenda_store.field_agenda_store_value") {
        $view->query->where[0]['conditions'][1]['field'] = "field_data_field_agenda_store.field_agenda_store_value LIKE (:field_agenda_store_value)";
        $view->query->where[0]['conditions'][1]['value'] = array(":field_agenda_store_value" => "%" . $view->query->where[0]['conditions'][1]['value'] ."%");
        $view->query->where[0]['conditions'][1]['operator'] = 'formula';
      }
  	}  		
  }
  //Hide the Preferred Store content type's contents
  if($view->name == 'workbench_edited' && ($view->current_display == 'page_1' || $view->current_display == 'block_1')){
  	$content_types = array();
  	if(!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('expert',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){	  	
	  	foreach($user->roles as $roles){
	  		if(strpos($roles, 'action') !== false){
	  			array_push($content_types,"action");
          array_push($content_types,"questionnaire");
	  		}
	  		if(strpos($roles, 'alert') !== false){
	  			array_push($content_types,"alert");
	  		}
	  		if(strpos($roles, 'news') !== false){
	  			array_push($content_types,"news");
	  		}
	  		if(strpos($roles, 'benchmark') !== false){
	  			array_push($content_types,"benchmark");
	  		}
	  		if(strpos($roles, 'om') !== false){
	  			array_push($content_types,"operational_model");
	  		}
	  		if(strpos($roles, 'sales_plan') !== false){
	  			array_push($content_types,"sales_plan");
	  		}
	  	}
	  	if(!empty($content_types)){
	  		$query->add_where(1,'node_node_revision.type',array($content_types),'in');
	  	}	  	
  	}else if(!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && in_array('expert',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){
  		foreach($user->roles as $roles){
	  		if(strpos($roles, 'action') !== false){
	  			array_push($content_types,"action");
	  			array_push($content_types,"questionnaire");
	  		}
	  		if(strpos($roles, 'alert') !== false){
	  			array_push($content_types,"alert");
	  		}
	  		if(strpos($roles, 'news') !== false){
	  			array_push($content_types,"news");
	  		}
	  		if(strpos($roles, 'benchmark') !== false){
	  			array_push($content_types,"benchmark");
	  		}
	  		if(strpos($roles, 'om') !== false){
	  			array_push($content_types,"operational_model");
	  		}
	  		if(strpos($roles, 'sales_plan') !== false){
	  			array_push($content_types,"sales_plan");
	  		}
	  	}
	  	array_push($content_types,"operational_model");
	  	if(!empty($content_types)){
	  		$query->add_where(1,'node_node_revision.type',array($content_types),'in');
	  	}
  	}else if((in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)) && !in_array('expert',$user->roles)){
  		array_push($content_types,"action");
  		array_push($content_types,"alert");
  		array_push($content_types,"news");
  		array_push($content_types,"benchmark");
  		array_push($content_types,"questionnaire");
  		if(!empty($content_types)){
	  		$query->add_where(1,'node_node_revision.type',array($content_types),'in');
	  	}
  	}  		
  	else{  	
  		$query->add_where(1,'node_node_revision.type',array('questionnaire','action','alert','application','benchmark','holiday','message','news','operational_model','sales_plan'),'in');
  	}
  }
  
  //Hide the Preferred Store content type's contents on Recent Content list
  if($view->name == 'workbench_recent_content' && ($view->current_display == 'page_1' || $view->current_display == 'block_1')){
  	$content_types = array();
  	if(!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('expert',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){	  	
	  	foreach($user->roles as $roles){
	  		if(strpos($roles, 'action') !== false){
	  			array_push($content_types,"action");
	  			array_push($content_types,"questionnaire");
	  		}
	  		if(strpos($roles, 'alert') !== false){
	  			array_push($content_types,"alert");
	  		}
	  		if(strpos($roles, 'news') !== false){
	  			array_push($content_types,"news");
	  		}
	  		if(strpos($roles, 'benchmark') !== false){
	  			array_push($content_types,"benchmark");
	  		}
	  		if(strpos($roles, 'om') !== false){
	  			array_push($content_types,"operational_model");
	  		}
	  		if(strpos($roles, 'sales_plan') !== false){
	  			array_push($content_types,"sales_plan");
	  		}
	  	}
	  	if(!empty($content_types)){
	  		$query->add_where(1,'node.type',array($content_types),'in');
	  	}	  	
  	}else if(!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && in_array('expert',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){
  		foreach($user->roles as $roles){
	  		if(strpos($roles, 'action') !== false){
	  			array_push($content_types,"action");
	  			array_push($content_types,"questionnaire");
	  		}
	  		if(strpos($roles, 'alert') !== false){
	  			array_push($content_types,"alert");
	  		}
	  		if(strpos($roles, 'news') !== false){
	  			array_push($content_types,"news");
	  		}
	  		if(strpos($roles, 'benchmark') !== false){
	  			array_push($content_types,"benchmark");
	  		}
	  		if(strpos($roles, 'om') !== false){
	  			array_push($content_types,"operational_model");
	  		}
	  		if(strpos($roles, 'sales_plan') !== false){
	  			array_push($content_types,"sales_plan");
	  		}
	  	}
	  	array_push($content_types,"operational_model");
	  	if(!empty($content_types)){
	  		$query->add_where(1,'node.type',array($content_types),'in');
	  	}
	  	$query->add_groupby('node.nid');
  	}else if((in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)) && !in_array('expert',$user->roles)){
  		array_push($content_types,"action");
  		array_push($content_types,"alert");
  		array_push($content_types,"news");
  		array_push($content_types,"benchmark");
  		array_push($content_types,"questionnaire");
  		if(!empty($content_types)){
	  		$query->add_where(1,'node.type',array($content_types),'in');
	  	}
	  	$query->add_groupby('node.nid');
  	}  	
  	else{
  		if(in_array('administrator',$user->roles) || in_array('technical_director',$user->roles)){  	
  			$query->add_where(1,'node.type',array('action','alert','questionnaire','application','benchmark','holiday','message','news','operational_model','sales_plan'),'in');
  		}
  		$query->add_groupby('node.nid');
  	}
  } 
  //List the own content for contributor role
  if(($view->name == 'list_of_published_contents' || $view->name == 'archives' || $view->name == 'drafts_contents' || $view->name == 'manage_questionnaire' || $view->name == 'workbench_moderation')){
  	$own_node = FALSE;
  	if((!in_array('administrator',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('content_manager_om',$user->roles) && !in_array('expert',$user->roles))){
  		$query->add_where(1,'users_node.uid','***CURRENT_USER***');
  		$own_node = TRUE;
  	}
  	$content_types = array();
  	if(!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('expert',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){
	  	foreach($user->roles as $roles){
	  		if(strpos($roles, 'action') !== false){
	  			array_push($content_types,"action");
	  			array_push($content_types,"questionnaire");
	  		}
	  		if(strpos($roles, 'alert') !== false){
	  			array_push($content_types,"alert");
	  		}
	  		if(strpos($roles, 'news') !== false){
	  			array_push($content_types,"news");
	  		}
	  		if(strpos($roles, 'benchmark') !== false){
	  			array_push($content_types,"benchmark");
	  		}
	  		if(strpos($roles, 'om') !== false){
	  			array_push($content_types,"operational_model");
	  		}
	  		if(strpos($roles, 'sales_plan') !== false){
	  			array_push($content_types,"sales_plan");
	  		}
	  	}
	  	if(!empty($content_types)){
	  		if($view->name == 'manage_questionnaire'){	  		
			  $query->add_where(3,'node.type',array($content_types),'in');
	 		}else if($view->name == 'workbench_moderation' && !in_array('content_manager_action_regional',$user->roles)){
	 			$query->add_where(3,'node_workbench_moderation_node_history.type',array($content_types),'in');
	 		}
	  	}  	
  	}else if(!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && in_array('expert',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){
	  	foreach($user->roles as $roles){
	  		if(strpos($roles, 'action') !== false){
	  			array_push($content_types,"action");
	  			array_push($content_types,"questionnaire");
	  		}
	  		if(strpos($roles, 'alert') !== false){
	  			array_push($content_types,"alert");
	  		}
	  		if(strpos($roles, 'news') !== false){
	  			array_push($content_types,"news");
	  		}
	  		if(strpos($roles, 'benchmark') !== false){
	  			array_push($content_types,"benchmark");
	  		}
	  		if(strpos($roles, 'om') !== false){
	  			array_push($content_types,"operational_model");
	  		}
	  		if(strpos($roles, 'sales_plan') !== false){
	  			array_push($content_types,"sales_plan");
	  		}
	  	}
	  	array_push($content_types,"operational_model");
	  	if(!empty($content_types)){
	  		if($view->name == 'workbench_moderation' && !in_array('content_manager_action_regional',$user->roles)){
	 			$query->add_where(1,'node_workbench_moderation_node_history.type',array($content_types),'in');
	 		}
	  	}
	  }else if((in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)) && !in_array('expert',$user->roles) && $view->name != 'workbench_moderation'){
	  		array_push($content_types,"action");
	  		array_push($content_types,"alert");
	  		array_push($content_types,"news");
	  		array_push($content_types,"benchmark");
	  		array_push($content_types,"questionnaire");
	  		if(!empty($content_types)){
		  		$query->add_where(1,'node.type',array($content_types),'in');
		  	}
	  }else if((in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)) && !in_array('expert',$user->roles) && $view->name == 'workbench_moderation'){
	  		array_push($content_types,"action");
	  }
	  if($view->name == 'workbench_moderation' && in_array('content_manager_action_regional',$user->roles)){	  	
	  	if(!empty($content_types)){
  			$query->add_where(1,'node_workbench_moderation_node_history.type',array($content_types),'in');
  			$query->add_where(2,'node_workbench_moderation_node_history.type',array($content_types),'in');
  		}
  		//$query->add_where(2,'users_node.uid','***CURRENT_USER***');
  		//$query->add_where(1,'users_node.uid','***CURRENT_USER***');
  		$query->add_where(2,'workbench_moderation_node_history.state',array('needs_review'),'in');
  		$query->add_where(2,'workbench_moderation_node_history.current','0','<>');
  		$join = new views_join();
  		$join->construct('field_data_field_action_scope_of_content', 'node_revision', 'nid', 'entity_id');
  		$query->table_queue['node__field_data_field_action_scope_of_content'] = array(
	      'table' => 'field_data_field_action_scope_of_content',
	      'num' => 1,
	      'alias' => 'node__field_data_field_action_scope_of_content',
	      'join' => $join,
	      'relationship' => 'node_revision',
	    );
    	$query->add_where(1, 'node__field_data_field_action_scope_of_content.field_action_scope_of_content_value', 'national', '=');
  		$user_load = user_load($user->uid);
		  if (!empty($user_load->field_user_regional_profile_stor['und'][0]['value'])) {    
		    $userstores[] = $user_load->field_user_regional_profile_stor['und'][0]['value'];
		    if (strstr($user_load->field_user_regional_profile_stor['und'][0]['value'],',')) {
		      $userstoresarray = $user_load->field_user_regional_profile_stor['und'][0]['value'];
		      $userstores = array();
		      $userstores = explode(',',$userstoresarray);
		      $userstoresarray = array();
		    }
		  }
		  $user_selected_store = "";
		  for ($i = 0; $i < count($userstores); $i++) {
		    if ($i == (count($userstores) - 1)) {
		      $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]';
		     }
		     else {
		       $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]' . '|';
		      }       
		    }
		  $agenda_store = $user_selected_store;
  		$join = new views_join();
  		$join->construct('field_data_field_agenda_store', 'node_revision', 'nid', 'entity_id');
  		$query->table_queue['node__field_data_field_agenda_store'] = array(
	      'table' => 'field_data_field_agenda_store',
	      'num' => 1,
	      'alias' => 'node__field_data_field_agenda_store',
	      'join' => $join,
	      'relationship' => 'node_revision',
	    );
	    $query->add_where(2, 'node__field_data_field_agenda_store.field_agenda_store_value', $agenda_store, '~');
    	$query->add_where(2, 'node__field_data_field_action_scope_of_content.field_action_scope_of_content_value', 'regional', '=');
    	$query->where[2]['type'] = 'AND';
	  	$query->set_group_operator('OR');
	  }
	
  	if($view->name == 'drafts_contents' || $view->name == 'list_of_published_contents' || $view->name == 'archives') {
  		//$query->add_where(1,'field_data_field_agenda_store.field_agenda_store_value','','ILIKE');
  		$query->table_queue['field_data_field_action_scope_of_content']['join']->type = "LEFT";
	  	foreach ($query->where[1]['conditions'] as $key => $clause) {
		      if (strpos($clause['field'], 'field_data_field_action_scope_of_content.field_action_scope_of_content_value') !== FALSE) {
		        unset($query->where[1]['conditions'][$key]);
		      }
	      //if(isset($view->exposed_raw_input['type']) && ($view->exposed_raw_input['type']!='All' && $view->exposed_raw_input['type'] != 'action')){
		  	  if (strpos($clause['field'], 'field_data_field_agenda_store.field_agenda_store_value') !== FALSE) {
		        unset($query->where[1]['conditions'][$key]);
		      }
	      //}
	    }
	    if(isset($view->exposed_raw_input['type']) && ($view->exposed_raw_input['type']=='All' || $view->exposed_raw_input['type'] == 'action')){
	    	if(!in_array('content_manager_action_regional',$user->roles)){
  				$query->add_where(2,'field_data_field_action_scope_of_content.field_action_scope_of_content_value',array('national','regional'),'IN');
	    	}
	 		//$query->add_where(2,'node.type', array('action'),'IN');
	 		if($own_node == TRUE){
	 			$query->add_where(2,'users_node.uid','***CURRENT_USER***');
	 		}	  		
	  		
	  		if(in_array('content_manager_action_regional',$user->roles)){
		  		if(!empty($content_types)){
		  			$query->add_where(1,'node.type',array($content_types),'in');
	  				$query->add_where(2,'node.type',array($content_types),'in');
		  		}
	  			//$query->add_where(2,'users_node.uid','***CURRENT_USER***');
	  			//$query->add_where(1,'users_node.uid','***CURRENT_USER***');
		    	$query->add_where(2, 'field_data_field_action_scope_of_content.field_action_scope_of_content_value', 'national', '=');
	  			$user_load = user_load($user->uid);
				  if (!empty($user_load->field_user_regional_profile_stor['und'][0]['value'])) {    
				    $userstores[] = $user_load->field_user_regional_profile_stor['und'][0]['value'];
				    if (strstr($user_load->field_user_regional_profile_stor['und'][0]['value'],',')) {
				      $userstoresarray = $user_load->field_user_regional_profile_stor['und'][0]['value'];
				      $userstores = array();
				      $userstores = explode(',',$userstoresarray);
				      $userstoresarray = array();
				    }
				  }
				  $user_selected_store = "";
				  if(!empty($userstores)){
					  for ($i = 0; $i < count($userstores); $i++) {
					    if ($i == (count($userstores) - 1)) {
					      $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]';
					     }
					     else {
					       $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]' . '|';
					      }       
					    }
				  }
				$agenda_store = $user_selected_store;
	  			$join = new views_join();
  				$join->construct('field_data_field_agenda_store', 'node', 'nid', 'entity_id');
  				$query->table_queue['node__field_data_field_agenda_store'] = array(
			      'table' => 'field_data_field_agenda_store',
			      'num' => 1,
			      'alias' => 'node__field_data_field_agenda_store',
			      'join' => $join,
			      'relationship' => 'node',
			    );
			    $query->add_where(2, 'node__field_data_field_agenda_store.field_agenda_store_value', $agenda_store, '~');
		    	$query->add_where(2, 'field_data_field_action_scope_of_content.field_action_scope_of_content_value', 'regional', '=');
	  		}else{
	  			if(!empty($content_types)){
  					$query->add_where(1,'node.type',array($content_types),'in');
	  			}
		  		if(in_array('expert',$user->roles)){
			    	$expert_fullname = '';
			    	if (isset($user_obj->field_full_name['und'][0]['value'])) {
			    	  $expert_fullname = $user_obj->field_full_name['und'][0]['value'];
			    	}
			    	$join = new views_join();
			    	$join->construct('field_data_field_om_experts', 'node', 'nid', 'entity_id');
			    	$query->table_queue['node__field_data_field_om_experts'] = array(
				      'table' => 'field_data_field_om_experts',
				      'num' => 1,
				      'alias' => 'node__field_data_field_om_experts',
				      'join' => $join,
				      'relationship' => 'node',
				    );	    
				  $query->add_where(3, 'node__field_data_field_om_experts.field_om_experts_value', $expert_fullname, '=');
				  //$query->add_where(1, 'node__field_data_field_om_experts.field_om_experts_value', $expert_fullname, '=');
				  if($view->name == 'drafts_contents') {
		  			$query->add_where(3, 'field_data_field_draft_status.field_draft_status_value', '1', '=');
		  			$query->add_where(3, 'field_data_field_node_archive.field_node_archive_value', '0', '=');
				  }else if($view->name == 'list_of_published_contents'){
	  				$query->add_where(3, 'node.status', '1', '=');
	  				$query->add_where(3, 'field_data_field_node_archive.field_node_archive_value', '0', '=');
	  			  }else if($view->name == 'archives'){
	  				$query->add_where(3, 'field_data_field_node_archive.field_node_archive_value', '1', '=');
	  			  }
				  
		  		  if(!empty($content_types)){
  					$query->add_where(2,'node.type',array($content_types),'in');
	  			  }
	  			  $query->add_where(2,'users_node.uid','***CURRENT_USER***');
	  			  $query->add_where(1,'users_node.uid','***CURRENT_USER***');
			  }
	  		}
	  		if($view->name == 'drafts_contents') {
	  			$query->add_where(2, 'field_data_field_draft_status.field_draft_status_value', '1', '=');
	  			$query->add_where(2, 'field_data_field_node_archive.field_node_archive_value', '0', '=');
	  		}else if($view->name == 'list_of_published_contents'){
	  			$query->add_where(2, 'node.status', '1', '=');
	  			$query->add_where(2, 'field_data_field_node_archive.field_node_archive_value', '0', '=');
	  		}else if($view->name == 'archives'){
	  			$query->add_where(2, 'field_data_field_node_archive.field_node_archive_value', '1', '=');
	  		}
	  		$query->where[2]['type'] = 'AND';
	  		$query->set_group_operator('OR');
	  		//echo "<pre>";print_r($query);exit;
	    }	
    }
  }
  if($view->name == 'manage_operational_model') {
  	//Alter the Manage OM view query based on the status selection
  	if(isset($view->exposed_raw_input['state'])){
  		if($view->exposed_raw_input['state'] == 'draft'){
  			foreach($view->query->where[1]['conditions'] as $key=>$view_condition){
	  			if(strpos($view_condition['field'], 'field_data_field_draft_status.field_draft_status_value') !== FALSE) {
	        		$query->where[1]['conditions'][$key]['value'] = '1';
		      		$query->where[1]['conditions'][$key]['operator'] = '=';
	      		}
  				if(strpos($view_condition['field'], 'field_data_field_node_archive.field_node_archive_value') !== FALSE) {
	      			$query->where[1]['conditions'][$key]['value'] = '0';
	      			$query->where[1]['conditions'][$key]['operator'] = '=';
	      		}
  			}
  		}
  		if($view->exposed_raw_input['state'] == 'needs_review' || $view->exposed_raw_input['state'] == 'published') {
  			foreach($view->query->where[1]['conditions'] as $key=>$view_condition){
  				if(strpos($view_condition['field'], 'field_data_field_draft_status.field_draft_status_value') !== FALSE) {
	        		unset($query->where[1]['conditions'][$key]);
	      		}
  			}
  			if($view->exposed_raw_input['state'] == 'published'){
	  			foreach($view->query->where[1]['conditions'] as $key=>$view_condition){
		  			if(strpos($view_condition['field'], 'field_data_field_node_archive.field_node_archive_value') !== FALSE) {
		        		$query->where[1]['conditions'][$key]['value'] = '0';
		      			$query->where[1]['conditions'][$key]['operator'] = '=';
		      		}
	  				if(strpos($view_condition['field'], 'node.status') !== FALSE) {
		      			$query->where[1]['conditions'][$key]['value'] = '1';
		      			$query->where[1]['conditions'][$key]['operator'] = '=';
		      		}
	  			}
  			}
  		} 	
	  	if($view->exposed_raw_input['state'] == 'archive') { 
	  		if(isset($view->query->where[1]['conditions'])) {
	  			foreach($view->query->where[1]['conditions'] as $key=>$view_condition){
	  				if(strpos($view_condition['field'], 'workbench_moderation_node_history.state') !== FALSE) {
		        		unset($query->where[1]['conditions'][$key]);
		      		}
		      		if(strpos($view_condition['field'], 'field_data_field_draft_status.field_draft_status_value') !== FALSE) {
		      			$query->where[1]['conditions'][$key]['value'] = '0';
		      			$query->where[1]['conditions'][$key]['operator'] = '=';
		      		}
	  				if(strpos($view_condition['field'], 'field_data_field_node_archive.field_node_archive_value') !== FALSE) {
		      			$query->where[1]['conditions'][$key]['value'] = '1';
		      			$query->where[1]['conditions'][$key]['operator'] = '=';
		      		}
	  				if(strpos($view_condition['field'], 'node.status') !== FALSE) {
		      			$query->where[1]['conditions'][$key]['value'] = array('0','1');
		      			$query->where[1]['conditions'][$key]['operator'] = 'IN';
		      		}
	  			}
	  		}
	  	}
  	}
  	//Adding Expert Validation filter
  	if(isset($view->exposed_raw_input['field_om_experts_value'])){
  		if(!empty($view->exposed_raw_input['field_om_experts_value']) && $view->exposed_raw_input['field_om_experts_value']!='All'){
	  		$join = new views_join();
		    $join->construct('field_data_field_om_experts', 'node', 'nid', 'entity_id');
		    $query->table_queue['node__field_data_field_om_experts'] = array(
		      'table' => 'field_data_field_om_experts',
		      'num' => 1,
		      'alias' => 'node__field_data_field_om_experts',
		      'join' => $join,
		      'relationship' => 'node',
		    );	    
		    $query->add_where(2, 'node__field_data_field_om_experts.field_om_experts_value', $view->exposed_raw_input['field_om_experts_value'], '=');
  		}
  		if($view->exposed_raw_input['field_om_experts_value'] == '0'){
  			$join = new views_join();
		    $join->construct('field_data_field_om_experts', 'node', 'nid', 'entity_id');
		    $query->table_queue['node__field_data_field_om_experts'] = array(
		      'table' => 'field_data_field_om_experts',
		      'num' => 1,
		      'alias' => 'node__field_data_field_om_experts',
		      'join' => $join,
		      'relationship' => 'node',
		    );	    
		    $query->add_where(2, 'node__field_data_field_om_experts.field_om_experts_value','', 'IS NULL');
  		}
  	}
  	//If Status option is not selected, list all the contents.
  	if(empty($_GET['state']) || $_GET['state']=='All'){
  		foreach($view->query->where[1]['conditions'] as $key=>$view_condition){
  			if(strpos($view_condition['field'], 'workbench_moderation_node_history.state') !== FALSE) {
        		unset($query->where[1]['conditions'][$key]);
      		}
  			if(strpos($view_condition['field'], 'node.status') !== FALSE) {
	      		$query->where[1]['conditions'][$key]['value'] = array('0','1');
	      		$query->where[1]['conditions'][$key]['operator'] = 'IN';
	      	}
  		}
  	}
  }
}
/**
 *
 * User input form for the date..
 */
function im_agenda_user_input_form($form, &$form_state) {
	global $base_url;
	$future_action_link ='';
  if (empty($_SESSION['duplicate_node_id'])) {
    $_SESSION['duplicate_node_id'][] = 0;
  }
	$user_store = arg(3);
  if(arg(2)){
    if(is_numeric(arg(2))){
      $year = substr(arg(2), 0, 4);
      $month = substr(arg(2), 4, 2);
      $day = substr(arg(2),6, 7);
      $agenda_default_date =  $year.'-'.$month.'-'.$day;
    }else{
      $agenda_default_date = date('Y-m-d');
    }
  }
  else {
    $agenda_default_date = date('Y-m-d');
  }
  if(arg(3)){
    $user_store = arg(3);
  }
  else {
    $user_store = 'all';
  }
  if(arg(4)!= 'all'){
  	$selected_value =arg(4);
  	$selected_value = explode(',',$selected_value);
    $department_default_value = $selected_value;
  }
  else {
    $department_default_value = '0';
  }
  //drupal_set_message(arg(4));
  $form = array();
  $form['user_date_select'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd/m/Y',
    '#default_value' => $agenda_default_date,
    '#date_year_range' => '-3:+3',
    '#prefix' => '<div id="agenda-user-input-date">',
    '#datepicker_options' => array(
	    'showOn' => 'button',
	    'buttonImage' => base_path() .path_to_theme('im') . '/css/images/calender.png',
	    'buttonImageOnly' => true,
     ),
  );
  if(arg(2)== 'today'){
    $today_date = strtotime(date('Ymd'));
    $n_days ='+'.variable_get('im_future_action_ndays','30').' '.'day';
    $date_generation = date('Ymd', strtotime($n_days, $today_date));
    $future_action_link = arg(0).'/'.arg(1).'/'.$date_generation.'/'.arg(3).'/'.arg(4);
  }
  else{
    $url_date = strtotime(arg(2));
    $n_days ='+'.variable_get('im_future_action_ndays','30').' '.'day';
    $date_generation = date('Ymd', strtotime($n_days, $url_date));
    $future_action_link = arg(0).'/'.arg(1).'/'.$date_generation.'/'.arg(3).'/'.arg(4);
  }
  $form['page_reload'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="future-action">',
    '#markup' => l(t('Future Action'),$future_action_link),
    '#suffix' =>'</div>',
  );
  $department = taxonomy_vocabulary_machine_name_load("agenda_department");
  $department_list[''] = array(t('All Departments'));
  if ($department) {
  	$vid =  $department->vid;
  	$agenda_department =  taxonomy_get_tree($vid);
  foreach ($agenda_department as $item) {
    $department_list[$item->tid] = str_repeat('-', $item->depth) . $item->name;
  }
  }
  $form['user_department'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#pre_render' => array('dropdown_checkboxes'),
    '#options' => $department_list,
    '#prefix' => '<div id="agenda-user-input-department">',
    '#suffix' => '</div>',
    '#default_value' => $department_default_value ,
  );
  $form['agenda_submit'] = array(
    '#type' => 'submit',
    '#value' =>t('Search'),
  	'#suffix' => '</div>',
  );
  $form['user_store'] = array(
    '#type' => 'hidden',
    '#value' => $user_store,
  );
  
if( arg(3)){
  $form['agenda_week_list'] = array(
    '#type' => 'markup',
    '#markup' =>  im_agenda_for_week_list(arg(2), arg(3), arg(4)),
    '#prefix' => '<div id="agenda-list-week">',
    '#suffix' => '</div>',
  );
  }
  unset($_SESSION['selected_date']);  
  unset($_SESSION['duplicate_node_id']);  
  return $form;
}

function im_agenda_user_input_form_submit($form, &$form_state){
  unset($_SESSION['user_store']);
  unset($_SESSION['user_department']);
  $user_selected_date = !empty($form_state['values']['user_date_select']) ? $form_state['values']['user_date_select'] : date('Y-m-d');
  $user_department = !empty($form_state['values']['user_department']) ? $form_state['values']['user_department'] : '';
  if(!empty($user_department)){
    $children ='';
    $user_dept = array();
    $user_select_depart = array();
    $user_department = implode(',', $user_department);
    $user_select_depart = explode(',',$user_department);
    foreach ($user_select_depart as $user_select_departs){
      $children = taxonomy_get_children($user_select_departs);
      if(!empty($children)){
      	$user_dept[] = $user_select_departs;
        $children_tid =array();
        foreach($children as $childrens){
          $user_dept[] = $childrens->tid;
        }
      }
      else {
        $user_dept[] = $user_select_departs;
      }
    }
  }
  $user_department = implode(',', $user_dept);
  $user_store = !empty($form_state['values']['user_store']) ? $form_state['values']['user_store'] : ''; 
  if(!empty($user_store) && !empty($user_store_check)) {
    $user_store = explode("-",$user_store);
      foreach ($user_store as $user_stores) {
        $user_store_value .= " ".$user_stores;
      }
      drupal_set_message($user_store_value);
  }
  else  {
    $user_store_value = arg(3);
  }
  
  if(empty($user_store)){
    $user_store = 'all';
  }
  if(empty($user_department)){
    $user_department = 'all';
  }
  $_SESSION['selected_date'] = date('Ymd',strtotime($user_selected_date));
  $_SESSION['user_store'] = $user_store;
  $_SESSION['user_department'] = $user_department;
  unset($_SESSION["agenda_detail"]);
  $user_selected_date = date('Ymd',strtotime($user_selected_date));
  drupal_goto("agenda/list/$user_selected_date/$user_store/$user_department"); 
}
/**
 *
 * return the form stae for the user input form.
 */

function im_agenda_user_input_ajax_call_back($form, $form_state) {
  return $form['agenda_week_list'];
}

function _im_agenda_build_day_view($vars, $views_obj){	
  if (empty($_SESSION['views_tid_counter'])) {
    $_SESSION['views_tid_counter'] = 0;
  }
  if (empty($_SESSION['agenda_action_info_flag'])) {
    $_SESSION['agenda_action_info_flag'] = "outter";
  }
  $department_tid = '';
  if(isset($views_obj[$_SESSION['views_tid_counter']]->field_data_field_agenda_department_field_agenda_department_t)) {
    $department_tid = $views_obj[$_SESSION['views_tid_counter']]->field_data_field_agenda_department_field_agenda_department_t;
  }

  $vars['agenda_week']['type'] = $vars['type'];
  $nid = $vars['nid'];
  $vars['agenda_week']['title'] =  ctools_modal_text_button($vars['title'], 'agenda-detail/day/nojs/'. $nid, '', 'ctools-modal-ctools-sample-style');
  if(!empty($vars['body']['und'][0]['value'])){
  $str = $vars['body']['und'][0]['value'];
	  /*if (strlen($str) > 100){
	    $str = substr($str, 0, 100) . '...';
	    $vars['agenda_week']['body'] =  strip_tags($str);
	  }
	  else{
	    $vars['agenda_week']['body'] = strip_tags($str);
	  }*/
    $vars['agenda_week']['body'] = strip_tags($str);
  }
  
  if(!empty($vars['field_agenda_attachments'])){
    $vars['agenda_week']['attachment'] = '';
    for($i= 0; $i < count($vars['field_agenda_attachments']['und']);$i++){
    	//$filepath = file_create_url($document['uri'];
      $filepath = urldecode(file_create_url($vars['field_agenda_attachments']['und'][$i]['uri']));
      $vars['agenda_week']['attachment'] .=  l(t($vars['field_agenda_attachments']['und'][$i]['filename']), $filepath,  array('attributes' => array('target'=>'_blank'))).'<br />';
    }
  }
   
  if(!empty($department_tid)) {
	  $department = taxonomy_term_load($department_tid);
	  $department_name = '';
	  if(!empty($department->field_taxo_shortname['und'])){
	     $department_name = $department->field_taxo_shortname['und'][0]['value'];
	  }
	  $color = '';
	  $vars['agenda_week']['color'] = isset($department->field_taxo_department_color['und'][0]['rgb']) ? $department->field_taxo_department_color['und'][0]['rgb'] : '';
    $vars['agenda_week']['name'] = ctools_modal_text_button($department_name, 'agenda-detail/day/nojs/'. $nid, '', 'ctools-modal-ctools-sample-style');
     
	  $views_row_class = 'views-row views-row-'.($_SESSION['views_tid_counter']).' views-row-odd views-row-first';
    $views_row_class_style = '';
	  if (isset($vars['field_agenda_info']) && count($vars['field_agenda_info']) > 0) {
	    if ($_SESSION['agenda_action_info_flag'] == "outter") {
	       $_SESSION['agenda_action_info_flag'] = "inner";
	    }
	    $vars['agenda_week']['field_agenda_info'] = $vars['field_agenda_info']['und'][0]['value'];
	  }
	  else if (empty($vars['field_agenda_info']) && $vars['type'] == "action"){
	    $_SESSION['agenda_action_info_flag'] = "outter";
	  }
   
    if ($_SESSION['department_name_flag'] != $department_name || $_SESSION['agenda_action_info_flag'] == "inner") {
    	if ($_SESSION['agenda_action_info_flag'] == "inner") {
    	  $_SESSION['agenda_action_info_flag'] = "exist";
    	}
	    $vars['agenda_week']['views_row_class'] = 'views-row views-row-'.($_SESSION['views_tid_counter']).' views-row-odd views-row-first';
      $vars['agenda_week']['views_row_class_style'] = '';
	    $vars['agenda_week']['image_class_name'] = "action_image";
	    $vars['agenda_week']['teaser_icon_class_name'] = "agenda-teaser-icon";
	    $vars['agenda_week']['teaser_corner_class_name'] = "agenda-teaser-corner";
	    
	    $department->field_taxo_department_color['und'][0]['rgb'] = isset($department->field_taxo_department_color['und'][0]['rgb']) ? $department->field_taxo_department_color['und'][0]['rgb'] : '';
	    
	    $vars['agenda_week']['teaser_corner_style'] = "border-top: 20px solid " . $department->field_taxo_department_color['und'][0]['rgb']. "; border-right: 20px solid " . $department->field_taxo_department_color['und'][0]['rgb'] . ";";
	    $vars['agenda_week']['teaser_title_class_name'] = "agenda-teaser-title";
	    if ($_SESSION['empty_flag'] == 1) {
	    	$vars['agenda_week']['views_row_class'] = 'views-row views-row-'.($_SESSION['views_tid_counter']).' views-row-odd views-row-first';
        $vars['agenda_week']['views_row_class_style'] = '';
        $_SESSION['empty_flag'] = 0;
	    }
	  }
	  else if ($_SESSION['department_name_flag'] == $department_name) {
	    $vars['agenda_week']['views_row_class'] = 'views-row-'.($_SESSION['views_tid_counter']).' views-row-odd views-row-first';
      $vars['agenda_week']['views_row_class_style'] = 'style="width:100%; display: inline-block"';
	    $vars['agenda_week']['image_class_name'] = "";
	    $vars['agenda_week']['teaser_icon_class_name'] = "";
	    $vars['agenda_week']['teaser_corner_class_name'] = "";
	    $vars['agenda_week']['teaser_corner_style'] = "";
	    $vars['agenda_week']['teaser_title_class_name'] = "";
	    $_SESSION['empty_flag'] = 1;
	  }
	   
    $_SESSION['department_name_node_type_flag'] = $vars['type'];
	  $_SESSION['department_name_flag'] = $department_name;
	  $_SESSION['views_tid_counter'] = intval($_SESSION['views_tid_counter']) + 1;
	   
	  if ($_SESSION['views_tid_counter'] >= count($views_obj)) {
	    $_SESSION['views_tid_counter'] = 0;
	  }
  }  
  return $vars['agenda_week'];
}

function im_agenda_detail($js = NULL) {	
  drupal_add_js(drupal_get_path('module', 'im_features_om') . '/js/jquery.printElement.min.js');
  global $language;
  global $user;
  ctools_include('modal');
  ctools_include('ajax');
  $output = array();
  $nodeObj = node_load(arg(3));
  $show_type = arg(1);
  $node_array = array();
  $day_filter = '';
  $role_join = '';
  $role_filter = '';
  $agenda_day = '';
//  if ($show_type == 'day') {
    if(isset($nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value']) && $nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value']) {
      $day_filter = " AND agenda_date.field_agenda_date_value = '" . date('Y-m-d', strtotime($nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value'])) . "T00:00:00'";
      $start_date = date('Y-m-d', strtotime($nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value']));
      $end_date = $start_date;
      $agenda_day = date('Y-m-d');
    }
//  }
  //Update Node View Count.
  if($nodeObj->nid && $user->uid) {
    module_load_include('inc', 'node_view_count', '/model/node_view_count.db');
    node_view_count_db_count_view_insert($nodeObj->nid, $user->uid);
  }  
  if(isset($_SESSION['ldap_user_role']) && ($_SESSION['ldap_user_role'] == 'store_employee' || $_SESSION['ldap_user_role'] == 'store_director' || $_SESSION['ldap_user_role'] == 'store_manager' || $_SESSION['ldap_user_role'] == 'store_director_trainee' || $_SESSION['ldap_user_role'] == 'store_manager_trainee' )) {
  	$ldap_user_role = $_SESSION['ldap_user_role'];
  	if ($ldap_user_role == 'store_director_trainee') {
  		$ldap_user_role = 'store_director';
  	}
  	elseif ($ldap_user_role == 'store_manager_trainee') {
  	   $ldap_user_role = 'store_manager';
  	}
    $role_join = ' INNER JOIN {field_data_field_agenda_concernees} aj_conc ON(n.nid=aj_conc.entity_id) ';
    $role_filter = " AND aj_conc.field_agenda_concernees_value = '" . $ldap_user_role . "'";
  }                  
  $agenda_fortheday = array();
  $agendaPrev = array();
  $agendaCurr = array();
  $agendaNext = array();
  $session_date = str_replace("-", "_", $start_date);    
  if(isset($_SESSION["agenda_detail"][$session_date]) && !empty($_SESSION["agenda_detail"][$session_date])) {
  	$result = $_SESSION["agenda_detail"][$session_date];
  }
  else {
    $session_date = str_replace("-", "_", $start_date);
    $_SESSION["agenda_detail"] = array();
    $user_store = isset($_SESSION['user_store']) ? $_SESSION['user_store'] : '';
    $user_department = isset($_SESSION['user_department']) ? $_SESSION['user_department'] : '';           
    $_SESSION["agenda_detail"][$session_date] = _im_agenda_filter_content($start_date, $end_date,$user_store, $user_department);    
    $news_benchmark_content = _im_agenda_news_benchmark_filter_content($start_date, $end_date, $user_store);
    foreach($news_benchmark_content as $key=>$value) {
    	array_push($_SESSION["agenda_detail"][$session_date], $value);
    } 
    $result = $_SESSION["agenda_detail"][$session_date];
  } 
  foreach ($_SESSION["agenda_detail"][$session_date] as $key => $agenda) {
    if(sizeof($agendaCurr) != 0) {
      $agendaNext = array('nid' => $agenda['nid'], 'type' => $agenda['type']);
      break;
    }
    if($agenda['nid'] == arg(3)) {
      $agendaCurr = array('nid' => $agenda['nid'], 'type' => $agenda['type']);
    }
    else { 
      $agendaPrev = array('nid' => $agenda['nid'], 'type' => $agenda['type']);
    }
  }
  $userObj = user_load($nodeObj->uid);
  $node_array['agendaPrev'] = $agendaPrev;
  $node_array['agendaCurr'] = $agendaCurr;
  $node_array['agendaNext'] = $agendaNext;
  if ($nodeObj->status) {
      if(isset($nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value']) && $nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value']) {
        $agenda_day = strtotime($nodeObj->field_agenda_date[LANGUAGE_NONE][0]['value']);
        $node_array['agenda_day'] = t(date('l', $agenda_day)) . ' ' . date('d', $agenda_day) . ' ' . t(date('F', $agenda_day)) . ' ' . t(date('Y', $agenda_day));   
      } 
      $node_array['nid'] = $nodeObj->nid;
    $node_array['type'] = $nodeObj->type;
    $node_array['title'] = $nodeObj->title;
     $node_array['description'] = isset($nodeObj->body[LANGUAGE_NONE][0]['value']) ? $nodeObj->body[LANGUAGE_NONE][0]['value'] : '';
    //$node_array['description'] = $nodeObj->body[LANGUAGE_NONE][0]['value'];
    $node_array['name'] = $nodeObj->name;
    //Department Color
      if($nodeObj->type == 'action'){
        if(!empty($nodeObj->field_agenda_info['und'][0]['value']) && $nodeObj->field_agenda_info[LANGUAGE_NONE][0]['value']== 'info'){
          $node_array['icon'] = '<span class="action-info-icon"></span>';
        }
        else{
          $node_array['icon'] = '<span class="action-icon"></span>';
        }
      }
      elseif ($nodeObj->type == 'alert'){
        $node_array['icon'] = '<span class="alert-icon"></span>';
      } 
      elseif ($nodeObj->type =='news'){
        $node_array['icon'] = '<span class="news-benchmark-icon"></span>';
      }
     elseif ($nodeObj->type =='benchmark'){
        $node_array['icon'] = '<span class="news-benchmark-icon"></span>';
      }
    if(isset($nodeObj->field_agenda_department[LANGUAGE_NONE])) {
      if(count($nodeObj->field_agenda_department['und'])> 1){
      $node_array['department_color'] = 'gray';
      $node_array['department_name'] = '';
      }else{
        $department_colors= _get_department_color_by_tid($nodeObj->field_agenda_department['und'][0]['tid']);
        $node_array['department_color'] = $department_colors['color'];
        if(!empty($department_colors['shortname'])){
          $node_array['department_name'] = $department_colors['shortname'];
        }
      }
    }
    //Fonctions concernées
    $functions = (isset($nodeObj->field_agenda_concernees[LANGUAGE_NONE]) && is_array($nodeObj->field_agenda_concernees[LANGUAGE_NONE])) ? $nodeObj->field_agenda_concernees[LANGUAGE_NONE] : array();
    $function_roles = array();
    foreach ($functions as $index => $function_role) {
      $function_roles[] = t(ucfirst(str_replace('_', ' ', $function_role['value'])));
    }
    $node_array['function'] = implode(', ', $function_roles);
    //Auteur
    $roles = $userObj->roles;
    if(isset($roles[1])) unset($roles[1]);
    if(isset($roles[2])) unset($roles[2]);
    $userName = isset($userObj->field_full_name[LANGUAGE_NONE][0]['value']) ? $userObj->field_full_name[LANGUAGE_NONE][0]['value'] : '';
    if(isset($nodeObj->field_agenda_source[LANGUAGE_NONE][0]['value'])) {
      $source = $nodeObj->field_agenda_source[LANGUAGE_NONE][0]['value'];
      $source_name = str_replace(array('(',')'),'',substr($source, strpos($source, '('), strpos($source, ')')));
      if($source_name) {
        $obj = new imldapSoapService();
        $objAuthorAttribute = $obj->soapRequest('getUserAttributs', array('id' => $_SESSION['ldap_login_key'], 'login' => $source_name, 'attributsType' =>  array('cn', 'mail'), 'pad'=>'|'));
        if($objAuthorAttribute->status == 'success') {
          //Split multiple email ids
          $author_name = explode('|', $objAuthorAttribute->data[0]);
          $author_email = explode('|', $objAuthorAttribute->data[1]);
          $node_array['author'] = array('name' => $author_name[1], 'email' => $author_email[1]);
        }
      }
    }
    //Relais en magasin
    $relais_en_magasin = array();
    $relais_en_magasin_values = array();
    $related_terms = isset($nodeObj->field_agenda_relais[LANGUAGE_NONE]) ? $nodeObj->field_agenda_relais[LANGUAGE_NONE] : array();
   
    foreach ($related_terms as $term) {
      $termObj = taxonomy_term_load($term['tid']);
      if(isset($termObj->field_taxo_relais_en_magasin[LANGUAGE_NONE][0]['value'])) {
        $relais_en_magasin[] = $termObj->field_taxo_relais_en_magasin[LANGUAGE_NONE][0]['value'];
      }
    }  
    $userData = user_load($user->uid);
    $user_profile_stores = array();
    $user_profile_stores = isset($userData->field_user_stores['und'][0]['value']) ? explode(',', $userData->field_user_stores['und'][0]['value']) : array();
    //If user select single store
    if(isset($_SESSION['user_selected_store']) && is_numeric($_SESSION['user_selected_store'])){
      $user_profile_stores = $_SESSION['user_selected_store'];
    }
    else {
      $st = array();
      if (isset($nodeObj->field_agenda_preference_nid['und'][0]['value'])) {
  		$node_preference = node_load($nodeObj->field_agenda_preference_nid['und'][0]['value']);
  		if(isset($node_preference->field_preferred_store_options['und']) && count($node_preference->field_preferred_store_options['und']) > 0){
  		  foreach ($node_preference->field_preferred_store_options['und'] as $value) {
  		  	$st[] = $value['value'];
  		  }
  		}
      }
      $node_content_stores = $st; //explode(',', $nodeObj->field_agenda_store['und'][0]['value']);
      $user_profile_stores = array_intersect($user_profile_stores, $node_content_stores);
    }
    
    if(count($relais_en_magasin) > 0 && count($user_profile_stores) == 1) {
      $result = db_query("SELECT DISTINCT sif.dit_cod_item,
                                 sif.ite_lib_value
                          FROM {store_item_fields} sif,
                               {store_item_fields_desc} sifd
                          WHERE sif.dit_cod_item = sifd.dit_cod_item
                          AND sifd.ddo_lib = 'Contacts' 
                          AND sifd.dit_lib IN (:params)
                          AND sif.pve_code IN(:user_profile_stores)",
                          array(':params' => $relais_en_magasin, ':user_profile_stores' => $user_profile_stores)
                         );
      $obj = new imldapSoapService();
      foreach ($result as $relaisObj) {
          if($relaisObj->dit_cod_item && $relaisObj->ite_lib_value) {
            $objAttribute = $obj->soapRequest('getUserAttributs', array('id' => $_SESSION['ldap_login_key'], 'login' => $relaisObj->ite_lib_value, 'attributsType' =>   array('cn', 'mail', 'mobile','telephoneNumber'), 'pad'=>''));
            if($objAttribute->status == 'success') {
              $relais_en_magasin_values[] = array('name' => $objAttribute->data[0], 'mail' => $objAttribute->data[1], 'mobile' => $objAttribute->data[2], 'telephoneNumber' => $objAttribute->data[3]);
            }
          }
        }
    }else if(count($user_profile_stores) > 1){
      foreach($relais_en_magasin as $magasin) {
        $relais_en_magasin_values[] = array('name' => '', 'mail' => $magasin);
      }
    }
    $node_array['relais_en_magasins'] = $relais_en_magasin_values;
    //documents
    $documents = (isset($nodeObj->field_agenda_attachments[LANGUAGE_NONE]) && is_array($nodeObj->field_agenda_attachments[LANGUAGE_NONE])) ? $nodeObj->field_agenda_attachments[LANGUAGE_NONE] : array();
    $document_links = array();
    foreach ($documents as $index => $document) {
      //$document_links[] = array('name' => $document['filename'], 'url' => urldecode(file_create_url($document['uri'])));
      $document_links[] = array('name' => $document['filename'], 'file_id' => $document['fid'], 'url' => file_create_url($document['uri']));
    }
    $node_array['document_links'] = $document_links;

    //For Questionnaire.
    $wnids = array();
    $questionnaire_ops = array();
    if($nodeObj->nid) {
      $wnids = questionnaire_wnids();
      $questionnaire_ops = questionnaire_display($nodeObj->nid, $wnids);
      if(!empty($questionnaire_ops)) {
        $node_array['questionnaire'] = $questionnaire_ops;
      }
    }
  }
  
  $output[] = ctools_modal_command_display(t('Title'), theme('agenda_detailed_page_template', $node_array));
    //Add variables in Drupal settings
  if (file_exists(DRUPAL_ROOT . '/sites/default/custom_settings.php')) {
    include DRUPAL_ROOT . '/sites/default/custom_settings.php';
  }
  $im_cuwa_x2 = '';
  if (!empty($_SESSION['profil']['store'])) {
      $im_cuwa_x2 = 1;
  }
  else {
    $im_cuwa_x2 = 2;
  }
    $xtpage = "display::".$nodeObj->type."::".$nodeObj->title;
    $xt_an = $user->uid;
    $im_cuwa_x1 = '';
    $im_cuwa_x3 = '';
    $im_cuwa_x4 = '';
    $im_cuwa_x5 = '';
 if (isset($_SESSION['ldap_user_role'])) {
    if ($_SESSION['ldap_user_role'] != 'salarie_siege') {
      if (isset($_SESSION['profil']['store'])) {
        $im_cuwa_x3 = $_SESSION['profil']['store'];
      }
    }
    if ($_SESSION['ldap_user_role'] == 'store_director'){
      $im_cuwa_x1 = 1;
    }
    if ($_SESSION['ldap_user_role'] == 'store_manager') {
      $im_cuwa_x1 = 2;
    }
    if ($_SESSION['ldap_user_role'] == 'store_employee') {
      $im_cuwa_x1 = 3;
    }
    if ($_SESSION['ldap_user_role'] == 'store_director_trainee') {
      $im_cuwa_x1 = 4;
    }
    if ($_SESSION['ldap_user_role'] == 'store_manager_trainee') {
      $im_cuwa_x1 = 5;
    }
  }
    if(isset($nodeObj->field_agenda_department[LANGUAGE_NONE])) {
      if(count($nodeObj->field_agenda_department['und'])> 1){
        $im_cuwa_x5 = 'multi-departments';
      }else{
        $department_tid= $nodeObj->field_agenda_department['und'][0]['tid'];
        if(!empty($department_tid)){
          $im_cuwa_x5 = taxonomy_term_load($department_tid)->name;
        }
      }
    }
  $cuwa_mode = variable_get('core_custom_im_cuwa_mode', 'test');
  drupal_add_js(array(
    'im_cuwa' => array(
      'xtpage' => $xtpage,
      'xtn2' => 1,
      'xt_an' => $xt_an,
      'xtsite' => $cuwa[$cuwa_mode]['xtsite'],//xsite value
      'x1' => $im_cuwa_x1,//DD,MM,EMP,DMS,MMS
      'x2' => $im_cuwa_x2,//MAGASIN,SEIGE
      'x3' => $im_cuwa_x3,//SHOP ID
      'x4' => arg(3),//Content id
      'x5' => $im_cuwa_x5,//DEPT
    )
  ), 'setting');
  drupal_add_js(drupal_get_path('module', 'im_cuwa') . '/js/im_cuwa.js');
  drupal_add_js(array(
    'im_cuwa' => array(
      'xtcore_path' => drupal_get_path('module', 'im_cuwa') . '/js/xtcore.js'
    )
  ), 'setting');
  $protocol = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
  if((isset($cuwa_xtsd) && isset($cuwa_xtsite) && isset($cuwa_xtpage)  && isset($cuwa_xt_an))) {
    $output[]= '<noscript> <div><img width="1" height="1" alt="" src="'.$cuwa[$cuwa_mode]['xtsd'][$protocol].'.xiti.com/hit.xiti?s='.$cuwa[$cuwa_mode]['xtsite'].'&s2=1&p='.$xtpage.'&di=&an=1&ac=" /></div></noscript>';
  }
  print ajax_render($output);
  exit;
}

function agenda_detailed_page_form(){
	ctools_add_js('ajax-responder');
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('YES'),
	);
	return $form;
}

function im_agenda_theme($existing, $type, $theme, $path) {
	return array(
	    'agenda_detailed_page_template' =>  array(
	      'template' => 'theme/agenda_detailed_page_template'
	    ),
	    'im_agenda_manage_content_form' =>  array(
         'template' => 'theme/im_agenda_manage_content_template',
         'render element' => 'form',
        ),
	    /*'sales_plan_node_form' => array(
            'arguments' => array('form' => null),
            'path' => drupal_get_path('theme', 'im').'/templates/',
            'template' => 'sales_plan--node-form', //name of your template file, it can be anything
            'render element' => 'form'
        )*/
    );
}

function im_agenda_add_ctools() {
	ctools_include('ajax');
	ctools_include('modal');
	// Add CTools' javascript to the page.
	ctools_modal_add_js();
	// Create our own javascript that will be used to theme a modal.
	$sample_style = array(
    'ctools-sample-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 1000,
        'height' => 400,
        'addWidth' => 20,
        'addHeight' => 15,
	),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#FFF',
	),
      'animation' => 'fadeIn',
      'modalTheme' => 'IntranetPopup',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading'), 'title' => t('Loading'))),
	),
	);
	drupal_add_js($sample_style, 'setting');
	ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
	ctools_add_css('ctools-ajax-sample', 'ctools_ajax_sample');
}
/**
 *
 * Function to bulid the month ...
 * @param date $start_date : Start date/User selected date of the agenda
 * @param date  $end_date : End date of the agenda
 * @return array : dtae content.
 */
function im_agenda_month($start_date, $end_date) {
  $week_dates = im_get_previous_month($start_date, $end_date, 0);
  return $week_dates;
}
/**
 *
 * Function to bulid the previous month data...
 * @param date $start_date : Start date/User selected date of the agenda
 * @param date  $end_date : End date of the agenda
 * @param int $cc: counter value
 */
function im_get_previous_month($start_date, $enddate, $cc) {
  $dates = array();
  $start_date = strtotime($start_date);
  $enddate = strtotime($enddate);
  for($index=0; date('Y-m-d', $start_date) >= date('Y-m-d',$enddate); ){
            $initial_start_date = date('Y-m-d', $start_date);
    $dates[$index]['week_date'][] = $start_date;
    $dates[$index]['weekno'] = date('W',$start_date);
    if(date('D',$start_date) == 'Mon') {
      ++$index;
    }
    $start_date = strtotime($initial_start_date . "-1 day" );
  }
  return $dates;
}
/**
 *
 * Function to bulid the week data
 *  @param date $start_date : The start date of the each week
 * @param date $actual_start_date : End date of the agenda list
 * @param date $actual_end_date : End date of the agenda list
 */
function im_agenda_bulid_week($start_date, $actual_start_date, $actual_end_date) {
  $dates = array();
  $date_being_considered = strtotime($start_date);
  $day_increment = 1;
  $output = "";
  $wday = date("w", strtotime($start_date));

  //Prepare the date array for the user start date /user selected date
  for ($i= 0; $i < 7 ; $i++) {
  	$day_of_the_week_to_show = date('j M', $date_being_considered);
//  	$output .= "<br/>" . $day_of_the_week_to_show;
  	if ((strtotime($actual_start_date) >= $date_being_considered) && (strtotime($actual_end_date) <= $date_being_considered)){
  	   $dates[] = $date_being_considered;
  	}
  	$date_being_considered = $date_being_considered - 60*60*24*$day_increment;
  }
  return $dates;
}

/**
 *
 * Create the agenda teaser view
 * @param integer $nid
 */
function _im_agenda_teaser_content($node){
  global $user;
  $output = '';
  $add_node_view_class = '';
  $node_view_count ='';
  ctools_add_js('ajax-responder');
  //drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/im_agenda.css');
  im_agenda_add_ctools();
//  $node = node_load($nid);
  $node_obj = (object)$node;
  $node_view_count = node_view_count_db_count_view_select($node_obj, $user); 
  if($node_view_count['0']->expression > 0){
    $add_node_view_class = 'dotted-read-content';
//    drupal_add_js("dotted-read-content = TRUE", 'inline');
  }
  $nid= $node['nid'];
  $title= $node['title'];
  $type = $node['type'];
  $node_body = !empty($node['body'])? $node['body'] : '';
  if (strlen($node_body) > 70){
    $node_body = mb_substr($node_body, 0, 70,'UTF-8') . '...';
    $body =  $node_body;
  }
  else{
    $body =  $node_body;
  }
  //dotted-read-content
  //$department_title='';
  $agenda_teaser_detail  = '';
  $icon_color ='white';
  $icon = '';
  //drupal_set_message('<pre>'.print_r($node,TRUE).'</pre>');
  if($type == 'action'){
    //$icon = '&#8982;';
    if(!empty($node['info']) && $node['info'] == 'info'){
      $icon = '<span class="action-info-icon"></span>';
    }
    else{
      $icon = '<span class="action-icon"></span>';
    }
  }
  elseif ($type == 'alert'){
    //$icon_alert_path = $base_url.'/'.drupal_get_path('module','im_agenda').'/css/images/triangle-typ1.png';
    $icon = '<span class="alert-icon"></span>';
    
  } 
  elseif ($type=='news'){
    $icon = '<span class="action-info-icon"></span>';
  }
  $department_name = '';
  $department_colors = '';
  $department_color ='';
  $department_color_code = '';
  //$detailed_agenda_view = ctools_modal_text_button($title, 'agenda-day/agenda-detail/nojs/'.$nid, '', 'ctools-modal-ctools-sample-style');
  //$detailed_agenda_view = $title;  
  if($node['tid_count']> 1){
    $department_color= 'gray';
    $department_color_code = 'gray';
    $department_name = '';
  }else{
  	$tid = isset($node['tid']) ? $node['tid'] : '';
  	if (!empty($tid)) {
  	  $department_colors= _get_department_color_by_tid($tid);    
      $department_color_org = isset($department_colors['color']) ? $department_colors['color'] : '';	
      $department_color = check_existing_color_code($department_color_org);	
  	}    
    if (!empty($department_color) && $department_color != 'ag_default') {
      $department_color_dot = explode("#", $department_color);
      if (isset($department_color_dot[1])) {
        $department_color_code = "cc" . $department_color_dot[1];
        $color_name = "present";
      }    	
    }
    else {
      $department_color_dot  = "ag_default";
      $department_color_code = "ag_default";
      $color_name = "ag_default";
      $department_color      = $department_color_org;
    }    
    if(!empty($department_colors['shortname'])){
      $department_name = $department_colors['shortname'];
    }
  }  
  $viewed_content='';
  if ($add_node_view_class) { 
    $agenda_teaser = '<div class="agenda-teaser '.$add_node_view_class.'">
    <div class="agenda-dept-name" style="color:'.$department_color.'" id ="'.$color_name.'" >'.$department_name.'</div>
    <div class="agenda-teaser-icon ' . $department_color_code . '" style="color:'.$icon_color.'">'.$icon.'</div>    
    <p class="agenda-teaser-title" style="color:'.$department_color.'">'.mb_substr($title, 0, 15, 'UTF-8').'</p>    
    </div>';
  }
  else {
    $agenda_teaser = '<div class="agenda-teaser '.$add_node_view_class.'">
    <div class="agenda-dept-name" style="color:'.$department_color.'" id ="'.$color_name.'">'.$department_name.'</div>
    <div class="agenda-teaser-icon" style="color:'.$icon_color.'">'.$icon.'</div>
    <span class="agenda-teaser-corner" style="border-top:20px solid '. $department_color.';border-right:20px solid '.$department_color.'"></span>
    <p class="agenda-teaser-title" style="color:'.$department_color.'">'.mb_substr($title, 0, 15, 'UTF-8').'</p>
    </div>';
  }
  
  $output .= l($agenda_teaser,'#',array('attributes' => array('id' => 'teaser-'.$nid, 'class' => 'agenda-teaser-min'),'html'=>TRUE,'external'=>TRUE));
  $agenda_teaser_detail = '<div class ="agenda-detail" style="background-color:'.$department_color.'"><h5>'.$title.'</h5>'.strip_tags($body).'</div>';
  $output .= '<div id="detail-teaser-'.$nid.'" class ="agenda-teaser-popup">' .ctools_modal_text_button($agenda_teaser_detail, 'agenda-detail/list/nojs/'.$nid, '', 'ctools-modal-ctools-sample-style').'</div>';
  return $output;
  
}
/**
 *
 * Get the color of the department
 * @param Integer $tid
 */
function _get_department_color_by_tid($tid){
  $term = taxonomy_term_load($tid);
 	$output['color'] = isset($term->field_taxo_department_color['und'][0]['rgb']) ? $term->field_taxo_department_color['und'][0]['rgb'] : '';
 	$output['name'] = $term->name;
 	$output['shortname'] = '';
 	if(!empty($term->field_taxo_shortname['und'][0]['value'])){
 	  $output['shortname'] = $term->field_taxo_shortname['und'][0]['value'];
 	}
  return $output;
}

function im_feature_agenda_ctools_popup_settings() {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');  
  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  // Create our own javascript that will be used to theme a modal.
  $sample_style = array(
    'ctools-sample-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 200,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'IntranetPopup',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );

  drupal_add_js($sample_style, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
  ctools_add_css('ctools-ajax-sample', 'ctools_ajax_sample');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Forcing new reversion value publishing.
 * IM-13 : Action: Return the Publication
 */
function im_agenda_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;	
  if (isset($form['author']['date'])) {
    $form['author']['date']['#description'] = t('Format: @datetime. The date format is DD-MM-YYYY and @zone is the time zone offset from UTC. Leave blank to use the time of form submission.', array('@datetime' => date("d-m-Y H:i:s O"), '@zone' => date("O")));
	if (!empty($form['author']['date']['#default_value'])) {
	  $form['author']['date']['#default_value'] = date("d-m-Y H:i:s O", strtotime($form['author']['date']['#default_value']));
	}
  }
  if (($form['#form_id'] == "action_node_form" || $form['#form_id'] == "operational_model_node_form") && !empty($form['#node']->nid)) {
    $node_obj = node_load($form['#node']->nid, $form['#node']->vid);
    $form['#node']->log = $node_obj->log;
    $form['revision_information']['log']['#default_value'] = $node_obj->log;
  }
  if($form['type']['#value'] == 'action'){
    $form['revision_information']['log']['#required'] = TRUE;
  }
  if($form['type']['#value'] == 'action' || $form['type']['#value'] == 'alert' ||$form['type']['#value'] == 'news' || $form['type']['#value'] == 'benchmark'){
	  if (!empty($form_state['node']->field_agenda_store['und'][0]['value'])) {
	  	if(empty($_SESSION['selected_store_list'])){
	     $_SESSION['selected_store_list'] = $form_state['node']->field_agenda_store['und'][0]['value'];
		  }
		  $_SESSION['selected_store_mandatory'] = $form_state['node']->field_agenda_store['und'][0]['value'];
	  }
	    $form['field_agenda_attachments']['und']['#title'] = t('Attachment Agenda');
  }  
	$node = $form['#node'];
	
	$path = request_path();
	if (strpos($path,'autosave/restore') === false) {
      variable_set('pathurl'.$form_id, $_SERVER['REQUEST_URI']);
	}	
   if (arg(0) != 'admin' && variable_get('autosave_' . $node->type, 0) && empty($_POST['autosave_form_path'])) {      
    if (strpos($path,'autosave/restore') !== false){
      $path = variable_get('pathurl'.$form_id);  
      $form['#action'] = $path;
      $_GET['q'] = $path;
    }
    // Make a note in the form of what the original path is, since when submitting
    // the autosaved form to our own callback it will not be the same.
    $form['autosave_form_path'] = array(
      '#type' => 'hidden',
      '#value' => $path,
    );

    $formid = str_replace("_", "-", $form_id);
    $https_variable = variable_get("https");
	  if ($https_variable) {
		   $base_url = str_replace("http://", "https://", $base_url);
	  }
    $settings['autosave']['formid'] = $formid;
    $settings['autosave']['url'] = url('agenda/autosave/handler');
    $settings['autosave']['period'] = variable_get('autosave_period', 10);
    $settings['autosave']['q'] = $path;
    $settings['autosave']['basePath'] = $base_url;
    $settings['autosave']['hidden'] = variable_get('autosave_hidden', 0);
    $settings['autosave']['theme'] = $GLOBALS['theme'];

    // If an autosaved version of the form exists, let the user know so that
    // he can restore it if desired.
    $timestamp = db_query("SELECT timestamp FROM {autosaved_forms} WHERE form_id = :form_id AND path = :path AND uid = :uid", array(
      ':form_id' => $form_id,
      ':path' => $path,
      ':uid' => $GLOBALS['user']->uid,
    ))->fetchField();
    $settings['autosave']['savedTimestamp'] = $timestamp ? $timestamp : 0;
    $settings['autosave']['savedDate'] = $timestamp ? format_date($timestamp) : 0;
    $settings['autosave']['formToken'] = drupal_get_token($form_id);

    $form['autosave_form_path']['#attached']['library'][] = array('autosave', 'autosave');
    $form['autosave_form_path']['#attached']['js'][] = array(
      'data' => $settings,
      'type' => 'setting',
      'scope' => JS_DEFAULT,
    );
  }
$form['field_attached_regional_profiles']['#attributes']['style'] = 'display:none';
}

function _im_agenda_file_upload() {
  $form_parents = func_get_args();
  $form_build_id = (string) array_pop($form_parents);

  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
    // Invalid request.
    //drupal_set_message(t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))), 'error');
    $commands = array();
    $commands[] = ajax_command_replace("#file-validation-error", '<div id="file-validation-error">' . t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))) . '</div>');
    //return array('#type' => 'ajax', '#commands' => $commands);
    echo '<div class="messages error">' . t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))) . '</div>';
    exit;
  }
  
  list($form, $form_state) = ajax_get_form();

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  // Get the current element and count the number of files.
  $current_element = $form;
  foreach ($form_parents as $parent) {
    $current_element = $current_element[$parent];
  }
  $current_file_count = isset($current_element['#file_upload_delta']) ? $current_element['#file_upload_delta'] : 0;

  // Process user input. $form and $form_state are modified in the process.
  drupal_process_form($form['#form_id'], $form, $form_state);

  // Retrieve the element to be rendered.
  foreach ($form_parents as $parent) {
    $form = $form[$parent];
  }

  // Add the special Ajax class if a new file was added.
  if (isset($form['#file_upload_delta']) && $current_file_count < $form['#file_upload_delta']) {
    $form[$current_file_count]['#attributes']['class'][] = 'ajax-new-content';
  }
  // Otherwise just add the new content class on a placeholder.
  else {
    $form['#suffix'] .= '<span class="ajax-new-content"></span>';
  }

  $output = theme('status_messages') . drupal_render($form);
  $js = drupal_add_js();
  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);
/*$commands = array();
  $commands[] = ajax_command_replace("#file-validation-error", '<div id="file-validation-error"></div>');
  return array('#type' => 'ajax', '#commands' => $commands);*/
  $commands = array();
  $commands[] = ajax_command_replace(NULL, $output, $settings);
  $commands[] = ajax_command_replace("#file-validation-error", '<div id="file-validation-error"></div>');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Handles save as draft for published content for action type content.
*/
function save_as_draft_submit_action($form, &$form_state) {
	if($form_state['clicked_button']['#value'] == $form_state['values']['save_draft']){
	    global $language;		
		global $user;
		$field_list_set = field_read_fields(array('bundle' => $form_state['values']['type']));
		$field_list = array_keys($field_list_set);
		$node = new stdClass();
		$node->type = $form_state['values']['type'];
		node_object_prepare($node);
		$node->language =  $language->language;
		foreach ($field_list_set as $key=>$field) {			
			if (in_array($key, $field_list)) {
				if (isset($form_state['values'][$key])) {
					//If field type is image/file
					if ($field['type'] == 'image' || $field['type'] == 'file') {						
						foreach ($form_state['values'][$key]['und'] as $fkey=>$fvalue) {
							//If file attachment fid value is 0 unset that attachment
							if ($fvalue['fid'] == 0) {
								unset($form_state['values'][$key]['und'][$fkey]);
							}
						}
						$node->$key = $form_state['values'][$key];
					}
					else {
						$taxonomy_flags = array_keys($form_state['values'][$key]['und'][0]);
						if ($taxonomy_flags[0] == "tid") {
							if (!empty($form_state['values'][$key]['und'][0]['tid'])) {
								$node->$key = $form_state['values'][$key];
							}else{
								$node->$field['field_name'] = array("und"=>array());
							}
						}
						else {
							$node->$key = $form_state['values'][$key];
						}
					}
				}
			}
		}
		$node->title = $form_state['values']['title'];
		$node->status = 0;
		$node->uid = $form_state['values']['uid'];
		$node->revision_uid = $user->uid;
		$node->nid = $form_state['values']['nid'];
		$node->vid = $form_state['values']['vid'];
		if ($form_state['values']['type'] == "operational_model") {
			$node->field_om_domain['und'][0]['tid'] = $form_state['values']['field_om_domain_custom'];
			$node->field_om_subdomain['und'][0]['tid'] = $form_state['values']['field_om_subdomain_custom'];
			$node->field_om_macro_activity['und'][0]['tid'] = $form_state['values']['field_om_macro_activity_custom'];
		}
		$node->field_node_archive['und'][0]['value'] = 0;
		$node->field_draft_status['und'][0]['value'] = 1;
		$node->log = "Updated by " . $user->name . ".";
		node_save($node);
	
		$nid = $form['nid']['#value'];
		$node = node_load($nid);
		  
		if($form['type']['#value'] == "action" || $form['type']['#value'] == "operational_model"){
			//Update the Moderator status to draft
		    $state['to_state'] = "draft";
		    $form_state['values']['workbench_moderation_state_new'] = $state['to_state'];
		    workbench_moderation_moderate($node, $form_state['values']['workbench_moderation_state_new']);
		}
		drupal_goto('admin/workbench');
	}
}

/**
 * Implemented hook_form_alter. 
 */
function im_agenda_form_alter(&$form, &$form_state, $form_id) {
//	drupal_set_message("<pre>" . print_r($form_state, TRUE) . "</pre>");  
  if (arg(0) == 'node' && arg(2) != "webform") { // && is_numeric(arg(1)) && arg(2) == 'webform' && arg(3) == ''
    drupal_add_js(drupal_get_path('module', 'im_custom') . '/js/im_custom.js');
    $form['#prefix'] = '<div id="file-validation-error"></div>';
  }
  //Exclude saint of the day.
  global $user;
  if($form_id == 'sales_plan_node_form') {
	$form['field_sp_image_pros']['und'][0]['#title'] = t('Image pros');			
  }
  if ($form_id == 'action_node_form' || $form_id == 'alert_node_form' || $form_id == 'news_node_form' || $form_id == 'benchmark_node_form' || $form_id == 'operational_model_node_form') {  	
  	$form['#attached']['css'][] = drupal_get_path('module', 'im_agenda') . '/css/im_agenda.css';
  	$form['#attached']['css'][] = drupal_get_path('module', 'im_agenda') . '/css/jquery.alerts.css';
  	$form['#attached']['css'][] = drupal_get_path('module', 'im_features_stores') . '/css/im_features_stores.css';
  	$form['#attached']['css'][] = drupal_get_path('module', 'multiselect') . '/multiselect.css';
  	$form['#attached']['js'][] = drupal_get_path('module', 'im_agenda') . '/js/im_agenda.js';
  	$form['#attached']['js'][] = drupal_get_path('module', 'im_agenda') . '/js/jquery.alerts.js';
  	$form['#attached']['js'][] = drupal_get_path('module', 'im_features_stores') . '/js/im_features_stores.js';
  	$form['#attached']['js'][] = drupal_get_path('module', 'multiselect') . '/multiselect.js';
  	/*drupal_add_js(drupal_get_path('module', 'im_agenda') . '/js/jquery.alerts.js');
  	drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/jquery.alerts.css'); 
  	drupal_add_css(drupal_get_path('module', 'im_features_stores') . '/css/im_features_stores.css');
  	drupal_add_js(drupal_get_path('module', 'im_features_stores') . '/js/im_features_stores.js');
    drupal_add_css(drupal_get_path('module', 'multiselect') . '/multiselect.css');
    drupal_add_js(drupal_get_path('module', 'multiselect') . '/multiselect.js'); */  
    im_agenda_add_ctools();
  }
  
  if ($form_id == 'action_node_form' || $form_id == 'alert_node_form' || $form_id == 'news_node_form' || $form_id == 'benchmark_node_form') {
  	if ($form_id == 'action_node_form') {
  	  $action_to_date_n_value = variable_get('action_publication_todate_nvalue','18');
  	  drupal_add_js(array('im_agenda' => array('action_to_date' => $action_to_date_n_value)), 'setting');  		
  	}
  	elseif ($form_id == 'alert_node_form') {
  	  $alert_to_date_n_value = variable_get('alert_publication_todate_nvalue','18');
  	  drupal_add_js(array('im_agenda' => array('alert_to_date' => $alert_to_date_n_value)), 'setting');  		
  	}
  	elseif ($form_id == 'news_node_form') {
  	  $news_to_date_n_value = variable_get('news_publication_todate_nvalue','18');
  	  drupal_add_js(array('im_agenda' => array('news_to_date' => $news_to_date_n_value)), 'setting');  		
  	}
  	elseif ($form_id == 'benchmark_node_form') {
      $benchmark_to_date_n_value = variable_get('benchmark_publication_todate_nvalue','18');
  	  drupal_add_js(array('im_agenda' => array('benchmark_to_date' => $benchmark_to_date_n_value)), 'setting');  		
  	}  	
  	$userProfile = user_load($user->uid);    
   	//im_feature_agenda_ctools_popup_settings();
  	$profile_name = array();
  	if (isset($_SESSION['ldap_login_key'])) {   
	    $obj = new imldapSoapService();
	    $profile = $obj->soapRequest('getProfil', array('id' => $_SESSION['ldap_login_key']));
	    if(isset($profile->data)){
		    $profile = simplexml_load_string($profile->data);
		    include_once drupal_get_path('module', 'im_user') . '/im_user.profile.inc';
		    $profile_name = _get_profile_name($profile);	      
		    if(empty($form['#node']->field_agenda_source['und'][0]['value'])){
		       $form['field_agenda_source']['und'][0]['value']['#default_value'] = $profile_name['cn'].'('.$_SESSION['ldap_user_id'].')';
		    }
	    } 
	}
  	$author_name = $form['#node']->name;
  
  	if(isset($form['#node']->nid)){
	  	$author = _im_user_get_data($form['#node']->uid);
  		$default_name = $author['full_name'];
	  	$created_time = date('d/m/Y', $form['#node']->created);
	  	$modified_time = date('d/m/Y', $form['#node']->changed);
	}else{
	    $author = _im_user_get_data($user->uid);
	  	$default_name = $author['full_name'];
	  	$created_time = date('d/m/Y');
	  	$modified_time = date('d/m/Y');
	}
	if($default_name==NULL) {
		$default_name = 'Anonymous';
	}
  /*$timecreated = $form['#node']->created;
  if (!empty($form['#node']->changed)) {
    $timechanged = $form['#node']->changed;
  }*/
  
  $form['action_created_by'] = array(
    '#type' => 'item',
    '#title' => t('Created by'),
    '#markup' => $default_name,
    '#weight' => -5,
  );
  $form['action_last_modified_date'] = array(
    '#type' => 'item',
    '#title' => t('Last Modified Date'),
    '#markup' => $modified_time,
    '#weight' => -5,
  );
  $form['action_created_date'] = array(
    '#type' => 'item',
    '#title' => t('Created Date'),
    '#markup' => $created_time,
    '#weight' => -5,
  );
  if (empty($form_state['input']['form_build_id']) && isset($_SESSION['selected_store_preference_nid'])) {    
      unset($_SESSION['selected_store_preference_nid']);
  }
  
  $store_options_count = '';
  $store_preference_nid = 'add';
  $ctools_url = 'preferred/node/form/nojs/' . $store_preference_nid;  
  $_SESSION['selected_store_preference_nid_ctools'] = isset($_SESSION['selected_store_preference_nid']) ? $_SESSION['selected_store_preference_nid'] : '';     
  if (is_numeric(arg(1)) || !empty($_SESSION['selected_store_preference_nid_ctools'])) {
  	if (is_numeric(arg(1))) {  		
  	  $agenda_nid = intval(arg(1));
  	  $node_agenda = node_load($agenda_nid);
  	  $nid_value = isset($node_agenda->field_agenda_preference_nid['und'][0]['value']) ? $node_agenda->field_agenda_preference_nid['und'][0]['value'] : '';
  	}
  	else {
  	  $nid_value = intval($_SESSION['selected_store_preference_nid_ctools']);  		
  	}	
  	 
  	$node_preference = node_load($nid_value);  	 
  	$store_preference_nid = '';
  	if(isset($node_preference->field_preferred_store_options['und']) && count($node_preference->field_preferred_store_options['und']) > 0){
  		  $store_options_count = '(' . count($node_preference->field_preferred_store_options['und']) . ')';
  		  $store_preference_nid = $nid_value;
  		  $ctools_url = 'preferred/node/form/nojs/' . $store_preference_nid . '/edit';
  		}
  		else{
  		  $store_options_count =  t("No stores added"); //'(' . count($node_preference->field_preferred_store_options['und']) . ')';
  		  $ctools_url = 'preferred/node/form/nojs/add';
  		}	
  }
    
  
  $form['action_concered_store'] = array(
    '#type' => 'item',
//    '#markup' => ctools_modal_text_button(t('Define the criteria of CONCERNED stores'), $_GET['q'] . '/nojs/user_store_preference_form_ctools', t('Define the criteria of CONCERNED stores'),  'ctools-modal-ctools-sample-style'),
  	'#markup' => ctools_modal_text_button(t('Define the criteria of CONCERNED stores'), $ctools_url, t('Define the criteria of CONCERNED stores'),  'ctools-modal-ctools-sample-style store-autosave'),  
    '#weight' => 25, 
    '#suffix' => '<span id="store-count">' . $store_options_count . '</span>',
  );
  //Reset the GET [Q] with the correct path after autosave
  $path = request_path();
  if (strpos($path,'autosave/restore') !== false){
    $path = variable_get('pathurl'.$form_id);      
    $_GET['q'] = ltrim($path, '/');
  }  
  $form['action_change_user'] = array(
    '#markup' => ctools_modal_text_button(t('Changer auteur'),  $_GET['q'] . '/nojs/user_search_details', t('Search User'),  'ctools-modal-ctools-sample-style'),
    '#weight' => 6.5,
  );
  if ($form_id == 'action_node_form') {
    $form['action_change_user'] = array(
      '#markup' => ctools_modal_text_button(t('Changer auteur'),  $_GET['q'] . '/nojs/user_search_details', t('Search User'),  'ctools-modal-ctools-sample-style'),
      '#weight' => 7.5,
    );
  }
  //$form['field_publication_to_date']['#attributes']['style'] = 'display:none';
  $form['field_agenda_store']['#attributes']['style'] = 'display:none';
  $form['field_node_archive']['#attributes']['style'] = 'display:none';
  $form['field_draft_status']['#attributes']['style'] = 'display:none';
  }
  $form['field_agenda_preference_nid']['#attributes']['style'] = 'display:none';

  //Action content type workflow
  if($form_id == 'action_node_form'){
  	im_ageda_action_workflow($form, $form_state, $form_id);
  }
  // Rights for contributor : A contributor action, alert, actumarket, bench can only ARCHIVE (not modify) a content published by himself
  if ((in_array('contributor_action',$user->roles) || in_array('contributor_alert',$user->roles) || in_array('contributor_news',$user->roles) || in_array('contributor_benchmark',$user->roles)) && ($form['uid']['#value'] == $user->uid)) {    
    if (arg(2) == 'edit' && $form['#node']->status != 0) {
	    $form['actions']['archive'] = array (
	           '#type' => 'submit',
	           '#value' => t('Archiver'),
	           '#access' => TRUE,
	           '#weight' => 10,
	           '#submit' => array('archive_submit'),
	           '#validate' => array('im_agenda_form_validate'),
	         );
    }
  }
  
  //Operation Model content type workflow
  if($form_id == 'operational_model_node_form'){
  	// Assign OM publication ToDate 'N' value to variable for recalculate the Publication To Date when Publication From Date is changed
  	$om_to_date_n_value = variable_get('im_admin_n','12');
  	drupal_add_js(array('im_om_todate' => array('om_to_date' => $om_to_date_n_value)), 'setting');
  	
  	//OM Workflow
  	im_ageda_operational_model_workflow($form, $form_state, $form_id);  	
  }

  	//Content type Alert/News/BenchMark
  	if($form_id == 'alert_node_form' || $form_id == 'news_node_form' || $form_id == 'benchmark_node_form'){
	  	if ($form_id == 'benchmark_node_form'){
	  	  $profile_name = array();
        if (isset($_SESSION['ldap_login_key'])) {   
          $obj = new imldapSoapService();
          $profile = $obj->soapRequest('getProfil', array('id' => $_SESSION['ldap_login_key']));
          $profile = simplexml_load_string($profile->data);
          include_once drupal_get_path('module', 'im_user') . '/im_user.profile.inc';
          $profile_name = _get_profile_name($profile);   
          if(empty($form['#node']->field_agenda_source['und'][0]['value'])){
            $form['field_agenda_source']['und'][0]['value']['#default_value'] = $profile_name['cn'].'('.$_SESSION['ldap_user_id'].')';
          }
        }			  
				  $form['field_agenda_store']['#attributes']['style'] = 'display:none';
					 $form['action_change_user'] = array(
			
			    '#markup' => ctools_modal_text_button(t('Changer auteur'), $_GET['q'] . '/nojs/user_search_details', t('Search User'),  'ctools-modal-ctools-sample-style'),
			    '#weight' => 8,
			    );
		}
  	  //Add Content Form
	  if(!isset($form['nid']['#value'])){
	  	//while creating node
	   	//Display Save As Draft button
	  	if(user_access('save draft')) {
		  	$form['actions']['save_draft'] = array (
				'#type' => 'submit',
				'#value' => t('Save as Draft'),
				'#access' => TRUE,
				'#weight' => 6,
				'#submit' => array('save_as_draft_submit'),
		  		'#validate' => array('im_agenda_form_validate'),
			);
		}
		if(user_access('publish')){					
			$form['actions']['publish'] = array (
				'#type' => 'submit',
				'#value' => t('Publish'),
				'#access' => TRUE,
				'#weight' => 7,
				'#submit' => array('publish_submit'),
				'#validate' => array('im_agenda_form_validate'),
			);
		}
	}
	//Edit Content Form
	else{
		 $node_obj = node_load($form['nid']['#value']);
		$node_status = $node_obj->status;
		$archived = $node_obj->field_node_archive['und'][0]['value'];
		global $user;		
		//Display Save As Draft button
	  	if($node_status == 0 && $archived == 0 && user_access('save draft') && (in_array('content_manager_action',$user->roles)||in_array('content_manager_action_regional',$user->roles)||in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || in_array('contributor_alert',$user->roles) || in_array('contributor_news',$user->roles) || in_array('contributor_benchmark',$user->roles))) {	  	
		  	$form['actions']['save_draft'] = array (
				'#type' => 'submit',
				'#value' => t('Save as Draft'),
				'#access' => TRUE,
				'#weight' => 6,
				'#submit' => array('save_as_draft_submit'),
		  		'#validate' => array('im_agenda_form_validate'),
			);
		}
		//Display the Publish Button
		if(($node_status == 0 && $archived == 0) && user_access('publish')){					
			$form['actions']['publish'] = array (
				'#type' => 'submit',
				'#value' => t('Publish'),
				'#access' => TRUE,
				'#weight' => 7,
				'#submit' => array('publish_submit'),
				'#validate' => array('im_agenda_form_validate'),
			);
		}
		
		//Display the publish button for archived content to admin role
		if($node_status == 0 && $archived == 1 && (in_array('administrator',$user->roles) || in_array('technical_director',$user->roles))){
			$form['actions']['publish'] = array (
				'#type' => 'submit',
				'#value' => t('Save and publish'),
				'#access' => TRUE,
				'#weight' => 7,
				'#submit' => array('publish_submit'),
				'#validate' => array('im_agenda_form_validate'),
			);
			$form['actions']['save_draft'] = array (
				'#type' => 'submit',
				'#value' => t('Save as Draft'),
				'#access' => TRUE,
				'#weight' => 6,
				'#submit' => array('save_as_draft_submit'),
		  		'#validate' => array('im_agenda_form_validate'),
			);

		}

		//Display the Archive button for the published contents	  	
	  	if($node_status == 1 && (in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles))) {
	  		if(user_access('archive')) {
		  		$form['actions']['archive'] = array (
		  			'#type' => 'submit',
		  			'#value' => t('Archiver'),
		  			'#access' => TRUE,
		  			'#weight' => 10,
		  			'#submit' => array('archive_submit'),
		  			'#validate' => array('im_agenda_form_validate'),
		  		);
	  		}
	  		//Display the Save button for published contents for administrator/Content Manager/Technical Director roles
		  	if(in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)){
	  			$form['actions']['save'] = array (
			        '#type' => 'submit',
			        '#value' => t('Publish modification (Save)'),
			        '#access' => TRUE,
			        '#weight' => 6,
			        '#submit' => array('_im_agenda_node_submit'),
	  				'#validate' => array('im_agenda_form_validate'),
			    );
	  		}
	  	}
		//Display the Delete button
	  	if($node_status == 1){
	  		unset($form['actions']['delete']);
	  	}
	  	if($node_status == 0 && $archived == 1 && (!in_array('administrator',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('content_manager_action_regional',$user->roles))){
	  		unset($form['actions']['delete']);
	  	}
	  	if($archived == 1 && (in_array('administrator',$user->roles) || in_array('technical_director',$user->roles))){
	  		drupal_add_js('jQuery(document).ready(function () {jQuery("#edit-field-node-archive-und").attr("checked",false) });', 'inline');
	  	}
	 }
   }
   if($form_id == 'action_node_form' || $form_id == 'alert_node_form' || $form_id == 'news_node_form' || $form_id == 'benchmark_node_form'){
   		//Display Publication To Date as Readonly 
   		//$form['field_publication_to_date']['#disabled'] = TRUE;
   		
   		//Set Publication To date based on the configured nvalue
   		if(!isset($form['nid']['#value'])){	   		
	   	  if($form_id == 'action_node_form'){
	   	    $agenda_to_date_n_value = variable_get('action_publication_todate_nvalue','18');
	    	$publication_to_date = date('Y-m-d',strtotime('+'.$agenda_to_date_n_value.' month',strtotime("today +1day")));
	   	  }
	   	  elseif ($form_id == 'alert_node_form') {
  	        $alert_to_date_n_value = variable_get('alert_publication_todate_nvalue','18');
  	        $publication_to_date = date('Y-m-d',strtotime('+'.$alert_to_date_n_value.' month',strtotime("today")));	
  	      }
  	      elseif ($form_id == 'news_node_form') {
  	        $news_to_date_n_value = variable_get('news_publication_todate_nvalue','18');
  	        $publication_to_date = date('Y-m-d',strtotime('+'.$news_to_date_n_value.' month',strtotime("today")));		
  	      }
  	      elseif ($form_id == 'benchmark_node_form') {
            $benchmark_to_date_n_value = variable_get('benchmark_publication_todate_nvalue','18');
  	        $publication_to_date = date('Y-m-d',strtotime('+'.$benchmark_to_date_n_value.' month',strtotime("today"))); 		
  	      }  	
	   	  $form['field_publication_to_date']['und'][0]['#default_value']['value'] = $publication_to_date;
   		}
   		//Hiding Save button
   		unset($form['actions']['submit']);
   		//$form['#submit'] = array('_im_agenda_store_flag_submit');
   }
 if($form_id == 'operational_model_node_form'){
   		//Display Publication To Date as Readonly 
   		//$form['field_publication_to_date']['#disabled'] = TRUE;
   		
   		//Hiding Save button
   		unset($form['actions']['submit']);
   }
  if($form_id == 'views_exposed_form') {  	
    $form['type']['#options']['All'] = '- Tous -';
    $form['field_om_location_tid']['#options']['All'] = '- Tous -';
    $form['field_om_domain_tid']['#options']['All'] = '- Tous -';
    $form['field_om_subdomain_tid']['#options']['All'] = '- Tous -';
    $form['field_om_macro_activity_tid']['#options']['All'] = '- Tous -';
    $form['field_om_actuers_tid']['#options']['All'] = '- Tous -';
    $form['status']['#options']['All'] = '- Tous -';
    $form['field_sp_type_value']['#options']['All'] = '- Tous -';
    $form['field_sp_regions_tid']['#options']['All'] = '- Tous -';
    $form['field_app_category_tid']['#options']['All'] = '- Tous -';
    $form['field_dir_category_tid']['#options']['All'] = '- Tous -';
    $form['status_1']['#options']['All']= t('- Any -');
    $form['status_1']['#options'][1] = t('Published');    
    $form['status_1']['#options'][0] = t('Not published');
  }
}

/**
 * 
 * Generates multiple contents as per the regional moderators & stores attached to the content.
 * This will execute, only for regional action content.
 * @param $form
 * @param $form_state
 */
function save_prepare_regional_moderation_submit($form, &$form_state) {
	$regional_managers = array();
	$reg_store = '';
	$node_national_regional = array();
	//This Query was changed to implement the UATIM-614 for regional users
	$result = db_query("SELECT entity_id, field_rmp_store_value FROM field_data_field_rmp_store");	
	foreach ($result as $regional_store) {
	  $regional_managers[$regional_store->entity_id] = $regional_store->field_rmp_store_value;
	  $reg_store .=  $regional_store->field_rmp_store_value.',';
	}
	//This is the regional profiles array with the list of entity_ids and stoters attached to the same.
	if(!empty($regional_managers)){
 	if(strstr($reg_store, ',')) {
    	$regional_exploded_store = explode(',', $reg_store);
    	$all_regional_store = array_filter($regional_exploded_store);
 	}
	if (!isset($form['#node']->nid)) {
	  $selected_stores = isset($_SESSION['selected_store_list']) ? explode(',', $_SESSION['selected_store_list']) : FALSE;
	}
	else {
		$tmp = $form['#node']->field_agenda_store['und'][0]['safe_value'];
		$selected_stores = explode(",", $tmp);
	}
	$node_store_intersect_manager_store = array();
	
	$selected_store_list_national = $selected_stores;
	if(!empty($selected_stores)){
	foreach($selected_stores as $selected_store) {
	  foreach ($regional_managers as $manager_uid => $regional_stores) {
	    //Checks whether node attached store exist with any regional moderator store.
	    if (in_array($selected_store, $all_regional_store)) {
	      if(in_array($selected_store, explode(',', $regional_stores))) {
	        if(!in_array($manager_uid, $node_national_regional)) {
	          $node_national_regional[] = $manager_uid;
	          $node_store_intersect_manager_store[$manager_uid] = array_intersect($selected_stores, explode(',', $regional_stores));
	          $selected_store_list_national = array_diff($selected_store_list_national, $node_store_intersect_manager_store[$manager_uid]);
	        }
	      }
	    }
	    else{//If no moderator responsible for the store, create National content.
	    	//single store is regional store,added this second condition. 
	      if(!in_array('national', $node_national_regional) && !empty($selected_store_list_national)) {
         $node_national_regional[] = 'national';
	      }
	    }
	  }
	}
	}else{
		drupal_set_message(t('Store Selection (Define the criteria of CONCERNED stores) button is mandatory.'),"warning");
		drupal_set_message(t('Content not created because of store is not selected.'),"warning");
    
	}
	if(!empty($selected_stores)){
	  //If multiple stores are selected - with content
	  $_SESSION['email_status'] = TRUE;
	  //$attached_profile_title = '';
	  foreach ($node_national_regional as $national_regional) {
	  	//getting the regional moderator profile names that are attached to the content
	  	$attached_profile_title = '';
	  	if(is_numeric($national_regional)){
	  		$title = node_load($national_regional)->title;
			$attached_profile_title = $title;   	
	    }
	    $node = node_form_submit_build_node($form, $form_state);
	    $node->field_attached_regional_profiles['und'][0]['value'] = $attached_profile_title;
	    $draftnodeid =$node->nid;
	    $prefered_store_nodeid =$node->field_agenda_preference_nid['und'][0]['value'];
	        
        unset($node->nid);
        unset($node->vid);
        $node->field_node_archive['und'][0]['value'] = 0;
        $node->field_draft_status['und'][0]['value'] = 0;
        
        if ($national_regional == 'national') {
          $_SESSION['selected_store_list'] = implode(',', $selected_store_list_national);
          $_SESSION['selected_store_list_regional'] =  $selected_store_list_national;
          $node = node_submit($node);
          node_save($node);
          $node = node_load($node->nid);
          $node->field_agenda_store['und'][0]['value'] = $selected_store_list_national;
      	  $node->field_agenda_store['und'][0]['safe_value'] = $selected_store_list_national;
      	  node_save($node);
      	  _im_agenda_store_flag_submit($form, $form_state);
        }
        else if (isset($node_store_intersect_manager_store[$national_regional])) {
          $_SESSION['selected_store_list'] = implode(',', $node_store_intersect_manager_store[$national_regional]);
          $_SESSION['selected_store_list_regional'] = $node_store_intersect_manager_store[$national_regional];
          if(!empty($_SESSION['selected_store_preference_nid'])){
          	$_SESSION['selected_store_preference_nid_new'] = $_SESSION['selected_store_preference_nid'];
          }
          $_SESSION['selected_store_preference_nid'] = $_SESSION['selected_store_preference_nid_new'];
          $node = node_submit($node);
          node_save($node);
          $node = node_load($node->nid);
          $node->field_agenda_store['und'][0]['value'] = $node_store_intersect_manager_store[$national_regional];
      	  $node->field_agenda_store['und'][0]['safe_value'] = $node_store_intersect_manager_store[$national_regional];
      	  node_save($node); 
      	  _im_agenda_store_flag_submit($form, $form_state);
        }
        unset($_SESSION['selected_store_list_regional']);
	    _im_agenda_duplication_content_email($national_regional,$node->nid,$node->title);
	    if(isset($node->nid)) {
	      $node = node_load($node->nid);
	  	  //$state['to_state'] = $form_state['values']['workbench_moderation_state_current'];
	      $form_state['values']['workbench_moderation_state_new'] = 'needs_review';
	      workbench_moderation_moderate($node, $form_state['values']['workbench_moderation_state_new']);
        drupal_set_message('Regional content has been created');
		    $_SESSION['email_status'] = FALSE;
        }
      }
	}
	/*
	else{
	  form_set_error('', "Select regional stores");return;
	  //If no stores selected  - with content
	  $node = node_form_submit_build_node($form, $form_state);
      unset($node->nid);
      unset($node->vid);
      $node->field_node_archive['und'][0]['value'] = 0;
      $node->field_draft_status['und'][0]['value'] = 0;
	  if($national_regional == 'national') {
        $_SESSION['selected_store_list'] = implode(',', $selected_store_list_national);
        node_save($node);
      }else if(isset($node_store_intersect_manager_store[$national_regional])) {
        $_SESSION['selected_store_list'] = implode(',', $node_store_intersect_manager_store[$national_regional]);
        node_save($node);
      }
      _im_agenda_duplication_content_email('national',$node->nid,$node->title);
	  if(isset($node->nid)) {
	  	$node = node_load($node->nid);
	  	//$state['to_state'] = $form_state['values']['workbench_moderation_state_current'];
	    $form_state['values']['workbench_moderation_state_new'] = 'needs_review';
	    workbench_moderation_moderate($node, $form_state['values']['workbench_moderation_state_new']);
        drupal_set_message('Regional content has been created');
      }
	}*/    
	unset($_SESSION['selected_store_list']);
	unset($_SESSION['selected_store_preference_nid']);
	node_delete($draftnodeid);
	node_delete($prefered_store_nodeid);
	}else{
		$node = node_form_submit_build_node($form, $form_state);
		$draftnodeid=$node->nid;		
		$node->field_node_archive['und'][0]['value'] = 0;
    $node->field_draft_status['und'][0]['value'] = 0;
		$node = node_submit($node);
    node_save($node); 
    if(isset($node->nid)) {
	      $form_state['values']['workbench_moderation_state_new'] = 'needs_review';
	      workbench_moderation_moderate($node, $form_state['values']['workbench_moderation_state_new']);       
        }
    $prefered_store_nodeid =$node->field_agenda_preference_nid['und'][0]['value'];
    unset($_SESSION['selected_store_list']);
    unset($_SESSION['selected_store_preference_nid']);   
    //node_delete($draftnodeid);
    //node_delete($prefered_store_nodeid);
	}
	drupal_goto('admin/im/manage/agenda');
}
//Below fn is commented after UATIM-548
function _im_agenda_store_flag_submit($form, &$form_state) {
  if (empty($_SESSION['selected_store_preference_nid']) && empty($form_state['values']['field_agenda_preference_nid']['und'][0]['value'])) {
    global $user;
    $type = "preferred_store";
    $snode = new stdClass();
    $snode->type = "preferred_store";
    $snode->title = "-superadmin";
    node_object_prepare($snode);
    $snode->uid = $user->uid;
    $snode->name = $user->name;
    $snode->status = 1;
    $snode->field_preferred_store_options['und'] = _get_all_stores_in_node_save_mode();
    $snode->field_preferred_store_status['und'] = _get_status_magasin_options_in_node_save_mode();
    @node_save($snode);
    $_SESSION['selected_store_preference_nid'] = $snode->nid;
    drupal_set_message(t("Stores are now attached to this content."));
  }
}

/**
 * Implemented hook_node_insert for setting Publication end date.
 */
function im_agenda_node_insert($node) {
  global $user;
  if ($node->type == "preferred_store") {
  	$snode->field_preferred_do_dr['und'][0]['value'] = $node->nid;
	  if (empty($_SESSION['selected_store_preference_nid'])) {
	  	$_SESSION['selected_store_preference_nid'] = $node->nid;
	  	$_SESSION['selected_store_preference_nid_ctools'] = $node->nid;
	  } 

		$selected_store_array = $node->field_preferred_store_options['und'];
		if (empty($selected_store)) {
		  $selected_store = '';
		}
		foreach ($selected_store_array as $key=>$store) {
	    if ($store['value']) {
	  	  $selected_store .= $store['value'] . ",";
	  	}
	  } 
	  $selected_store = trim($selected_store, ",");
	  $_SESSION['selected_store_list'] = $selected_store;
	  $_SESSION['selected_store_preference_nid'] = $node->nid;
	  if (arg(4) == "user_store_preference_form" || arg(0) == "user_store_preference_form") {
		  $userProfile = user_load($user->uid);
		  $userProfile->field_user_store_nid[LANGUAGE_NONE][0]['value'] = $node->nid;
		  $userProfile->field_user_store_nid[LANGUAGE_NONE][0]['safe_value'] = $node->nid;
		  $userProfile->field_user_stores[LANGUAGE_NONE][0]['value'] = $selected_store;
		  $userProfile->field_user_forecast[LANGUAGE_NONE][0]['value'] = $node->field_preferred_store_choice['und'][0]['value'];
		  $userProfile->field_user_stores[LANGUAGE_NONE][0]['safe_value'] = $selected_store;
		  $userProfile->field_user_forecast[LANGUAGE_NONE][0]['safe_value'] = $node->field_preferred_store_choice['und'][0]['value'];
		  user_save($userProfile);
//		  drupal_set_message(t("Saved the selected stores"));
	  }
	  /*If the user store preferred form is accessed from the User dashboard page: To add a Regional role to user- Save the regional Nid and stores attach the stores to the user*/ 
      if (arg(4) == "add-regional-user-dashboard") {
      	if (is_numeric(arg(5))) {
      		$userId = arg(5);
      		$_SESSION["dashboard_regional_users"][$userId]['regional_nid'] = $node->nid;
      		$_SESSION["dashboard_regional_users"][$userId]['regional_stores'] = $selected_store;      		
      	}      	
      }
  }    
   
  if ($node->type == 'action' || $node->type == 'news' || $node->type == 'alert' || $node->type == 'benchmark') {
    if (!empty($_SESSION['selected_store_preference_nid'])) {
    	$tmp_store_node = node_load($_SESSION['selected_store_preference_nid']);
      $tmp_selected_store_options_array = $tmp_store_node->field_preferred_store_options['und'];
      $tmp_selected_store_option = '';
      foreach($tmp_selected_store_options_array as $key => $tmp_selected_store_options) {
        $tmp_selected_store_option .= $tmp_selected_store_options['value'] . ',';
      }
      $tmp_selected_store_option = trim($tmp_selected_store_option, ',');
      $node->field_agenda_store['und'][0]['value'] = $tmp_selected_store_option;
      $node->field_agenda_store['und'][0]['safe_value'] = $tmp_selected_store_option;
      
      //$node->field_agenda_store['und'][0]['value'] = $_SESSION['selected_store_list'];
      $node->field_agenda_preference_nid['und'][0]['value'] = $_SESSION['selected_store_preference_nid'];
      //$node->field_agenda_store['und'][0]['safe_value'] = $_SESSION['selected_store_list'];
      $node->field_agenda_preference_nid['und'][0]['safe_value'] = $_SESSION['selected_store_preference_nid'];
    }
    //Duplication of Regional Action content setting up the selected store value. 
    if (isset($_SESSION['selected_store_list_regional'])) { 
    	$selected_stores_array = array();
      $nodeobj = node_load($_SESSION['selected_store_preference_nid']);
    	$nodeobj->field_preferred_store_options['und'] = array();
      $selected_stores = $_SESSION['selected_store_list_regional'];
      foreach ($selected_stores as $selected_store) {
        $selected_stores_array[]['value'] = $selected_store;
      }
      $nodeobj->field_preferred_store_options['und'] = $selected_stores_array;
      node_save($nodeobj);
      if(!empty($_SESSION['selected_store_preference_nid'])){
	      $tmp_store_node = node_load($_SESSION['selected_store_preference_nid']);
	      $tmp_selected_store_options_array = $tmp_store_node->field_preferred_store_options['und'];
	      $tmp_selected_store_option = '';
	      foreach($tmp_selected_store_options_array as $key => $tmp_selected_store_options) {
	        $tmp_selected_store_option .= $tmp_selected_store_options['value'] . ',';
	      }
	      $tmp_selected_store_option = trim($tmp_selected_store_option, ',');
	      $node->field_agenda_store['und'][0]['value'] = $tmp_selected_store_option;
	      $node->field_agenda_store['und'][0]['safe_value'] = $tmp_selected_store_option;
      }
      
      //$node->field_agenda_store['und'] = $selected_stores_array;
    }
    /*$agenda_to_date_n_value = variable_get('action_publication_todate_nvalue','18');
    $publication_to_date = date('Y-m-d',strtotime('+'.$agenda_to_date_n_value.' month',strtotime($node->field_publication_from_date['und'][0]['value'])));*/
    $node->unpublish_on = strtotime($node->field_publication_to_date['und'][0]['value']);
    unset($_SESSION['selected_store_preference_nid']);    
    unset($_SESSION['selected_store_mandatory']);
    
  }
  if($node->type == 'operational_model'){
  	$node->unpublish_on = strtotime($node->field_om_publication_period['und'][0]['value2']);
  }
  unset($_SESSION['selected_store_preference_nid_ctools']);
}
  
/**
 * Implementation of hook_node_presave().
 * Update Unpublish duration based on Publication start date.
 * 
 */
function im_agenda_node_presave($node) {
  global $user; 
  if ($node->type == "preferred_store") {
  	$userProfile = user_load($user->uid);
		$selected_store_array = $node->field_preferred_store_options['und'];
		if (empty($selected_store)) {
		  $selected_store = '';
		  unset($_SESSION['selected_store_list']);
		  unset($_SESSION['selected_store_mandatory']);
		  //unset($_SESSION['selected_store_preference_nid']);
		}
		if (!empty($selected_store_array )) {
		  foreach ($selected_store_array as $key=>$store) {
	        if ($store['value']) {
	          $selected_store .= $store['value'] . ",";
	  	    }
	    } 
		}
	  $selected_store = trim($selected_store, ",");
	  $_SESSION['selected_store_list'] = $selected_store;
	  $_SESSION['selected_store_mandatory'] = $selected_store;
	  //if (isset($node->nid)) {
	   $_SESSION['selected_store_preference_nid'] = $node->nid;
	   $_SESSION['selected_store_preference_nid_ctools'] = $node->nid;
	  //}
	  if (arg(4) == "user_store_preference_form" || arg(0) == "user_store_preference_form") {
		  $userProfile->field_user_store_nid[LANGUAGE_NONE][0]['value'] = $node->nid;
		  $userProfile->field_user_store_nid[LANGUAGE_NONE][0]['safe_value'] = $node->nid;
		  $userProfile->field_user_stores[LANGUAGE_NONE][0]['value'] = $selected_store;
		  $userProfile->field_user_forecast[LANGUAGE_NONE][0]['value'] = $node->field_preferred_store_choice['und'][0]['value'];
		  $userProfile->field_user_stores[LANGUAGE_NONE][0]['safe_value'] = $selected_store;
		  $userProfile->field_user_forecast[LANGUAGE_NONE][0]['safe_value'] = $node->field_preferred_store_choice['und'][0]['value'];
		  user_save($userProfile);
//		  drupal_set_message(t("Saved the selected stores"));
	  } 
    } 
  if ($node->type == 'action' || $node->type == 'news' || $node->type == 'alert' || $node->type == 'benchmark') {
    if (!empty($_SESSION['selected_store_preference_nid'])) {
      $tmp_store_node = node_load($_SESSION['selected_store_preference_nid']);
      $tmp_selected_store_options_array = $tmp_store_node->field_preferred_store_options['und'];
      $tmp_selected_store_option = '';
      foreach($tmp_selected_store_options_array as $key => $tmp_selected_store_options) {
        $tmp_selected_store_option .= $tmp_selected_store_options['value'] . ',';
      }
      $tmp_selected_store_option = trim($tmp_selected_store_option, ',');
      $node->field_agenda_store['und'][0]['value'] = $tmp_selected_store_option;
      $node->field_agenda_store['und'][0]['safe_value'] = $tmp_selected_store_option;
      //$node->field_agenda_store['und'][0]['value'] = $_SESSION['selected_store_list'];
      $node->field_agenda_preference_nid['und'][0]['value'] = $_SESSION['selected_store_preference_nid'];
      $node->field_agenda_preference_nid['und'][0]['safe_value'] = $_SESSION['selected_store_preference_nid'];
    }
    //Uncommented below code due to UATIM-646
    else{
    	$tmp_store_node = node_load($node->field_agenda_preference_nid['und'][0]['value']);
	    $tmp_selected_store_options_array = $tmp_store_node->field_preferred_store_options['und'];
	    if(isset($tmp_selected_store_options_array)){
	    	    $tmp_selected_store_option = '';
	    foreach($tmp_selected_store_options_array as $key => $tmp_selected_store_options) {
	    	$tmp_selected_store_option .= $tmp_selected_store_options['value'] . ',';
	    }
	    $tmp_selected_store_option = trim($tmp_selected_store_option, ',');
	    $node->field_agenda_store['und'][0]['value'] = $tmp_selected_store_option;
	    $node->field_agenda_store['und'][0]['safe_value'] = $tmp_selected_store_option;
	    }
	    //$node->field_agenda_store['und'][0]['value'] = $_SESSION['selected_store_list'];
	    $node->field_agenda_preference_nid['und'][0]['value'] = $node->field_agenda_preference_nid['und'][0]['value'];
	    $node->field_agenda_preference_nid['und'][0]['safe_value'] = $node->field_agenda_preference_nid['und'][0]['value'];
    }
    //UATIM-519,FATIM-581 and FATIM-582 fixes. During node update of the regional action node.if $_SESSION['selected_store_preference_nid'] is empty new node is created,(create new regional action ->save as draft-> save and prepare for regional moderation)
     if(empty($_SESSION['selected_store_preference_nid']) && $node->type == 'action' && $node->field_action_scope_of_content['und'][0]['value'] == 'regional' && !isset($node->nid)) {
        $type = "preferred_store";
        $new_node = new stdClass();
        $new_node->type = "preferred_store";
        $new_node->title = "-superadmin";
        node_object_prepare($new_node);
        $new_node->uid = $user->uid;
        $new_node->name = $user->name;
        $new_node->status = 1;
        $new_node->field_preferred_store_options['und'] = _get_all_stores_in_node_save_mode();
        $new_node->field_preferred_store_status['und'] = _get_status_magasin_options_in_node_save_mode();
        @node_save($new_node);
        $_SESSION['selected_store_preference_nid'] = $new_node->nid;
      }
    /*$agenda_to_date_n_value = variable_get('action_publication_todate_nvalue','18');
    $publication_to_date = date('Y-m-d',strtotime('+'.$agenda_to_date_n_value.' month',strtotime($node->field_publication_from_date['und'][0]['value'])));    
    $node->field_publication_to_date['und'][0]['value'] = $publication_to_date;*/
    $node->unpublish_on = strtotime($node->field_publication_to_date['und'][0]['value']);
  }
  if ($node->type == 'news' || $node->type == 'alert') {
      unset($_SESSION['search_store']['usp_store_status']);
      unset($_SESSION['search_store']['usp_drcf']);
      unset($_SESSION['search_store']['usp_autocomplete_value_text']);
  }
  if($node->type == 'operational_model'){
  	/*$n_value = variable_get('im_admin_n');
  	$publication_period_value2 = date('Y-m-d H:i:s',strtotime('+'.$n_value.' month',strtotime($node->field_om_publication_period['und'][0]['value'])));
  	$node->field_om_publication_period['und'][0]['value2'] = $publication_period_value2;*/
  	$node->unpublish_on = strtotime($node->field_om_publication_period['und'][0]['value2']);
  }
}

/**
 * Implementation of hook_node_update().
 * Update Unpublish duration based on Publication start date.
 * 
 */
function im_agenda_node_update($node){
  if ($node->type == "preferred_store") {
  $selected_store_array = $node->field_preferred_store_options['und'];
  if (empty($selected_store)) {
    $selected_store = '';
    unset($_SESSION['selected_store_list']);
    //unset($_SESSION['selected_store_preference_nid']);
  }
  foreach ($selected_store_array as $key=>$store) {
    if ($store['value']) {
        $selected_store .= $store['value'] . ",";
      }
    }
    $selected_store = trim($selected_store, ",");
    $_SESSION['selected_store_list'] = $selected_store;
    $_SESSION['selected_store_preference_nid'] = $node->nid;
  }
  if ($node->type == 'action' || $node->type == 'news' || $node->type == 'alert') {
    if (!empty($_SESSION['selected_store_preference_nid'])) {
      //$node->field_agenda_store['und'][0]['value'] = $_SESSION['selected_store_list'];
      $node->field_agenda_preference_nid['und'][0]['value'] = $_SESSION['selected_store_preference_nid'];
      unset($_SESSION['selected_store_mandatory']);
    }
  }
  unset($_SESSION['selected_store_preference_nid_ctools']);
  unset($_SESSION['selected_store_preference_nid']);
  
}


/**
 * Implemented hook_form for changing user from webservice result. 
 */
function _action_search_user_popup_form($form, &$form_state) {
	drupal_add_css(drupal_get_path('theme', 'im') . '/css/styles_im.css');
  $form['search_user']['user_first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#attributes' => array('id' => 'user-first-name'),
    '#default_value' =>$_SESSION['search_user']['user_first_name'],
 		'#prefix' => '<div id="change-user-form-sec">',
  
  );
  $form['search_user']['user_last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#default_value' =>$_SESSION['search_user']['user_last_name'],
    '#attributes' => array('id' => 'user-last-name'),
  );
  $form['search_user']['user_serach'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array('id' => 'seachuser'), 
  	'#prefix' => '<div class="change-user-form-buttons">',
  );
  $form['search_user']['user_reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
    '#attributes' => array('id' => 'reset-user-form'),
  );
  $form['search_user']['user_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('id' => 'cancel-user-form'),
  	'#suffix' => '</div></div>',
  );
  $header= array(
    'full_name' => array('data' => t('Full Name')),
  );
  $options = array();
  $user_list = '';
  $user_list = _action_retrieve_user();
  $options = array();
  if (!empty($user_list)) {
  foreach ($user_list as $key=>$value) {
   $options[$value] = array('full_name' => $value);
  }  
  }
  $form['user_results'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#multiple' => FALSE,
    '#empty' => t('No User available.'),
    '#prefix' => '<div id="change-user-form-results">',
    '#suffix' => '</div>',
  );
  $form['add_to_source'] = array(
    '#type' => 'submit',
    '#value' => t('Add to source'),
    '#attributes' => array('id' => 'add-user-to-form'),
    '#prefix' => '<div class="change-user-form-results-buttons">',
    '#suffix' => '</div>',
    '#weight' => 10,
  );
  $form['pager'] = array('#markup' => theme('pager'));
  unset($_SESSION['search_user']['user_first_name']);
  unset($_SESSION['search_user']['user_last_name']);
  return $form;
}
/**
 * Implemented hook_form_submit for changing user from webservice result. 
 */
function _action_search_user_popup_form_validate($form, &$form_state) {
  if (empty($form_state['values']['user_first_name']) && empty($form_state['values']['user_last_name'])) {
      form_set_error(' ', "Please enter the value for any one of the field.");
    }
  }

/**
 * Implemented hook_form_submit for changing user from webservice result. 
 */
function _action_search_user_popup_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['user_first_name'])) {
    $_SESSION['search_user']['user_first_name'] = $form_state['values']['user_first_name'];  
  }
  if (!empty($form_state['values']['user_last_name'])) {
    $_SESSION['search_user']['user_last_name'] = $form_state['values']['user_last_name'];  
  }
  $form_state['values']['user_first_name'] = $_SESSION['search_user']['user_first_name'];
  $form_state['values']['user_last_name'] = $_SESSION['search_user']['user_last_name'];
  $form['field_agenda_source']['und'][0]['value'] = array($form_state['values']['user_results']);
  }

/**
 * Implemented function for searching user from webservice. 
 */
function _action_retrieve_user() {
  if (isset($_SESSION['ldap_login_key'])) {
  $login_key = $_SESSION['ldap_login_key'];
  }
  $firstname = null;
  $lastname = null;
  $userlist = '';
  if (!empty($_SESSION['search_user']['user_first_name'])) {
  $firstname = $_SESSION['search_user']['user_first_name'] . '*';
  }
  if (!empty($_SESSION['search_user']['user_last_name'])) {
  $lastname = $_SESSION['search_user']['user_last_name'] . '*';
  }
  if (isset($login_key) && $firstname != ''  && $lastname != '') {
  $searchvalues = array('id' => $login_key, 'login' => '*', 
  'attributsType' => array('givenName', 'sn', 'inetUserStatus'), 'attributsValue' => array($firstname, $lastname, 'active'));
  }
  elseif(isset($login_key) && $firstname != '' && $lastname == '') {
    $searchvalues = array('id' => $login_key, 'login' => '*', 
    'attributsType' => array('givenName', 'inetUserStatus'), 'attributsValue' => array($firstname, 'active'));
  }
  elseif(isset($login_key) && $firstname == ''  && $lastname == '') {
    $searchvalues = array('id' => $login_key, 'login' => '*', 
    'attributsType' => array('givenName', 'sn', 'inetUserStatus'), 'attributsValue' => array($firstname, $lastname, 'active'));
  }
  if (isset($login_key)) {
    $obj = new imldapSoapService();   
    $userlist = $obj->soapRequest('searchUsers', $searchvalues);   
  }
  
  
  if (isset($login_key)) {
  $userrequest = array('id' => $login_key, 'attributsType' => 'cn', 'pad' => '',  
  'logins' => $userlist->data);
  }

  if (isset($userlist->status) && $userlist->status == "success") {
    $obj = new imldapSoapService();   
    $finaluserlist = $obj->soapRequest('getUsersAttribut', $userrequest);   
  }

  unset($_SESSION['search_user']['user_first_name']);
  unset($_SESSION['search_user']['user_last_name']);
  $result_users = array();
  
  
  
  if (isset($userlist->data) && sizeof($userlist->data) > 1) {
    for ($i = 0; $i<sizeof($userlist->data); $i++) {
      if (!empty($userlist->data[$i])) {
        $result_users[] = $finaluserlist->data[$i] . '(' . $userlist->data[$i] . ')';
      }
    }
  }
 //if the result contains only one name.
  elseif(!empty($userlist->data) && sizeof($userlist->data) == 1) {
    $result_users[] = $finaluserlist->data . '(' . $userlist->data . ')';
  }
  
  if (isset($result_users)) {  	  
  return $result_users;
  }
}

/**
 * Implemented the function for menu callback popup. 
 */
function _action_search_user_popup($js = NULL) {
    $form = array();
    $form_state = array();
    $first_form = drupal_get_form('_action_search_user_popup_form');
    $form_str = drupal_render($first_form);
  if (!$js) {
    return $form_str;
  }
    // Fall back if $js is not set.
  if ($js) {
      ctools_include('modal');
      ctools_include('ajax');
        $form_state = array(
          'title' => t(''),
          'ajax' => TRUE,
      );
      $content = $form_str;
      $output[] = ctools_modal_command_display(t('Search User'), $content);       
  } 
  print ajax_render($output);
}

function im_feature_agenda_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  drupal_add_css('#taxonomy-form-term .form-item-path-alias {display:none;}',$option['type'] = 'inline');
  $form['description']['#access'] = FALSE;
  $form['field_taxo_relais_en_magasin'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'relaisautocomplete';

}

function _relais_item_autocompletes($string) {
  $matches = array();
  $option_type =array();
  $query = db_select('store_item_fields_desc', 'p');
  $return = $query
    ->fields('p', array('dit_lib','ddo_lib','dsd_lib','dit_idt_type'))
    ->condition('p.dit_lib', '%' . db_like($string) . '%', 'LIKE')
    ->condition('p.ddo_lib', 'Contacts', '=')
    ->range(0, 10)
    ->execute();
  foreach ($return as $row) {
    $matches[$row->dit_lib] = check_plain($row->ddo_lib) . '>' . check_plain($row->dsd_lib) . '>'. check_plain($row->dit_lib);
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_node_access().
 */
/*function im_agenda_node_access($node, $op, $account) {
  global $user;
  if (in_array('content_manager_action', array_values($user->roles))) {
    if ($node->field_published[LANGUAGE_NONE][0]['value'] == 1) {
      if ($node->type == 'action' || $node->type == 'news' || $node->type == 'alert') {
        if ($op == 'delete' || $op == 'update') {
           return NODE_ACCESS_DENY; 
        }        
      }
    }
  }
}*/

// IM-13 : Action: Return the Publication
function im_agenda_draft_popup($js = NULL){
  if (!$js) {
    return drupal_get_form('im_agenda_change_to_draft_form');
  }
   if ($js) {
      ctools_include('modal');
      ctools_include('ajax');
      ctools_add_js('ajax-responder');
      $form_state = array(
        'title' => t(''),
        'ajax' => TRUE,
      );
      $output = array();
      $output = ctools_modal_form_wrapper('im_agenda_change_to_draft_form', $form_state);
      if ($output['comment_draft']['#value']) {
        $output[] = ctools_modal_command_dismiss();
        $output[] = ctools_ajax_command_reload();
      }
    }
    print ajax_render($output);
   exit;
}

/**
 * IM-13 : Action: Return the Publication
 * Used to update the node revision from Need review mode to Draft mode.
 */
function im_agenda_change_to_draft_form() {
  $form['comment_draft'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
    '#required' => TRUE,
  );
  $form['Return Publication'] = array(
    '#type' => 'submit',
    '#value' => t('Return Publication'),
  );
  $form['draft_cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#markup' => '<div id="cancel">' . t('Cancel') . '</div>',
    '#attributes' => array('class' => 'ctools-close-modal'),
  );
  return $form;
}
/**
 * Update the node revision value from Need review mode to Draft mode.
 * IM-13 : Action: Return the Publication
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function im_agenda_change_to_draft_form_submit($form, &$form_state) {
  global $user;
  $nid = arg(4);
  $node = node_load($nid);
  $node->revision = 1;
  $node->log = $form_state['values']['comment_draft'];
  $node->field_draft_status['und'][0]['value'] = 1;
  node_save($node);
  //Send rejection email to the content owner
  im_agenda_reject_mail($nid);
  drupal_set_message(t("Node change to Draft status with the comment"));
}

/**
 * Update the views result
 * IM-13 : Action: Return the Publication
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function im_agenda_form_views_form_workbench_moderation_needs_review_page_alter(&$form, &$form_state, $form_id) {
  im_feature_agenda_ctools_popup_settings();
  $output_final = '';
  $output = $form['output']['#markup'];
  $output_array = explode('<li class="0 first">', $output);
  foreach ($output_array as $key=>$value) {
    if (substr(trim($value), 0, 2) == "<a") {
      $li = explode('<a href="', trim($value));
      $index = 0;
      if (!empty($li[0])) {
        $ctools_url = "admin/popup/nojs" . substr(trim($li[0]), 0, strpos(trim($li[0]), '/draft')) . "/draft";
        $li[0] = decode_entities(ctools_modal_text_button(t('Return the Publication'), $ctools_url, t('Change to Draft'),  'ctools-modal-ctools-sample-style'));
        $index = 0;
      }
      else {
        $ctools_url = "admin/popup/nojs" . substr(trim($li[1]), 0, strpos(trim($li[1]), '/draft')) . "/draft";
        $li[1] = decode_entities(ctools_modal_text_button(t('Return the Publication'), $ctools_url, t('Change to Draft'),  'ctools-modal-ctools-sample-style'));
        $index = 1;
      }
      $li = implode('<br \><a href="', $li);
      $li = str_replace('<a href="<a href="', '<a href="', $li);
      $output_array[$key] = $li;
    }
  }
  $output_array = implode('<li class="0 first">', $output_array);
  $form['output']['#markup'] = $output_array;
  return $form;
}

/**
 * Implements hook_permission().
 */
function im_agenda_permission(){
	return array(
		'publish now' => array(
      		'title' => t('Save content and publish now'),
      		'description' => t('Allows a user to save their content and publish it now.'),
    	),
    	'ask for publication' => array(
    		'title' => t('Save content and ask for publication'),
    		'description' => t('Allows a user to save their content and ask for publication.'),
    	),
   		'return publication' => array(
    		'title' => t('Return the publication'),
    		'description' => t('Allows the user to return the content to the contributor'),
    	),
    	'archive' => array(
    		'title' => t('Archive the published contents'),
    		'description' => t('Allows the user to archive the published contents.'),
    	),
    	'save draft' => array(
      		'title' => t('Save content as draft'),
      		'description' => t('Allows a user to save a draft of their content.'),
    	),
    	'publish' => array(
      		'title' => t('Save content and publish'),
      		'description' => t('Allows a user to save their content and publish'),
    	),
	);	
}

/**
 * Handles publish now form submission
 */
function publish_now_submit($form, &$form_state) {	
	if($form_state['clicked_button']['#value'] == $form_state['values']['publish_now']){
		$form_state['values']['field_node_archive']['und'][0]['value'] = 0;
		//Update publication start date to current date
		$publication_start_date = date("Y-m-d", time());
		
		if($form['type']['#value'] == 'operational_model'){
	      form_set_value($form['field_om_publication_period']['und'][0]['value'],$publication_start_date,$form_state);
	  	}
	  	else{
	    	form_set_value($form['field_publication_from_date']['und'][0]['value'],$publication_start_date,$form_state);
	  	}
		//Update the Moderator status to Published
		$state['to_state'] = "published";
    	$form_state['values']['workbench_moderation_state_new'] = $state['to_state'];
        $form_state['values']['field_draft_status']['und'][0]['value'] = 0;
        $form_state['values']['status'] = 1;
		node_form_submit($form, $form_state);
	}
}

/**
 * Handles ask for publication form submission
 */
function ask_for_publication_submit($form, &$form_state) {
	if($form_state['clicked_button']['#value'] == $form_state['values']['ask_for_publication']){
		$form_state['values']['field_node_archive']['und'][0]['value'] = 0;		
		//Update the Moderator status to Needs Review
		$state['to_state'] = "needs_review";
		$form_state['values']['workbench_moderation_state_new'] = $state['to_state'];
		$form_state['values']['field_draft_status']['und'][0]['value'] = 0;
        node_form_submit($form, $form_state);
	}
}
/**
 * Handles archive the published content
*/
function archive_submit($form, &$form_state) {
	if($form_state['clicked_button']['#value'] == $form_state['values']['archive']){
		global $language;		
		global $user;
		$field_list_set = field_read_fields(array('bundle' => $form_state['values']['type']));
		$field_list = array_keys($field_list_set);
		$node = new stdClass();
		$node->type = $form_state['values']['type'];
		node_object_prepare($node);
		$node->language =  $language->language;
		foreach ($field_list_set as $key=>$field) {			
			if (in_array($key, $field_list)) {
				if (isset($form_state['values'][$key])) {
					//If field type is image/file
					if ($field['type'] == 'image' || $field['type'] == 'file') {						
						foreach ($form_state['values'][$key]['und'] as $fkey=>$fvalue) {
							//If file attachment fid value is 0 unset that attachment
							if ($fvalue['fid'] == 0) {
								unset($form_state['values'][$key]['und'][$fkey]);
							}
						}
						$node->$key = $form_state['values'][$key];
					}
					else {
						$taxonomy_flags = array_keys($form_state['values'][$key]['und'][0]);
						if ($taxonomy_flags[0] == "tid") {
							if (!empty($form_state['values'][$key]['und'][0]['tid'])) {
								$node->$key = $form_state['values'][$key];
							}else{
								$node->$field['field_name'] = array("und"=>array());
							}
						}
						else {
							$node->$key = $form_state['values'][$key];
						}
					}
				}
			}
		}
		$node->title = $form_state['values']['title'];
		$node->status = 0;
		$node->uid = $form_state['values']['uid'];
		$node->revision_uid = $user->uid;
		$node->nid = $form_state['values']['nid'];
		$node->vid = $form_state['values']['vid'];
		if ($form_state['values']['type'] == "operational_model") {
			$node->field_om_domain['und'][0]['tid'] = $form_state['values']['field_om_domain_custom'];
			$node->field_om_subdomain['und'][0]['tid'] = $form_state['values']['field_om_subdomain_custom'];
			$node->field_om_macro_activity['und'][0]['tid'] = $form_state['values']['field_om_macro_activity_custom'];
		}
		$node->field_node_archive['und'][0]['value'] = 1;
		$node->log = "Updated by " . $user->name . ".";
		_im_search_delete_file_index($node->nid,$node->type);
		node_save($node);
		drupal_goto('admin/workbench');
	}
}

/**
 * Handles save as draft of content
*/
function save_as_draft_submit($form, &$form_state) {
	if($form_state['clicked_button']['#value'] == $form_state['values']['save_draft']){
		$form_state['values']['field_node_archive']['und'][0]['value'] = 0;
		$form_state['values']['status'] = 0;
		$form_state['values']['field_draft_status']['und'][0]['value'] = 1;
		node_form_submit($form, $form_state);
	}
}

/**
 * Handles publish of content
*/
function publish_submit($form, &$form_state) {
	if($form_state['clicked_button']['#value'] == $form_state['values']['publish']){
		$form_state['values']['field_node_archive']['und'][0]['value'] = 0;
		$form_state['values']['status'] = 1;
		$form_state['values']['field_draft_status']['und'][0]['value'] = 0;
		if($form['type']['#value'] == "action" || $form['type']['#value'] == "operational_model"){			
			//Update the Moderator status to Published
			$state['to_state'] = "published";
			$form_state['values']['workbench_moderation_state_new'] = $state['to_state'];
			node_form_submit($form, $form_state);
			if(!empty($form_state['values']['field_parent_nid']['und'][0]['value'])){
			 	_im_features_om_archive_parent_node($form_state['values']['field_parent_nid']['und'][0]['value']);				
			}
		}else{
			node_form_submit($form, $form_state);
		}
	}
}


/**
 * Implenmentation of hook_preprocess_view_view
 * 
 */

function im_agenda_preprocess_views_view(&$vars) {
  global $base_path;  
  $view = $vars['view'];
  if($view->name == 'news_benchmark' && $view->current_display == 'block_2') {
  	//Unset the session for the agenda detail page
    unset($_SESSION["agenda_detail"]);  	
    $vars['news_bencchmark_details'] = _im_news_benchmark_build_day_view($vars, $view);
    $vars['theme_hook_suggestion'] = '';
    $vars['theme_hook_suggestions'][] = 'node__' . 'news_benchmark_day_view';
  }  
}

/**
 * Implementation of _im_news_benchmark_build_day_view 
 */
function _im_news_benchmark_build_day_view($vars, $view_obj) {
  $agenda_new_benchmark_res = array();
  im_feature_agenda_ctools_popup_settings();    
  $nid = 0;    
  foreach($view_obj->result as $key=>$value) {
    if($nid != $value->nid)  {
      $nid = $value->nid;       
      if(!empty($value->node_title)) {     
       $agenda_new_benchmark_res[$value->node_type][$key]['title'] = ctools_modal_text_button($value->node_title, 'agenda-detail/day/nojs/'. $value->nid, '', 'ctools-modal-ctools-sample-style');
      }
      if(!empty($value->_field_data['nid']['entity']->body['und'][0]['safe_value'])) {
        $body_str = $value->_field_data['nid']['entity']->body['und'][0]['safe_value'];        
        
        /*if(strlen($body_str) > 100) {
        	$body_str = substr($body_str, 0, 100) . '...';
        }
        else {
        	$body_str = $body_str;
        }*/
        $body_str = $body_str;
        $agenda_new_benchmark_res[$value->node_type][$key]['body'] =  $body_str;
      }
     
      if(!empty($value->_field_data['nid']['entity']->field_agenda_attachments)) {
      	
      	if(isset($value->_field_data['nid']['entity']->field_agenda_attachments['und'])) {
      		$count = count($value->_field_data['nid']['entity']->field_agenda_attachments['und']);
      	}
      	else {
      		$count = $value->_field_data['nid']['entity']->field_agenda_attachments['und'];
      	}
      	
        $agenda_new_benchmark_res[$value->node_type][$key]['attachment'] = '';
        for($i= 0; $i <= $count; $i++){
          if(isset($value->_field_data['nid']['entity']->field_agenda_attachments['und'][$i]['uri'])) {
           $filepath = urldecode(file_create_url($value->_field_data['nid']['entity']->field_agenda_attachments['und'][$i]['uri']));
          }
          if(isset($value->_field_data['nid']['entity']->field_agenda_attachments['und'][$i]['filename'])) {
           $agenda_new_benchmark_res[$value->node_type][$key]['attachment'] .=  l(t($value->_field_data['nid']['entity']->field_agenda_attachments['und'][$i]['filename']), $filepath,  array('attributes' => array('target'=>'_blank'))).'<br />';
          }
        }       
      }
    }            
  }    
 return $agenda_new_benchmark_res;
}

/**
 * 
 * Implementation of hook_FormID_alter of user_admin_settings
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function im_agenda_form_user_admin_settings_alter(&$form, $form_state, $form_id) {
	$form['action_mail'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Action needs review mail'),   
    '#description' => t('Send email to content managers of action content type once day.'),
    '#group' => 'email',  
  );
  $form['action_mail']['action_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),    
    '#group' => 'email',
    '#default_value' => variable_get('action_mail_subject', FALSE),
  );  
  $form['action_mail']['action_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#group' => 'email',
    '#rows' => 15,
    '#default_value' => variable_get('action_mail_body', FALSE),
  ); 
  $form['action_mail_reject'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Action needs review reject mail'),   
    '#description' => t('Send email to contributer of action content type once content is rejected by content managers.'),
    '#group' => 'email',  
  );
  $form['action_mail_reject']['action_mail_reject_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),    
    '#group' => 'email',
    '#default_value' => variable_get('action_mail_reject_subject', FALSE),
  );  
  $form['action_mail_reject']['action_mail_reject_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),        
    '#group' => 'email',
    '#rows' => 15,
    '#default_value' => variable_get('action_mail_reject_body', FALSE),
  );
  
  //Regional action Duplication mail
  $form['action_mail_regional_duplicaiton'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Action Regional content Duplication mail'),   
    '#description' => t('Send email to content managers action Regional of action content type once day.'),
    '#group' => 'email',  
  );
  $form['action_mail_regional_duplicaiton']['action_regional_mail_duplication_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#group' => 'email',
    '#default_value' => variable_get('action_regional_mail_duplication_subject', FALSE),
  );  
  $form['action_mail_regional_duplicaiton']['action_regional_mail_duplication_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#group' => 'email',
    '#rows' => 15,
    '#default_value' => variable_get('action_regional_mail_duplication_body', FALSE),
  );

  return $form;
}
function im_agenda_token_info() {
	$info['tokens']['content']['list'] = array(
    'name' => t('Content'),
    'description' => t('List of nodes'),
  );
  $info['tokens']['content']['title'] = array(
    'name' => t('Content title'),
    'description' => t('Title of the current node'),
  );
  $info['tokens']['content']['comment'] = array(
    'name' => t('Content'),
    'description' => t('Comments added to the current node'),
  );
  return $info;
}

function im_agenda_mail($key, &$message, $params){
	$language = $message['language'];
  $variables = array('user' => $params['account'], 'list' => $params['list'], 'title' => $params['title'], 'comment' => $params['comment'],'nid' => $params['nid'],'createddate' => $params['node_date']);
  $message['subject'] .= im_agenda_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = im_agenda_mail_text($key . '_body', $language, $variables);
}
function im_agenda_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE){
  $langcode = isset($language) ? $language->language : NULL;
  if ($admin_setting = variable_get($key, FALSE)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
	  switch ($key) {
	  	case 'action_mail_subject':
	  	  $subject = variable_get('action_mail_subject', '');
	  	  $text = t($subject, array(), array('langcode' => $langcode));
	  	break;
	  	case 'action_mail_body':
	  		$body = variable_get('action_mail_body', '');
	  		$text = t($body, array(), array('langcode' => $langcode));
	  		break;
	  	case 'action_mail_reject_subject':
	  		$subject = variable_get('action_mail_reject_subject', '');
	      $text = t($subject, array(), array('langcode' => $langcode));
	  		break;
	  	case 'action_mail_reject_body':
	  	  $body = variable_get('action_mail_reject_body', '');
	      $text = t($body, array(), array('langcode' => $langcode));
	  		break;
	    case 'action_mail_duplication_subject':
        $subject = variable_get('action_regional_mail_duplication_subject', '');
        $text = t($subject, array(), array('langcode' => $langcode));
        break;
	  	case 'action_mail_duplication_body':
	      $body = variable_get('action_regional_mail_duplication_body', '');
	      $text = t($body, array(), array('langcode' => $langcode));
	      break;
	  }
  }
if ($replace) {
	
  // We do not sanitize the token replacement, since the output of this
  // replacement is intended for an e-mail message, not a web browser.
    return im_agenda_token_replace($text, $variables, array('language' => $language));
  }
  return $text;
}
function im_agenda_token_replace($replacements, $data, $options){	
  global $base_url;
  global $language; 
  //Replace [user:name] : UATIM-627    
//  $base = ($language->language) ? $base_url . '/' . $language->language : $base_url;  
  $replacements = token_replace($replacements, array('user' => $data['user']));
  $replacements = str_replace('[content:list]', $data['list'], $replacements);
  $replacements = str_replace('[content:title]', $data['title'], $replacements);
  $replacements = str_replace('[content:comment]', $data['comment'], $replacements);
  $replacements = str_replace('[node:nid]',$data['nid'], $replacements);
  $replacements = str_replace('[node-created]',$data['createddate'], $replacements);
  $replacements = str_replace('[user:name]',$data['user']->field_full_name['und'][0]['safe_value'], $replacements);
  $replacements = str_replace('[user:field_full_name]',$data['user']->field_full_name['und'][0]['safe_value'], $replacements);
  return $replacements;
}
/**
 * 
 * Function to send emails to all content managers of action content type.
 */

function im_agenda_review_email(){
  $user_ids;
  $node_ids;
  //Retrieve all action nodes with status 'Needs review'
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'action')
        ->propertyCondition('status', 0);
  $result = $query->execute();
  if($result){
    foreach ($result['node'] as $value){
      $node_details = node_load($value->nid);
      $node_ids[$value->nid] = $node_details->title;
      if($node_details){
        if($node_details->workbench_moderation['current']->state == 'needs_review'){
          if($node_details->uid){
            $user_details = user_load($node_details->uid);
            if($user_details){
              $user_ids[$node_details->uid] = $user_details;
            }
          }
        }
      }
    }
    //Get all content managers of 'Action' content type
    $uids = array();
    $users = array();
    $select_options = array();
    $role_obj = user_role_load_by_name('content_manager_action');
    if($role_obj){
      $result = db_select('users_roles', 'ur')
                    ->fields('ur')
                    ->condition('ur.rid', $role_obj->rid, '=')
                    ->execute();
      foreach ($result as $record) {
        $uids[] = $record->uid;
      };
    }
    if(!empty($uids)){
      //fetch user details of content managers
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
            ->propertyCondition('uid', $uids, 'IN');
      $entities = $query->execute();
      if (!empty($entities)) {
        $users = entity_load('user', array_keys($entities['user']));
      }
      $emailids = array();
      $i = 0;
      //send mail to each content manasgers
        foreach($users as $key=>$uvalue){
          $emailids[$key] = $uvalue->mail;
          $module = 'im_agenda';
          $key = 'action_mail';
          $language = language_default();
          $params = array();
          $from = variable_get('site_mail', ini_get('sendmail_from'));
          $send = TRUE;
          $email = $uvalue->mail;
          $params['account'] = $uvalue;
          
          $content_details = '';
          foreach($node_ids as $ukey=>$node_title){
             $content_details .= "\tAction \t".$node_title . "\t\n";
          }
          $params['list'] = $content_details;
          $params['title'] = '';
          $params['comment'] = '';
          $params['nid'] = '';
  		    $params['node_date'] = '';
          $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);
          $i++;
          if(!$message['result']){
             watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);
              drupal_set_message(t('Unable to send e-mail. Contact the site administrator if the problem persists.'), 'error');
          }
          else{
            drupal_set_message(t("Email send to content managers."));
          }
        }
    }
  }
  else{
    print t('No results found');
  }
}

function im_agenda_reject_mail($nodeid){
  $module = 'im_agenda';
  $key = 'action_mail_reject';
  $language = language_default();
  $params = array();
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $send = TRUE;
  
  $node_details = node_load($nodeid);
  $params['node'] = $node_details;
  $params['title'] = $node_details->title;
  if($node_details->log){
  	$params['comment'] = $node_details->log;
  }
  $params['nid'] = $nodeid;
  $params['node_date'] = date('d/m/Y', $node_details->created);
  $params['list'] = '';
  $user_details = user_load($node_details->uid);
  $params['account'] = $user_details;
  $email = $user_details->mail;
  $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);
   if(!$message['result']){
             watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);
              drupal_set_message(t('Unable to send e-mail. Contact the site administrator if the problem persists.'), 'error');
          }
          else{
            drupal_set_message(t("Email send to content creater."));
          }
}

function im_agenda_cron(){
  $cron_last = variable_get('cron_last');
  if( date('ymd', $cron_last) != date('ymd', time() ) ){
   im_agenda_review_email();
   variable_set('cron_last', date('ymd', time()));
  }
}

/**
 * To access manage/agenda page
 * 
 */
function _im_agenda_manage_user_access(){
	global $user;
		
	if(in_array('contributor_action',$user->roles) || in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles) || in_array('contributor_alert',$user->roles) || in_array('contributor_news',$user->roles) || in_array('contributor_benchmark',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || $user->uid == 1){
		return TRUE;
	}
}

/**
 * 
 * Enter description here ...
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function im_agenda_form_validate($form, &$form_state) {
	drupal_add_js(drupal_get_path('module', 'im_agenda') . '/js/im_agenda.js');
	drupal_add_js(drupal_get_path('module', 'im_agenda') . '/js/jquery.alerts.js');
	drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/im_agenda.css');
	drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/jquery.alerts.css');	
	//Questionnaire format
  global $user;
  if (module_exists('im_features_questionnaire')) {
    if ($form['type']['#value'] == 'action') {
      if (!empty($form_state['values']['field_action_webform_nid']['und'][0]['value'])) {
        if($form_state['values']['field_webform_display_type']['und'][0]['value'] == '') {
          form_set_error('field_webform_display_type', t('Please select the display format for questionnaire'));
        }
      }
    }
  }
    im_agenda_add_ctools();
	//Validate the Publication To Date should not be less than the Publication From Date
	if($form['type']['#value'] == 'action' || $form['type']['#value'] == 'alert' || $form['type']['#value'] == 'news' || $form['type']['#value'] == 'benchmark'){
		$node_flag = arg(1);
		$nid_edit = arg(2);		
		if(empty($_SESSION['selected_store_preference_nid']) && empty($form_state['node']->field_agenda_store['und'][0]['value']) && $node_flag == 'add'){
	    form_set_error('', t('Store Selection (Define the criteria of CONCERNED stores) button is mandatory.'));
		}
		if (empty($_SESSION['selected_store_mandatory']) && $nid_edit == 'edit' && is_numeric($node_flag)) {
			form_set_error('', t('Store Selection (Define the criteria of CONCERNED stores) button is mandatory.'));
		}
		$publication_from_date = strtotime($form_state['values']['field_publication_from_date']['und'][0]['value']);
		$publication_to_date   = strtotime($form_state['values']['field_publication_to_date']['und'][0]['value']);
		$agenda_date           = strtotime($form_state['values']['field_agenda_date']['und'][0]['value']);
		if($publication_to_date < $publication_from_date){
			form_set_error('Publication To date', t('Publication To Date should not be less than Publication From Date'));
		}
		if($agenda_date < $publication_from_date){
			form_set_error('Agenda date', t('Agenda date should be within publication period'));
		}
		if($agenda_date > $publication_to_date){
			form_set_error('Agenda date', t('Agenda date should be within publication period'));
		}
	}
	//Select Maximum 4 Experts	
	if($form['type']['#value'] == 'operational_model'){
		$selected_expert_count = count($form_state['values']['field_om_experts']['und']);
		if($selected_expert_count > 4){
			form_set_error('OM Experts selected', t('Please select maximum 4 Experts'));
		}
		// Assign OM publication ToDate 'N' value to variable for recalculate the Publication To Date when Publication From Date is changed
  		$om_to_date_n_value = variable_get('im_admin_n','12');
  		drupal_add_js(array('im_om_todate' => array('om_to_date' => $om_to_date_n_value)), 'setting');
	}
}

function _im_agenda_node_submit($form, &$form_state){
	if($form['type']['#value'] == 'action' || $form['type']['#value'] == 'operational_model'){
		global $language;		
		global $user;
		$field_list_set = field_read_fields(array('bundle' => $form_state['values']['type']));
		$field_list = array_keys($field_list_set);
		$node = new stdClass();
		$node->type = $form_state['values']['type'];
		node_object_prepare($node);
		$node->language =  $language->language;
		foreach ($field_list_set as $key=>$field) {			
			if (in_array($key, $field_list)) {
				if (isset($form_state['values'][$key])) {
					//If field type is image/file
					if ($field['type'] == 'image' || $field['type'] == 'file') {						
						foreach ($form_state['values'][$key]['und'] as $fkey=>$fvalue) {
							//If file attachment fid value is 0 unset that attachment
							if ($fvalue['fid'] == 0) {
								unset($form_state['values'][$key]['und'][$fkey]);
							}
						}
						$node->$key = $form_state['values'][$key];
					}
					else {
						$taxonomy_flags = array_keys($form_state['values'][$key]['und'][0]);
						if ($taxonomy_flags[0] == "tid") {
							if (!empty($form_state['values'][$key]['und'][0]['tid'])) {
								$node->$key = $form_state['values'][$key];
							}else{
								$node->$field['field_name'] = array("und"=>array());
							}
						}
						else {
							$node->$key = $form_state['values'][$key];
						}
					}
				}
			}
		}
		$node->title = $form_state['values']['title'];
		if($form_state['values']['workbench_moderation_state_current'] == 'published'){
			$node->status = 1;
		}else{
			$node->status = 0;
		}
		$node->uid = $form_state['values']['uid'];
		$node->revision_uid = $user->uid;
		$node->nid = $form_state['values']['nid'];
		$node->vid = $form_state['values']['vid'] + 1;
		if ($form_state['values']['type'] == "operational_model") {
			$node->field_om_domain['und'][0]['tid'] = $form_state['values']['field_om_domain_custom'];
			$node->field_om_subdomain['und'][0]['tid'] = $form_state['values']['field_om_subdomain_custom'];
			$node->field_om_macro_activity['und'][0]['tid'] = $form_state['values']['field_om_macro_activity_custom'];
		}
		$node->field_node_archive['und'][0]['value'] = $form_state['values']['field_node_archive']['und'][0]['value'];
		if($form_state['values']['workbench_moderation_state_current'] == 'draft'){
			$node->field_draft_status['und'][0]['value'] = 1;
		}else{
			$node->field_draft_status['und'][0]['value'] = 0;
		}
		$node->log = "Updated by " . $user->name . ".";
		node_save($node);
	
		$nid = $form['nid']['#value'];
		$node = node_load($nid);
		
		//Update the Moderator status to published
	    $state['to_state'] = $form_state['values']['workbench_moderation_state_current'];
	    $form_state['values']['workbench_moderation_state_new'] = $state['to_state'];
	    workbench_moderation_moderate($node, $form_state['values']['workbench_moderation_state_new']);
	}else{
		node_form_submit($form, $form_state);
	}
	if($form['type']['#value'] == 'action' || $form['type']['#value'] == 'operational_model'){
		if($form_state['values']['workbench_moderation_state_current'] == 'published'){
			drupal_goto('admin/workbench/published');
		}else if($form_state['values']['workbench_moderation_state_current'] == 'needs_review'){
			drupal_goto('admin/workbench/needs-review');
		}
	}
}


function im_agenda_views_pre_build(&$view){
	global $user;
	//Hide the Edit Link for the contributor role
	if($view->name == 'list_of_published_contents' || $view->name == 'archives'){
		if(!in_array('administrator',$user->roles) && !in_array('content_manager_action',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('content_manager_om',$user->roles) && !in_array('content_manager_action_regional',$user->roles)){
			unset($view->field['edit_node']);
			unset($view->display_handler->handlers['field']['edit_node']);
		}
	}
}
/**
 * 
 * Function to return the content for Agenda home page with Alert, action and info contents
 * @param $start_date : Start date of agenda
 * @param $end_date : End date of agenda
 * @param $agenda_store : User's selected store 
 * @param $user_department : User selected departement
 */
function _im_agenda_filter_content($start_date, $end_date, $agenda_store, $user_department) {
  global $user;
  $userstores = array();  
  if ($agenda_store  == "all") {
  $user_load = user_load($user->uid);
  if (!empty($user_load->field_user_stores['und'][0]['value'])) {    
    $userstores[] = $user_load->field_user_stores['und'][0]['value'];
    if (strstr($user_load->field_user_stores['und'][0]['value'],',')) {
      $userstoresarray = $user_load->field_user_stores['und'][0]['value'];
      $userstores = array();
      $userstores = explode(',',$userstoresarray);
      $userstoresarray = array();
    }
  }
  $user_selected_store = "";
  for ($i = 0; $i < count($userstores); $i++) {
    if ($i == (count($userstores) - 1)) {
      $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]';
     }
     else {
       $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]' . '|';
      }       
    }
  $agenda_store = $user_selected_store;
  }  
  $roles_flag = '';
  if (isset($_SESSION['ldap_user_role'])) {
    if ($_SESSION['ldap_user_role'] == "store_director") {
      $roles_flag = "'store_director', 'store_manager', 'store_employee'";
    }
    else if ($_SESSION['ldap_user_role'] == "store_manager") {
      $roles_flag = "'store_manager', 'store_employee'";
    }
    else if ($_SESSION['ldap_user_role'] == "store_employee") {
      $roles_flag = "'store_employee'";
    }
    else if ($_SESSION['ldap_user_role'] == "store_director_trainee") {
      $roles_flag = "'store_director', 'store_manager', 'store_employee'";
    }
    else if ($_SESSION['ldap_user_role'] == "store_manager_trainee") {
     $roles_flag = "'store_manager', 'store_employee'";
    }
   /* Provide DMD ROLE */
    if (isset($_SESSION['ldap_user_role_assigned']) && $_SESSION['ldap_user_role_assigned'] == 'store_director') {
      $roles_flag = "'store_director', 'store_manager', 'store_employee'";
    }
  }
  $agenda_day = date('Y-m-d');
  $role_join = '';
  $role_filter = '';
  $agenda_store_condition = '';
  $user_department_condition = '';
  $day_filter = " AND agenda_date.field_agenda_date_value <= '" . $start_date . "T00:00:00' AND agenda_date.field_agenda_date_value >= '" . $end_date . "T00:00:00'";     
  if(isset($_SESSION['ldap_user_role']) && ($_SESSION['ldap_user_role'] == 'store_employee' || $_SESSION['ldap_user_role'] == 'store_director' || $_SESSION['ldap_user_role'] == 'store_manager' || $_SESSION['ldap_user_role'] == 'store_director_trainee' || $_SESSION['ldap_user_role'] == 'store_manager_trainee')) {
    $role_join = ' INNER JOIN {field_data_field_agenda_concernees} aj_conc ON(n.nid=aj_conc.entity_id) ';
    $role_filter = " AND aj_conc.field_agenda_concernees_value IN(" . $roles_flag . ")";
  }
  if ($agenda_store) {
    $agenda_store_condition = " AND ag_store.field_agenda_store_value ~ '". $agenda_store ."'";
  }
  $department_exploded_array =array();
  if ($user_department && $user_department != "all") {
    $department = $user_department;
    if(strstr($department,",")){
      $department_exploded_array = explode("," ,$department);
      if (count($department_exploded_array)> 1){
        $user_department_condition = " AND deptmnt.field_agenda_department_tid IN (:depart_tid)";
      }
    }
    else{
        $user_department_condition = " AND deptmnt.field_agenda_department_tid = '" . $department . "'";
    }
    
  //$user_department_condition = " AND deptmnt.field_agenda_department_tid = '" . $user_department . "'";
  }
  $content_types = array('alert', 'action');
  $result = db_query("SELECT tab.nid as nid,
                              tab.title as title,
                              tab.type as type,
                              tab.created as created,
                              tab.body as body,
                              tab.status as status,
                              tab.tid,
                              tab.agenda_store as agenda_store,
                              tab.agenda_date as agenda_date,
                              tab.info,
                              tab.weight,
                              (SELECT COUNT(field_agenda_department_tid) as tid_count from {field_data_field_agenda_department} where entity_id = nid) as tid_count,
                              (SELECT MIN(taxonomy_term_data.weight) as tid_weight from taxonomy_term_data taxonomy_term_data ,field_data_field_agenda_department field_data_field_agenda_department   where taxonomy_term_data.tid = field_data_field_agenda_department.field_agenda_department_tid and field_data_field_agenda_department.entity_id=nid) as tid_weight,
                              tab.from,
                              tab.tod
                      FROM
                       (SELECT DISTINCT ON (n.nid) nid,
                             n.title, 
                 n.type as type, 
                 n.created as created,
                 body.body_value as body,
                 n.status status,
                 ag_store.field_agenda_store_value agenda_store,
                 agenda_date.field_agenda_date_value agenda_date,
                 inf.field_agenda_info_value as info,
                 deptmnt.field_agenda_department_tid as tid,
                 term.weight as weight,
                 publ_from.field_publication_from_date_value as from,
                 publ_to.field_publication_to_date_value as tod
                 
            FROM {node} n 
            LEFT JOIN {field_data_body} body ON(n.nid=body.entity_id)
                      INNER JOIN {field_data_field_agenda_date} agenda_date ON(n.nid = agenda_date.entity_id) 
                      INNER JOIN {field_data_field_publication_from_date} publ_from ON(n.nid=publ_from.entity_id) 
                      INNER JOIN {field_data_field_publication_to_date} publ_to ON(n.nid=publ_to.entity_id)                                            
                      $role_join
                      LEFT JOIN  {field_data_field_agenda_info} inf ON(n.nid=inf.entity_id)
                      LEFT JOIN {field_data_field_agenda_department} deptmnt ON(n.nid=deptmnt.entity_id) 
                      LEFT JOIN {field_data_field_agenda_store} ag_store ON(n.nid=ag_store.entity_id) 
                      LEFT JOIN {taxonomy_term_data} term ON(deptmnt.field_agenda_department_tid=term.tid)
                      WHERE n.type IN(:content_types)
                      $day_filter
                      $agenda_store_condition
                      $user_department_condition
                      $role_filter
                      AND n.status = 1
                      AND TO_DATE(publ_from.field_publication_from_date_value, 'YYYY-MM-DD') <= :agenda_day
                      AND TO_DATE(publ_to.field_publication_to_date_value, 'YYYY-MM-DD') >= :agenda_day
                      )
                      as tab
                      ORDER BY tab.agenda_date ASC, (case when tab.type = 'alert' then 1 
                                     when tab.info = 'info' then 3
                                     when tab.type = 'action' then 2
                                     when tab.type = 'news' then 4
                                     when tab.type = 'benchmark' then 5
                                     end), tid_weight ASC,tid_count DESC, tab.created ASC",
                      array(':agenda_day' => $agenda_day, ':content_types' => $content_types,':depart_tid' =>$department_exploded_array)
                      );                      	
   $agenda_content = array();
   $i =0;
  foreach ($result as $agenda) { 
    $agenda_content[$i]['nid'] = $agenda->nid;                
    $agenda_content[$i]['title'] = $agenda->title;
    $agenda_content[$i]['type'] = $agenda->type;
    $agenda_content[$i]['body'] = $agenda->body;
    $agenda_content[$i]['tid'] = $agenda->tid;
    $agenda_content[$i]['tid_count'] = $agenda->tid_count;
    $agenda_content[$i]['agenda_store'] = $agenda->agenda_store;
    $agenda_content[$i]['agenda_date'] = strtotime($agenda->agenda_date);
    $agenda_content[$i]['from_date'] = strtotime($agenda->from);
    $agenda_content[$i]['to_date'] = strtotime($agenda->tod);
    $agenda_content[$i]['info'] = $agenda->info;
    $i++;
  }
  return $agenda_content;
}
/**
 * 
 * Function to return the content for Agenda home page with News abd banchmark contents
 * @param $start_date : Start date of agenda
 * @param $end_date : End date of agenda
 * @param $agenda_store : User's selected store 
 * @param $user_department : User selected departement
 */
function _im_agenda_news_benchmark_filter_content($start_date, $end_date, $agenda_store) {
  global $user;
  $userstores = array();  
  if ($agenda_store  == "all") {
  $user_load = user_load($user->uid);
  if (!empty($user_load->field_user_stores['und'][0]['value'])) {    
    $userstores[] = $user_load->field_user_stores['und'][0]['value'];
    if (strstr($user_load->field_user_stores['und'][0]['value'],',')) {
      $userstoresarray = $user_load->field_user_stores['und'][0]['value'];
      $userstores = array();
      $userstores = explode(',',$userstoresarray);
      $userstoresarray = array();
    }
  }
  $user_selected_store = "";
  for ($i = 0; $i < count($userstores); $i++) {
    if ($i == (count($userstores) - 1)) {
      $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]';
     }
     else {
       $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]' . '|';
      }       
  }
    $agenda_store = $user_selected_store;
  }  
  $agenda_day = date('Y-m-d');
  $agenda_store_condition = '';
  $day_filter = " AND agenda_date.field_agenda_date_value <= '" . $start_date . "T00:00:00' AND agenda_date.field_agenda_date_value >= '" . $end_date . "T00:00:00'";
  if ($agenda_store) {
    $agenda_store_condition = " AND ag_store.field_agenda_store_value ~ '". $agenda_store ."'";
  }
  $content_types = array('news', 'benchmark');
  $result = db_query("SELECT tab.nid as nid,
                              tab.title as title,
                              tab.type as type,
                              tab.created as created,
                              tab.body as body,
                              tab.status as status,
                              tab.tid,
                              tab.agenda_store as agenda_store,
                              tab.agenda_date as agenda_date,
                              tab.info,
                              tab.weight,
                              (SELECT COUNT(field_agenda_department_tid) as tid_count from {field_data_field_agenda_department} where entity_id = nid) as tid_count,
                              (SELECT MIN(taxonomy_term_data.weight) as tid_weight from taxonomy_term_data taxonomy_term_data ,field_data_field_agenda_department field_data_field_agenda_department   where taxonomy_term_data.tid = field_data_field_agenda_department.field_agenda_department_tid and field_data_field_agenda_department.entity_id=nid) as tid_weight,
                              tab.from,
                              tab.tod
                      FROM
                       (SELECT DISTINCT ON (n.nid) nid,
                             n.title, 
                 n.type as type, 
                 n.created as created,
                 body.body_value as body,
                 n.status status,
                 ag_store.field_agenda_store_value agenda_store,
                 agenda_date.field_agenda_date_value agenda_date,
                 inf.field_agenda_info_value as info,
                 deptmnt.field_agenda_department_tid as tid,
                 term.weight as weight,
                 publ_from.field_publication_from_date_value as from,
                 publ_to.field_publication_to_date_value as tod
                 
            FROM {node} n 
            LEFT JOIN {field_data_body} body ON(n.nid=body.entity_id)
                      INNER JOIN {field_data_field_agenda_date} agenda_date ON(n.nid = agenda_date.entity_id) 
                      INNER JOIN {field_data_field_publication_from_date} publ_from ON(n.nid=publ_from.entity_id) 
                      INNER JOIN {field_data_field_publication_to_date} publ_to ON(n.nid=publ_to.entity_id)                                            
                      
                      LEFT JOIN  {field_data_field_agenda_info} inf ON(n.nid=inf.entity_id)
                      LEFT JOIN {field_data_field_agenda_department} deptmnt ON(n.nid=deptmnt.entity_id) 
                      LEFT JOIN {field_data_field_agenda_store} ag_store ON(n.nid=ag_store.entity_id) 
                      LEFT JOIN {taxonomy_term_data} term ON(deptmnt.field_agenda_department_tid=term.tid)
                      WHERE n.type IN(:content_types)
                      $day_filter
                      $agenda_store_condition
                      
                      AND n.status = 1
                      AND TO_DATE(publ_from.field_publication_from_date_value, 'YYYY-MM-DD') <= :agenda_day
                      AND TO_DATE(publ_to.field_publication_to_date_value, 'YYYY-MM-DD') >= :agenda_day
                      )
                      as tab
                      ORDER BY tab.agenda_date ASC, (case when tab.type = 'alert' then 1 
                                     when tab.info = 'info' then 3
                                     when tab.type = 'action' then 2
                                     when tab.type = 'news' then 4
                                     when tab.type = 'benchmark' then 5
                                     end), tid_weight ASC,tid_count DESC, tab.created ASC",
                      array(':agenda_day' => $agenda_day, ':content_types' => $content_types)
                      );
   $agenda_content = array();
   $i =0;
  foreach ($result as $agenda) { 
    $agenda_content[$i]['nid'] = $agenda->nid;                
    $agenda_content[$i]['title'] = $agenda->title;
    $agenda_content[$i]['type'] = $agenda->type;
    $agenda_content[$i]['body'] = $agenda->body;
    $agenda_content[$i]['tid'] = $agenda->tid;
    $agenda_content[$i]['tid_count'] = $agenda->tid_count;
    $agenda_content[$i]['agenda_store'] = $agenda->agenda_store;
    $agenda_content[$i]['agenda_date'] = strtotime($agenda->agenda_date);
    $agenda_content[$i]['from_date'] = strtotime($agenda->from);
    $agenda_content[$i]['to_date'] = strtotime($agenda->tod);
    $agenda_content[$i]['info'] = $agenda->info;
    $i++;
  }
  return $agenda_content;	
}

/**
 * Changing the node draft status to 0 when node is published
 * Enter description here ...
 * @param unknown_type $node
 */
function im_agenda_change_state_to_publish($node) {
  global $user;
  $node = node_load($node->nid);
  $node->revision = 1;
  $node->field_draft_status['und'][0]['value'] = 0;
  $node->workbench_moderation_state_new = 'published';
  node_save($node);
  drupal_set_message(t("Node changed to Publish status"));
  drupal_goto("admin/workbench/needs-review");
}

/**
 * Implemented hook_menu_alter
 * Enter description here ...
 * @param $items
 */
function im_agenda_menu_alter(&$items) {
	//Hide the duplicated View draft tab 
	$items['node/%node/draft']['type'] = MENU_CALLBACK;
	unset($items['node/%node/draft']);
	$items['file/ajax']['page callback'] = '_im_agenda_file_upload';
}

/**
 * Agenda for the day callback
 */
function im_agenda_day() {
	drupal_add_js(drupal_get_path('module', 'im_features_om') . '/js/jquery.printElement.min.js');
	drupal_add_css(drupal_get_path('theme', 'im') . '/css/custom_print.css', array('media' => 'print'));
	$_SESSION['tid_counter_array'] = array();
	$_SESSION['department_name_flag'] = '';
	$_SESSION['empty_flag'] = 0;
	ctools_add_js('ajax-responder');
	drupal_add_css(drupal_get_path('module', 'im_agenda') . '/css/im_agenda.css');
	drupal_add_js(drupal_get_path('module', 'im_agenda') . '/js/im_agenda.js');
	im_agenda_add_ctools();
	$agenda_day_date = arg(1);//2013-10-05
	$agenda_day_store = arg(2);//'all' by default
	$agenda_day_department = arg(3); //PGC
	$agenda_day_date = date('Y-m-d', strtotime($agenda_day_date));
	$output = drupal_get_form('agenda_day_filter_form');
	$output = render($output);
  //for New, Benchmark, Action and Alert displaying result from apache solr...
  if (isset($_GET['search_id'])&& is_numeric($_GET['search_id']) && ($_GET['type'] == 'news' || $_GET['type'] == 'benchmark')) {
    $nid = $_GET['search_id'];
    //drupal_add_js('jQuery(document).ready(function () { jQuery("'.$action_alert.'").trigger("click"); });', 'inline');
    drupal_add_js('jQuery(document).ready(function () { jQuery("a[href$='.$nid.']").trigger("click"); });', 'inline');
  }
	return $output;
} 

function agenda_day_filter_form($form, $form_state){
  global $base_url;
  $user_store = arg(2);
  $_SESSION['user_selected_store'] = arg(2);
  if(arg(1)){
    if(is_numeric(arg(1))){
      $year = substr(arg(1), 0, 4);
      $month = substr(arg(1), 4, 2);
      $day = substr(arg(1),6, 7);
      $agenda_default_date =  $year.'-'.$month.'-'.$day;
    }else{
      $agenda_default_date = date('Y-m-d');
    }
  }
  else {
    $agenda_default_date = date('Y-m-d');
  }
  if(arg(2)){
    $user_store = arg(2);
  }
  else {
    $user_store = 'all';
  }
  if(arg(3)!= 'all'){
    $selected_value =arg(3);
    $selected_value = explode(',',$selected_value);
    $department_default_value = $selected_value;
  }
  else {
    $department_default_value = '0';
  }
  $form = array();
  $form['user_date_select'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd/m/Y',
    '#default_value' => $agenda_default_date,
    '#date_year_range' => '-3:+3',
    '#prefix' => '<div id="agenda-user-input-date">',
    '#datepicker_options' => array(
    'showOn' => 'button',
    'buttonImage' => base_path() .path_to_theme('im') . '/css/images/calender.png',
    'buttonImageOnly' => true,
  ),
  );
  $department = taxonomy_vocabulary_machine_name_load("agenda_department");
  $department_list[''] = array(t('All Departments'));
  if ($department) {
    $vid =  $department->vid;
    $agenda_department =  taxonomy_get_tree($vid);
	  foreach ($agenda_department as $item) {
	    $department_list[$item->tid] = str_repeat('-', $item->depth) . $item->name;
	  }
  }
  $form['agenda_back_link'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Back to full agenda'), 'agenda/list/'.arg(1).'/'.arg(2).'/'.arg(3)),
  	'#prefix' => '<div class="back-to-full-agenda">',
    '#suffix' => '</div>',
  );
  $form['user_department'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#pre_render' => array('dropdown_checkboxes'),
    '#options' => $department_list,
    '#prefix' => '<div id="agenda-user-input-department">',
    '#suffix' => '</div>',
    '#default_value' => $department_default_value ,
  );
  $form['agenda_day_submit'] = array(
    '#type' => 'submit',
    '#value' =>t('search'),
  	'#suffix' => '</div>',
  );
  $form['user_store'] = array(
    '#type' => 'hidden',
    '#value' => $user_store,
  );
   $form['agenda_week_list'] = array(
    '#type' => 'markup',
    '#markup' => _im_agenda_day_list(), //views_embed_view('agenda_list', 'block_1', arg(1),arg(2), arg(3))
   /* '#prefix' => '<div id="agenda-list-week">',
    '#suffix' => '</div>',*/
  );
  return $form;
}
/**
 * 
 * Function to return the content for Agenda for the day page with Alert, action and info contents
 * @param $start_date : Start date of agenda
 * @param $end_date : End date of agenda
 * @param $agenda_store : User's selected store 
 * @param $user_department : User selected departement
 */
function _im_agenda_filter_content_for_day($start_date, $end_date, $agenda_store, $user_department) {
  global $user;  
  if ($agenda_store  == "all") {
  $user_load = user_load($user->uid);
  if (!empty($user_load->field_user_stores['und'][0]['value'])) {
    $userstores = array();
  $userstores[] = $user_load->field_user_stores['und'][0]['value'];
    if (strstr($user_load->field_user_stores['und'][0]['value'],',')) {
      $userstoresarray = $user_load->field_user_stores['und'][0]['value'];
      $userstores = array();
      $userstores = explode(',',$userstoresarray);
      $userstoresarray = array();
    }
  }
  $user_selected_store = "";
  if(isset($userstores)) {
  for ($i = 0; $i < count($userstores); $i++) {
    if ($i == (count($userstores) - 1)) {
      $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]';
     }
     else {
       $user_selected_store .= '[[:<:]]' . $userstores[$i] . '[[:>:]]' . '|';
      }       
  }
  }
    $agenda_store = $user_selected_store;
  }
  $roles_flag = '';
  if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_director") {
    $roles_flag = "'store_director', 'store_manager', 'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_manager") {
    $roles_flag = "'store_manager', 'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_employee") {
    $roles_flag = "'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_director_trainee") {
    $roles_flag = "'store_director', 'store_manager', 'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_manager_trainee") {
     $roles_flag = "'store_manager', 'store_employee'";
  }
  $agenda_day = date('Y-m-d');
  $role_join = '';
  $role_filter = '';
  $agenda_store_condition = '';
  $user_department_condition = '';
  $day_filter = " AND agenda_date.field_agenda_date_value <= '" . $start_date . "T00:00:00' AND agenda_date.field_agenda_date_value >= '" . $end_date . "T00:00:00'";   
  if(isset($_SESSION['ldap_user_role']) && ($_SESSION['ldap_user_role'] == 'store_employee' || $_SESSION['ldap_user_role'] == 'store_director' || $_SESSION['ldap_user_role'] == 'store_manager' || $_SESSION['ldap_user_role'] == 'store_director_trainee' || $_SESSION['ldap_user_role'] == 'store_manager_trainee')) {
    $role_join = ' INNER JOIN {field_data_field_agenda_concernees} aj_conc ON(n.nid=aj_conc.entity_id) ';
    $role_filter = " AND aj_conc.field_agenda_concernees_value IN(" . $roles_flag . ")";
  }
  if ($agenda_store) {
    $agenda_store_condition = " AND ag_store.field_agenda_store_value ~ '". $agenda_store ."'";
  }
  $department_exploded_array =array();
  if ($user_department && $user_department != "all") {
    $department = $user_department;
    if(strstr($department,",")){
      $department_exploded_array = explode("," ,$department);
      if (count($department_exploded_array)> 1){
        $user_department_condition = " AND deptmnt.field_agenda_department_tid IN (:depart_tid)";
      }
    }
	else{
        $user_department_condition = " AND deptmnt.field_agenda_department_tid = '" . $department . "'";
    }
  }
  $content_types = array('alert', 'action');
  $result = db_query("SELECT tab.nid as nid,
                              tab.title as title,
                              tab.type as type,
                              tab.created as created,
                              tab.body as body,
                              tab.status as status,
                              tab.tid,

                              tab.agenda_store as agenda_store,
                              tab.agenda_date as agenda_date,
                              tab.info,
                              tab.weight,
                              (SELECT COUNT(field_agenda_department_tid) as tid_count from {field_data_field_agenda_department} where entity_id = nid) as tid_count,
                              (SELECT MIN(taxonomy_term_data.weight) as tid_weight from taxonomy_term_data taxonomy_term_data ,field_data_field_agenda_department field_data_field_agenda_department   where taxonomy_term_data.tid = field_data_field_agenda_department.field_agenda_department_tid and field_data_field_agenda_department.entity_id=nid) as tid_weight,
                              tab.from,
                              tab.tod
                      FROM
                       (SELECT DISTINCT ON (n.nid) nid,
                             n.title, 
                 n.type as type, 
                 n.created as created,
                 body.body_value as body,
                 n.status status,
                 ag_store.field_agenda_store_value agenda_store,
                 agenda_date.field_agenda_date_value agenda_date,
                 inf.field_agenda_info_value as info,
                 deptmnt.field_agenda_department_tid as tid,
                 term.weight as weight,
                 publ_from.field_publication_from_date_value as from,
                 publ_to.field_publication_to_date_value as tod
                 
            FROM {node} n 
            LEFT JOIN {field_data_body} body ON(n.nid=body.entity_id)
                      INNER JOIN {field_data_field_agenda_date} agenda_date ON(n.nid = agenda_date.entity_id) 
                      INNER JOIN {field_data_field_publication_from_date} publ_from ON(n.nid=publ_from.entity_id) 
                      INNER JOIN {field_data_field_publication_to_date} publ_to ON(n.nid=publ_to.entity_id)                                            
                      
                      LEFT JOIN  {field_data_field_agenda_info} inf ON(n.nid=inf.entity_id)
                      LEFT JOIN {field_data_field_agenda_department} deptmnt ON(n.nid=deptmnt.entity_id) 
                      LEFT JOIN {field_data_field_agenda_store} ag_store ON(n.nid=ag_store.entity_id) 
				
                      LEFT JOIN {taxonomy_term_data} term ON(deptmnt.field_agenda_department_tid=term.tid)
                      WHERE n.type IN(:content_types)
                      $day_filter
                      $agenda_store_condition
                      $user_department_condition
                       
                      AND n.status = 1
                      AND TO_DATE(publ_from.field_publication_from_date_value, 'YYYY-MM-DD') <= :agenda_day
                      AND TO_DATE(publ_to.field_publication_to_date_value, 'YYYY-MM-DD') >= :agenda_day
                      )
                      as tab
                      ORDER BY tab.agenda_date ASC, (case when tab.type = 'alert' then 1 
                                     when tab.info = 'info' then 3
                                     when tab.type = 'action' then 2
                                     when tab.type = 'news' then 4
                                     when tab.type = 'benchmark' then 5
                                     end), tab.weight ASC, tab.created ASC",
                      array(':agenda_day' => $agenda_day, ':content_types' => $content_types,':depart_tid' =>$department_exploded_array)
                      );
   $agenda_content = array();
   $i =0;
  foreach ($result as $agenda) { 
    $agenda_content[$i]['nid'] = $agenda->nid;                
    $agenda_content[$i]['title'] = $agenda->title;
    $agenda_content[$i]['type'] = $agenda->type;
    $agenda_content[$i]['body'] = $agenda->body;
    $agenda_content[$i]['tid'] = $agenda->tid;
//	$agenda_content[$i]['fid'] = $agenda->fid;
    $agenda_content[$i]['tid_count'] = $agenda->tid_count;
    $agenda_content[$i]['agenda_store'] = $agenda->agenda_store;
    $agenda_content[$i]['agenda_date'] = strtotime($agenda->agenda_date);
    $agenda_content[$i]['from_date'] = strtotime($agenda->from);
    $agenda_content[$i]['to_date'] = strtotime($agenda->tod);
    $agenda_content[$i]['info'] = $agenda->info;
	$agenda_content[$i]['weight'] = $agenda->weight;
    $i++;
  }  
  return $agenda_content;
}
/**
 * Function to display the agenda for the day content with themeing
 *
 */
function _im_agenda_day_list() {
  global $user;
  global $base_url;
  $start_date = date("Y-m-d", strtotime(arg(1)));
  $user = user_load($user->uid);
  $result = _im_agenda_filter_content($start_date, $start_date,  arg(2), arg(3));
  //$result = _im_agenda_filter_content_for_day($start_date, $start_date, arg(2), arg(3));
  $output = '';
	$date = arg(1);
	$timestamp = $date;
	$timestamp_previous = strtotime($timestamp)-1;
	$dateprevious = format_date($timestamp_previous,'custom','l j F');
	$timestamp_present = strtotime($timestamp);
	$datepresent = format_date($timestamp_present,'custom', 'l j F Y');
	$timestamp_next = strtotime('+1 day', strtotime($date));
	$datenext = format_date($timestamp_next,'custom','l j F');
	$previous_date =  date('Ymd', strtotime('-1 day', strtotime($date)));
	$next_date =  date('Ymd', strtotime('+1 day', strtotime($date)));
	 
	$output .= '<div class="agenda-date-selection">
	    <div class = "previous-date" >' . l($dateprevious,'agenda-day/'. $previous_date.'/'.arg(2).'/'.arg(3)) . '</div>
	    <div class = "present-date">' . $datepresent .'</div>
	    <div class = "next-date"> '. l($datenext,'agenda-day/'. $next_date.'/'.arg(2).'/'.arg(3)) . '</div>
	    <div class = "print-agenda-today" onclick = "return xt_click(this, \'C\',\'1\',\'print::agenda_day::'.format_date($timestamp_present,'custom', 'Y-m-d').'\',\'A\')">' . t('Print') .'
	    </div>
	</div>
	<div class="agenda-date-selection-data">
	<span id="agenda-date-selection-display">
	<div class="agenda-date-selection">
	    <div class = "present-date">' . $datepresent .'</div>    
	</div>
	</span>
	<div class="view-grouping">
	<div class="view-grouping">';
  $department_id = '';
  $type = '';
  $info_set_class = '';
  $node_title = '';
  $department_id_flag = '';
  $inc = 2;
  $type_flag = '';
  //To obtain all nid with webform nid's.
  $questionnaire_nids = array();
  $questionnaire_nids = questionnaire_wnids();
 // print_r($questionaire_nids);exit;
  $roles_flag = '';
  if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_director") {
    $roles_flag = "'store_director', 'store_manager', 'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_manager") {
    $roles_flag = "'store_manager', 'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_employee") {
    $roles_flag = "'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_director_trainee") {
    $roles_flag = "'store_director', 'store_manager', 'store_employee'";
  }
  else if (isset($_SESSION['ldap_user_role']) && $_SESSION['ldap_user_role'] == "store_manager_trainee") {
     $roles_flag = "'store_manager', 'store_employee'";
  }
  foreach ($result as $views_obj) {
	  if(isset($_SESSION['ldap_user_role']) && ($_SESSION['ldap_user_role'] == 'store_employee' || $_SESSION['ldap_user_role'] == 'store_director' || $_SESSION['ldap_user_role'] == 'store_manager' || $_SESSION['ldap_user_role'] == 'store_director_trainee' || $_SESSION['ldap_user_role'] == 'store_manager_trainee')) {
	    $role_join = db_query("SELECT field_agenda_concernees_value FROM {field_data_field_agenda_concernees} WHERE entity_id = '" . $views_obj['nid'] . "' AND field_agenda_concernees_value IN(" . $roles_flag . ")");
	    if (count($role_join) == 0) {
	    	continue;
	    }
	  }
	  //To obtain the rendered questionnaire if exists
	  $questionaire_op = '';
	  if(isset($questionnaire_nids) && !empty($questionnaire_nids)) {
	    $questionaire_op = questionnaire_display($views_obj['nid'], $questionnaire_nids);
	  }
	
	  $department_id = $views_obj['tid'];
		$department = taxonomy_term_load($department_id);
		$department_color = '';
		$department_name = '';
		$views_row = '';
		if(!empty($department->field_taxo_shortname['und'])){
		   $department_name = $department->field_taxo_shortname['und'][0]['value'];
		}
		if(!empty($department->field_taxo_department_color['und'][0]['rgb'])) {
		   $department_color = $department->field_taxo_department_color['und'][0]['rgb'];
		}
		if (isset($views_obj['info'])) {
			$views_obj['type'] = "action-info";
			$info_set_class = "info-set-class";
		}
		$first_set_class = '';
		if (strcasecmp ($type, $views_obj['type']) != 0) {
		  $first_set_class = 'first-set';
		  $department_id_flag = '';
		  $type = $views_obj['type'];
		  $title = $type;
		  if ($type == "action-info") {
		    $title = "Info";
		  }
		  $node_title = $views_obj['title'];
		  $output .= '<div class = "agendatype-' . ucfirst($type) . ' ' . $info_set_class . '"><h2>' . ucfirst($title) .'</h2></div>';
		  $inc++;
		}
		$type = $views_obj['type'];
		$title = $type;
		 
		$attachment = array();
		$sql_attachment = db_query("SELECT field_agenda_attachments_fid FROM field_data_field_agenda_attachments WHERE entity_id = '" . $views_obj['nid'] . "'");
		foreach ($sql_attachment as $fid) {
		  if (isset($fid->field_agenda_attachments_fid)) {
		    $fid = $fid->field_agenda_attachments_fid;
		    $file = file_load($fid);
		    $attachment[] = array('name' => $file->filename, 'url' => file_create_url($file->uri), 'file_id' => $fid);
		  }
	    }
		$body = '';
		if (isset($views_obj['body'])) {
		  $body = $views_obj['body'];
		}
		$body = str_replace('<embed', '<embed wmode="opaque"', $body);
		$icon_color ='white';
		$node_title = $views_obj['title'];
		if ($views_obj['tid_count'] == 1 || empty($department_id_flag)) { //(strcasecmp ($department_id, $department_id_flag) != 0) {
			$image_class_name = ' action_image';
			$teaser_icon_class_name = ' agenda-teaser-icon';
			$teaser_corner_class_name = 'agenda-teaser-corner';
			$field_taxo_department_color = '';
			if (isset($department->field_taxo_department_color['und'][0]['rgb'])) {
			  $field_taxo_department_color = $department->field_taxo_department_color['und'][0]['rgb'];
			}
			if ($views_obj['tid_count'] > 1) {
				$department_name = t('Multi');
				$department_color = 'grey';
				$teaser_corner_style = " border-top: 20px solid grey; border-right: 20px solid grey;";
			}
			else {
				$teaser_corner_style = " border-top: 20px solid " . $field_taxo_department_color. "; border-right: 20px solid " . $field_taxo_department_color . ";";
			}
			$teaser_title_class_name = ' agenda-teaser-title';
			$views_row_class_style = ''; // if the image is coming this variable is empty otherwise this is the default value.
			if (!empty($type_flag) && $type_flag == $type) {
			  $views_row = 'views-row ';
			}
		}
		else {
			$views_row_class_style = 'style="width:100%; display: inline-block"';
			$image_class_name = "";
			$teaser_icon_class_name = "";
			$teaser_corner_class_name = "";
			$teaser_corner_style = "";
			$teaser_title_class_name = "";
		}
		$output .= '<div class = "agendatype-detail' . ucfirst($type) . ' ' . $info_set_class . ' ' .  $first_set_class . '">
                  <div class=" ' . $views_row . ' views-row-' . ($inc) . ' views-row-odd views-row-first"' . $views_row_class_style . '>';
	   if (!empty($image_class_name)) {
		  $output .= '<div class = "' . $image_class_name . '">
		<div class="' . $teaser_icon_class_name . '" style="color:' . $icon_color . '"><span class="' .  $type . '-icon"></span></div> 
		<span class="' . $teaser_corner_class_name . '" style="' . $teaser_corner_style . '"></span>
		<p class="' . $teaser_title_class_name . '" style="color:' . $department_color . '">' . ctools_modal_text_button($department_name, 'agenda-detail/day/nojs/'. $views_obj['nid'], '', 'ctools-modal-ctools-sample-style') . '</p></div>';
	  }
	  $output .= '<div class = "agenda-today-sec1">';
	  $style = 'style="margin-left:110px"'; 
	  $output .= '<div class ="action_title" ' . $style .'>' . ctools_modal_text_button($node_title, 'agenda-detail/day/nojs/'. $views_obj['nid'], '', 'ctools-modal-ctools-sample-style') . ' :</div>';
	  $output .= '<div class ="action_body" ' . $style . '>' . $body . '</div>';
	  if ($attachment) {
	  	foreach ($attachment as $attachment_link) {
	    	$output .= '<div class = "action_attachment" ' . $style . '> <a href="/check_file_access/' . $attachment_link['file_id'] . '" target="_blank" onclick="return xt_click(this, \'C\',\'1\',\'download::'.$type.'::'.str_replace(" ","_", rawurlencode(rawurldecode($attachment_link['name']))).'\',\'A\')">' . $attachment_link['name'] . '</a></div>';
	  	}
	  }
    //display of questionaire
    if ($questionaire_op) {
      $output .= '<div class = "action_questionnaire" ' . $style . '> ' . $questionaire_op . '</div>';
    }
	  $output .= '</div> </div> </div>';

	  $department_id_flag = $views_obj['tid'];
	  $type_flag = $views_obj['type'];
  } 
  $output .= "</div></div>";
  
  
  /* The Content from news and benchmark is rendered in the agenda for the day page from the query*/
  $news_benchmark_content = _im_agenda_news_benchmark_filter_content($start_date, $start_date, arg(2));
  $output .= '<div class="news-benchmark-grouping-content">';
  $set_type = ''; 
  $set_type_flag = '';
  $cnt = count($news_benchmark_content);
  $inc = 1;
  foreach($news_benchmark_content as $details) {
    if ($set_type != $details['type']) {
      if (!empty($set_type_flag)) {
        $output .= '</span></div>';  
      }
      $output .= '<div class="views-field views-field-rendered-entity"><span class="field-content"><div class="agendatype-News ">';
      $output .= '<h2>' . t(ucfirst($details['type'])) . '</h2></div>';       
      }                         
      $output .= '<div class="agendatype-detailnews">
                      <div class="views-row-1 views-row-odd views-row-first">             
                      <div class="agenda-today-sec1">';
      $output .= '<div class="action_title">' . ctools_modal_text_button($details['title'], 'agenda-detail/day/nojs/'. $details['nid'], '', 'ctools-use-modal ctools-modal-ctools-sample-style') . ':</div>';
      if(!empty($details['body'])) {
        $output .= '<div class="action_body">' . $details['body']. '</div>';
      }
  $nb_nodes = node_load($details['nid']);
  $nb_attachments = field_get_items('node', $nb_nodes, 'field_agenda_attachments');
  if(isset($nb_attachments)){
    $output .= '<div class="action_attachment">'; // . $attachment_nb . '</div>';
    foreach($nb_attachments as $nb_attachment){
      //$output .= l($nb_attachment['filename'], file_create_url($nb_attachment['uri']),  array('attributes' => array('target'=>'_blank', 'html' => TRUE, 'onclick' => 'return xt_click(this, \'C\',\'1\',\'download::'.$type.'::'.str_replace(" ","_",$views_obj['title']).'\',\'A\')'))).'<br />';
      $output .=  '<a href="' .file_create_url($nb_attachment['uri']) . '" target="_blank" onclick="return xt_click(this, \'C\',\'1\',\'download::'.$type.'::'.str_replace(" ","_", rawurlencode(rawurldecode($nb_attachment['filename']))).'\',\'A\')">' . $nb_attachment['filename'] . '</a>';
      $output .=  '<br />';
    }
    $output .= '</div>';
  }
      /*  $attachment_nb = '';
        /*Query to display the attachement in the news and bench mark*/
      //  $sql_attachment = db_query("SELECT field_agenda_attachments_fid FROM field_data_field_agenda_attachments WHERE entity_id = '" . $details['nid'] . "'");
   /*
	    foreach ($sql_attachment as $fid) {
	      if (isset($fid->field_agenda_attachments_fid)) {
	      $fid = $fid->field_agenda_attachments_fid;
	      $file = file_load($fid);
	      $attachment_nb .= l(t($file->filename), file_create_url($file->uri),  array('attributes' => array('target'=>'_blank', 'html' => TRUE, 'onclick' => 'xt_click(this, \'C\',\'1\',\'download::'.$type.'::'.str_replace(" ","_",$views_obj['title']).'\',\'A\')'))).'<br />';
	      }
        }             
        if($attachment_nb){
          $output .= '<div class="action_attachment">' . $attachment_nb . '</div>';
        }      */    
     $output .= '</div></div></div>';      
     $set_type = $details['type'];
    if ($inc == $cnt) {
      $output .= '</span></div>';      	       
    }
    $set_type_flag = $details['type'];
    $inc++;    
   }
  $output .= '</div>';
  $output .= "</div>";
  return $output;
}
/**
 * 
 * Submit handler for agenda for the day page 
 */
function agenda_day_filter_form_submit($form, &$form_state){
  $user_selected_date = !empty($form_state['values']['user_date_select']) ? $form_state['values']['user_date_select'] : '';
  $user_department = !empty($form_state['values']['user_department']) ? $form_state['values']['user_department'] : '';
  //to pass multiple tids for filtering by departments in views for adenda day.
  $user_dept = array();
    if(!empty($user_department)){
      $children ='';
      $user_select_depart = array();
    $user_department = implode(',', $user_department);
    $user_select_depart = explode(',',$user_department);
    foreach ($user_select_depart as $user_select_departs){
      $children = taxonomy_get_children($user_select_departs);
      if(!empty($children)){
        $user_dept[] = $user_select_departs;
        $children_tid =array();
        foreach($children as $childrens){
          $user_dept[] = $childrens->tid;
        }
      }
      else {
        $user_dept[] = $user_select_departs;
      }
    }
  }
  $user_department = implode(',', $user_dept);
  $user_store = !empty($form_state['values']['user_store']) ? $form_state['values']['user_store'] : ''; 
  if(empty($user_store)){
    $user_store = 'all';
  }
  if(empty($user_department)){
    $user_department = 'all';
  }
  $_SESSION['selected_date'] = date('Ymd',strtotime($user_selected_date));
  $_SESSION['user_store'] = $user_store;
  $_SESSION['user_department'] = $user_department;
  $user_selected_date = date('Ymd',strtotime($user_selected_date));
  im_agenda_for_week_list($user_selected_date, $user_store, $user_department);
  drupal_goto("agenda-day/$user_selected_date/$user_store/$user_department");
}
/**
 * 
 * Menu call back for the ajax lazy load contents
 */
function im_agenda_list_load() {
  $selected_date = ''; 
  $requestDate = variable_get('agenda_content_settings', '7');  
  im_feature_agenda_ctools_popup_settings();
  if (!empty($_SESSION['agenda_start_date'])) {
    $actual_start_date = date( "Y-m-d", strtotime($_SESSION['agenda_start_date'] . "-". $requestDate ." days" ));	
    $start_date = date( "Y-m-d", strtotime($actual_start_date));
    $end_date  = date( "Y-m-d", strtotime($start_date  . "-". $requestDate ." days" ));
    $user_store = isset($_SESSION['agenda_user_store']) ? $_SESSION['agenda_user_store'] : '';
    $user_department = isset($_SESSION['agenda_user_department']) ? $_SESSION['agenda_user_department'] : '';  
  }  
  if (strtotime($_SESSION['agenda_start_date'] ) != strtotime($_SESSION['agenda_end_date'])) {
  	$_SESSION['agenda_start_date'] = date( "Y-m-d", strtotime($_SESSION['agenda_start_date'] . "-". $requestDate ." days" ));  	  
  }
  else {
  	$_SESSION['agenda_start_date'] = " ";
  }
     
   $output = im_agenda_load_contents($start_date, $end_date, $user_store, $user_department);
   $image_uri = drupal_get_path("module", "im_agenda") . '/css/images/' . 'animation.gif';
   $user_image = array(
    'path' => $image_uri,
	'alt' => "User Image",
    );    
    $output .= '<div class="animation_image" style="display:none" align="center">'  . render(theme ('image', $user_image)) . '</div>';
    print $output;    
}
/**
 * 
 * Function to return the content for Agenda for the day page with Alert, action and info contents by the lazy load with no of days specified.
 * @param $start_date : Start date of agenda
 * @param $end_date : End date of agenda
 * @param $agenda_store : User's selected store 
 * @param $user_department : User selected departement
 */
function im_agenda_load_contents($start_date, $end_date, $user_store = NULL, $user_department = NULL, $views_type = 'minimized_default', $ajax = FALSE) {
  $agenda_content = _im_agenda_filter_content($start_date, $end_date, $user_store, $user_department);  
  $agenda_news_benchmark_content = _im_agenda_news_benchmark_filter_content($start_date, $end_date, $user_store); 
  $dates = im_agenda_month($start_date,$end_date);
  $inc = 0;
  for ($v = 0; $v < count($agenda_content);$v++) { 
    if ($agenda_content[$v]['type'] == "action" || $agenda_content[$v]['type'] == "alert") {
    $nodestore = array();
    if(!empty($agenda_content[$v]['agenda_store'])){
       $nodestore[] = $agenda_content[$v]['agenda_store'];
       if(strstr($agenda_content[$v]['agenda_store'],',')){
        $nodestorearray = $agenda_content[$v]['agenda_store'];
         $nodestore = array();
         $nodestore = explode(',',$nodestorearray);
         $nodestorearray = array();
       }
    }   
    $result[] = $agenda_content[$v];
//    $inc++;
    }
    
    $inc++;
 }
 
 $inc = 0;
 $news_content = array();
 $banchmark_content = array();
  for ($v = 0; $v < count($agenda_news_benchmark_content);$v++) { 
  	  
    if ($agenda_news_benchmark_content[$v]['type'] == "news") {
      $news_content[$inc] = $agenda_news_benchmark_content[$v];      
    }
    if ($agenda_news_benchmark_content[$v]['type'] == "benchmark") {
      $banchmark_content[$inc] = $agenda_news_benchmark_content[$v];
      $banchmark_content_set[$agenda_news_benchmark_content[$v]['nid']] = $agenda_news_benchmark_content[$v]['agenda_date'];
    }
    $inc++;
 
 }
  $output = '';
//  if (!empty($result)) {
  for ($dd= 0; $dd < count($dates); $dd++) {  	
    $output .= '<div class = "agenda-week" >';
    $output .= '<div class="agenda-date-contents">';
    //Add the class for the first weeek
    if ($dd == 0) {
      $week_no_class = "agenda-week-no first";
    }
    else {
      $week_no_class = "agenda-week-no";
    }  
    $fulldate = arg(2);
    $day      = substr($fulldate,6);
    $month    = substr($fulldate,4, -2);
    $dayno    = date('j',$dates[$dd]['week_date'][0]);
    if (date("W", strtotime($_SESSION['agenda_start_date'])) != $dates[$dd]['weekno'] || ($day>=1 && $day<=17)) { 
      $output .= '<div class ="' .$week_no_class . '"> '.t('Week').' ' . $dates[$dd]['weekno'] . '</div>';	
    }      
    for ($dy =0; $dy < count($dates[$dd]['week_date']); $dy++) {    	    	
      $display_plus_link = 0;
      $cc =0; 
	  if ((strtotime($_SESSION['agenda_start_date']) != $dates[$dd]['week_date'][$dy]) || ($ajax == TRUE)) {	 
 	
	    if (empty($user_department)) {
	      $user_department = "all";
	    }
	    elseif(arg(4) != '') {
	      $user_department = arg(4);
	    }
	    if (empty($user_store)) {
	      $user_store = "all";
	    }
	    elseif(arg(3) != '') {
	      $user_store = arg(3);
	    }	   	    
	    
	    $agenda_day_url = 'agenda-day/'. date('Ymd',$dates[$dd]['week_date'][$dy]) . "/" . $user_store . "/" . $user_department;	    
	    $options = array('html' => TRUE);
	    $date_display = '';
	    $date_display .= '<div class ="calendar-month-date">';
	    $date_display .= '<div class ="calendar-day">'  . t(date('D',$dates[$dd]['week_date'][$dy])) . '</div>'; 
	    $date_display .= '<div class ="calendar-month">'  . t(date('M',$dates[$dd]['week_date'][$dy])) . '</div>';      
	    $date_display .= '</div>';
	    $date_display .= '<div class ="calendar-date">'  . date('j',$dates[$dd]['week_date'][$dy]) . '</div>';
	    $date_display .= '<div class= "calendar-details">+ '.t('Details').'</div>';   
	    $agenda_for_day = l($date_display, $agenda_day_url, $options);
	    //Add the class for the last date day	    
	    if ($dy == (count($dates[$dd]['week_date']) -1)) {
	      $agenda_row_class = "agenda-day-row last";
	    }
	    else {
	      $agenda_row_class = "agenda-day-row";
	    }
	    $output .= '<div class ="' . $agenda_row_class . '">';
	    if (strtotime(date('Y-m-d 00:00:00')) == $dates[$dd]['week_date'][$dy]) {
	      $output .= '<div class = "current-pointed"></div>';
	    }	     
	    $classToReplace = 'agenda-day-load-more-content-' . date('Y-m-d',$dates[$dd]['week_date'][$dy]);
	    $output .= '<div class = "agenda-day">' . $agenda_for_day . '</div>';   
	//    $output .= '<div class = "agenda-day">' . date('j M',$dates[$dd]['week_date'][$dy]) . '</div>'; 
	    $output .= '<div id = "'.$classToReplace.'"  class= "agenda-day-content-list">';
	    // Code for Adding all the content if plus button is click by Ajax callback...
	    
	    $no_of_content_to_load = '21';
	    //print $views_type;exit;
	    
	    if(!empty($result)){	    	
	     // The display of the agenda results in a particular day should be restricted to 3 rows. If more, a more link should be displayed in the right section 
	     $results_count = count($result); 
	     $display_more_link = FALSE;
	     $inc = 1;	   	        
	     if ($views_type == 'maximized') {
	     	 
	       for ($r =0; $r < $results_count; $r ++) {
          if ($dates[$dd]['week_date'][$dy] == $result[$r]['agenda_date']) {
            if($inc <= $inc){
              $agenda_content =_im_agenda_teaser_content($result[$r]);
              if ($inc > 15) {
                $display_plus_link = 1;
                $output_replaced .= '<div class= "agenda-day-content additional-four" id = "agenda-content-' .$result[$r]['nid'] .'" >' . $agenda_content . '</div>';  
              }
              else {
                $output_replaced .= '<div class= "agenda-day-content" id = "agenda-content-' .$result[$r]['nid'] .'" >' . $agenda_content . '</div>';  
              }
            }
            if($inc > $inc) {
              $display_more_link  = TRUE;
            }
            $inc++;
          }
         }    
	     } elseif ($views_type == 'minimized') {
	     	  for ($r =0; $r < $results_count; $r ++) {
          if ($dates[$dd]['week_date'][$dy] == $result[$r]['agenda_date']) {
            if($inc <= $no_of_content_to_load){
              $agenda_content =_im_agenda_teaser_content($result[$r]);
              if ($inc > 15) {
                $display_plus_link = 1;
                $output_replaced .= '<div class= "agenda-day-content additional-four" id = "agenda-content-' .$result[$r]['nid'] .'" >' . $agenda_content . '</div>';  
              }
              else {
                $output_replaced .= '<div class= "agenda-day-content" id = "agenda-content-' .$result[$r]['nid'] .'" >' . $agenda_content . '</div>';  
              }
            }            
            // Display More link : Flag if content is more then it is supposed.
            if($inc > $no_of_content_to_load) {
              $display_more_link  = TRUE;
            }
            $inc++;
          }     
         }
	     }
	     else {
	      for ($r =0; $r < $results_count; $r ++) {
	      	if ($dates[$dd]['week_date'][$dy] == $result[$r]['agenda_date']) {
            if($inc <= $no_of_content_to_load){
              $agenda_content =_im_agenda_teaser_content($result[$r]);
              if ($inc > 15) {
                $display_plus_link = 1;
                $output .= '<div class= "agenda-day-content additional-four" id = "agenda-content-' .$result[$r]['nid'] .'" >' . $agenda_content . '</div>';  
              }
              else {
                $output .= '<div class= "agenda-day-content" id = "agenda-content-' .$result[$r]['nid'] .'" >' . $agenda_content . '</div>';  
              }
            }            
            // Display More link : Flag if content is more then it is supposed.
            if($inc > $no_of_content_to_load) {
              $display_more_link  = TRUE;
            }
            $inc++;
          }     
         }
	     }
	    } 
	    $news_nid = array();	    

	    foreach($news_content as $news_data) {
	      if ($news_data['agenda_date'] == $dates[$dd]['week_date'][$dy]) {     
	         $news_nid[] = $news_data['nid'];
	       }
	     }
	     $benchmark_nid = array();
	     
	     foreach($banchmark_content as $benchmark_data) {
	      if ($benchmark_data['agenda_date'] == $dates[$dd]['week_date'][$dy]) {
	        $benchmark_nid[] = $benchmark_data['nid'];  
	      }       
	     }
	     $agenda_news_count =  count($news_nid);
	     $agenda_benchmark_count = count($benchmark_nid);    
	     $output .= '</div>';
	     $output .= '<div id="agenda-news-benchmark" class="agenda-news-benchmark">';
	     im_feature_agenda_ctools_popup_settings();     
	    if($agenda_news_count >= 1) {
	     $latest_nid = $news_nid[0];	     
	     $agenda_news_title =  ctools_modal_text_button(t('News Market'), 'agenda-detail/day/nojs/'. $latest_nid, '', 'ctools-modal-ctools-sample-style');
	     $output .= '<div class="view view-news-benchmark view-id-news_benchmark">  
	               <div class="view-content">
	               <div class="views-row views-row-1 views-row-odd views-row-first views-row-last">
	               <span class="agenda-news-right"><span>' . $agenda_news_title . '</span></span></div>
	               </div>
	               </div>';
	    }
	    if($agenda_benchmark_count >= 1) {        
	      $latest_nid = $benchmark_nid[0];
	      $agenda_benchmark_title =  ctools_modal_text_button(t('Benchmark'), 'agenda-detail/day/nojs/'. $latest_nid, '', 'ctools-modal-ctools-sample-style');
	      $output .= '<div class="view view-news-benchmark view-id-news_benchmark">  
	                        <div class="view-content">
	                          <div class="views-row views-row-1 views-row-odd views-row-first views-row-last">
	                                                      <span class="agenda-news-right"><span>' . $agenda_benchmark_title . '</span></span></div>
	                          </div>
	                        </div>';
	      }
	      //@TO-DO in Sprint 3	   
	      if(isset($display_more_link) && $display_more_link == TRUE) {  	      	  
	        global $base_url;
	        $https_variable = variable_get("https");
	        if ($https_variable) {
	          $base_url = str_replace("http://", "https://", $base_url);
	        }
	        $start_date_flag = date('Y-m-d',$dates[$dd]['week_date'][$dy]);
          $load_all_variable_settings_js['date_filters'][$start_date_flag] = array(
            'baseURL' => $base_url,
            'start_date' => $start_date_flag,
            'store' => $user_store,
            'department' => $user_department,
            'classToReplace' => $classToReplace,
          ); 
          drupal_add_js($load_all_variable_settings_js, 'setting');   
          $image_uri = drupal_get_path("module", "im_agenda") . '/css/images/' . 'animation.gif';
          $user_image = array(
            'path' => $image_uri,
            'alt' => "User Image",
          );          
	        $output .= '<div id="load-more-content-' . $start_date_flag . '" class="load-more-content more-agendas ' . $start_date_flag . '" >'.l(t('More'), '');
	        $output .= '<div class="animaation-loader animation_image_load_' . $start_date_flag . '" style="display:none" align="center">'  . @render(theme ('image', $user_image)) . '</div></div>';
	        $display_more_link = FALSE;
	       }
	      else if ($display_plus_link == 1) {
	        global $base_url;
          $output .= '<div class="more-agendas more-agendas-ten" style="cursor: pointer; display:none">'.l(t('More'), '').'</div>';
          $display_plus_link = 0;
         }         
       
	      $output .= '</div></div>';
	    }
    }
    $output .='</div></div>';
  }
  $actual_end_date  = date( "Y-m-d", strtotime($start_date . "-60 days" ));
  
  if (($views_type == 'maximized' || $views_type == 'minimized') && $ajax == TRUE) {
  	return $output_replaced;
  }
  else {
  	$_SESSION['agenda_start_date'] = $start_date;
	  $_SESSION['agenda_end_date'] = $actual_end_date; 
	  $_SESSION['agenda_user_store'] = $user_store;
	  $_SESSION['agenda_user_department'] = $user_department;
	  $json_date_value = '';
	  if (!empty($load_all_variable_settings_js['date_filters'])) {
		  foreach ($load_all_variable_settings_js['date_filters'] as $date_flag_json) {
		    $json_date_value_array = $date_flag_json;
		    $json_date_value .= implode('####', $json_date_value_array) . '####';
		  }
	  }
	  $json_date_value = trim($json_date_value, '####');
  	$output .= '<div class="ajax_page_load_extra" style="display:none">*****' . $json_date_value . '*****</div>';
	  return $output;
  }
  
}

/**
 * Custom function to to obtain questionnaire nid's
 */
function questionnaire_wnids() {
  $action_nid_with_webs = '';
  $web_action_nid = array();
  $action_nid_with_webs = db_query('SELECT n.nid AS nid, fw.field_action_webform_nid_value AS web_nid, fd.field_webform_display_type_value AS web_type FROM node AS n INNER JOIN field_data_field_action_webform_nid AS fw ON (n.nid = fw.entity_id) INNER JOIN field_data_field_webform_display_type as fd ON(n.nid = fd.entity_id)');
  foreach($action_nid_with_webs as $action_nid_with_web) {
    $web_action_nid[$action_nid_with_web->nid]['w_nid'] = $action_nid_with_web->web_nid;
    $web_action_nid[$action_nid_with_web->nid]['w_type'] = $action_nid_with_web->web_type;
  }
  return $web_action_nid; 
}
/**
 * Custom function to print the questionnaire.
 */
function questionnaire_display($nid, $wnids) {	
  global $base_url;
  $webform_link = '';
  $questionnaire = '';
  
  global  $user;
  //$submitted_value = 'popup';
  //drupal_add_js(array('submitted'=>$submitted_value), 'setting');
  $submitted_value = '';
  if(array_key_exists($nid, $wnids)) {
    $user_id = $user->uid;
    $webform_nid = $wnids[$nid]['w_nid'];
    //To check the webform is submited for the concern action and user.
    if (empty($webform_nid)) {
      $webform_nid = 0;
    }
    
    $user_store = _questionnaire_get_user_profile_store();
    if($user_store){
    	$store_name = $user_store['store'];
    	if($user_store['store'] != 'Multiple'){    		
    		$store_name = db_query("SELECT s.ite_lib_value from {store_item_fields} s WHERE s.pve_code IN (:store_id) AND s.dit_cod_item ='magasin' ORDER BY s.ite_lib_value ASC", array(':store_id' => $user_store['store']))->fetchField();
    	}
    	$str_value = $store_name;
    }else{
    	$str_value = '';
    }
    $submission_query_result = db_query("SELECT w.nid FROm {webform_submissions} w 
      INNER JOIN webform_custom_data AS wc ON w.sid=wc.sid
    	WHERE w.uid = :user_id 
    	AND w.is_draft = '0' 
    	AND w.nid = :webform_nid 
    	AND wc.store = :store_name",
      array(':user_id'=>$user_id,':webform_nid'=>$webform_nid,':store_name'=>$str_value))->fetchAssoc();
    //Agenda for the day page
    if(arg(0) == 'agenda-day'){
      if($wnids[$nid]['w_type'] == 'embedded' && !empty($wnids[$nid]['w_nid'])){
      	
      	$submitted_value = 'popup';
        drupal_add_js(array('submitted'=>$submitted_value), 'setting');
        $w_node_obj = node_load($wnids[$nid]['w_nid']);
        $w_elements = node_view($w_node_obj, 'full');
        $title = '';
        if (isset($w_elements['webform']['#node']->title) && !empty($w_elements['webform']['#node']->title)) {
          $title = $w_elements['webform']['#node']->title ;
          $w_elements['webform']['#node']->title ='';
          $questionnaire ='<div class ="node_title">' .$title. '</div>';
        }
        $questionnaire .= drupal_render($w_elements);
      }
      else if(!empty($wnids[$nid]['w_nid'])) {
      	$submitted_value = 'no-popup';
        drupal_add_js(array('submitted'=>$submitted_value), 'setting');
        //$w_link = $base_url . "/node/" . $wnids[$nid]['w_nid'];
        $w_link = "node/" . $wnids[$nid]['w_nid'];
        $webform_link = l('Cliquez ici pour accéder au questionnaire', $w_link);
        $questionnaire = $webform_link;
      }
    }
    //Agenda detail page popup
  else if(empty($submission_query_result)){  	
      if($wnids[$nid]['w_type'] == 'embedded' && !empty($wnids[$nid]['w_nid'])){      	
      	$submitted_value = 'popup';
      	drupal_add_js(array('submitted'=>$submitted_value), 'setting');
        $w_node_obj = node_load($wnids[$nid]['w_nid']);
        $w_elements = node_view($w_node_obj, 'full');
        $title = '';
        if (isset($w_elements['webform']['#node']->title) && !empty($w_elements['webform']['#node']->title)) {
          $title = $w_elements['webform']['#node']->title ;
          $w_elements['webform']['#node']->title ='';
          $questionnaire ='<div class ="node_title">' .$title. '</div>';
        }
        $questionnaire .= drupal_render($w_elements);
      }
      else if(!empty($wnids[$nid]['w_nid'])) {
      	$submitted_value = 'no-popup';
      	drupal_add_js(array('submitted'=>$submitted_value), 'setting');
        //$w_link = $base_url . "/node/" . $wnids[$nid]['w_nid'];
        $w_link = "node/" . $wnids[$nid]['w_nid'];
        $webform_link = l('Cliquez ici pour accéder au questionnaire', $w_link);
        $questionnaire = $webform_link;
      }
    }
    else {
    	$submitted_value = 'no-popup';
      drupal_add_js(array('submitted'=>$submitted_value), 'setting');
      $questionnaire = t("Questionnaire for this action has been already submitted by you");
    }
  }  
  return $questionnaire;
}

/**
 * Implementing form_node_admin_content_alter
 * 
 */
function im_agenda_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
	//Hide the Preferred Store contents for all users except Technical Director
	global $user;
	if(!in_array('technical_director', $user->roles)){
		if(isset($form['filter']['filters']['status']['filters']['type']['#options']['preferred_store'])){
			unset($form['filter']['filters']['status']['filters']['type']['#options']['preferred_store']);
		}
		
		if(isset($form['admin']['nodes']['#options'])) {
			foreach ($form['admin']['nodes']['#options'] as $nid => $node) {
				if($node['type'] == 'Preferred Store'){
					unset($form['admin']['nodes']['#options'][$nid]);
				}
			}
		}
		else if(isset($form['admin']['nodes']['#rows'])){
			foreach ($form['admin']['nodes']['#rows'] as $nid => $node) {
				if($node['type'] == 'Preferred Store'){
					unset($form['admin']['nodes']['#rows'][$nid]);
				}
			}
		}
	}
}

/**
 * Displaying workflow buttons for Action content type
 */
	
function im_ageda_action_workflow(&$form, &$form_state, $form_id){
	global $user;
	$action_draft_access = '';
	$action_save_button_access = '';
	$action_publish_access = '';	
	$action_return_publication_access = '';
	$action_archive_access = '';
	
	//Assign roles to access workflow buttons
	$action_draft_access = in_array('contributor_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)|| in_array('content_manager_action',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	$action_save_button_access = in_array('content_manager_action',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	$action_publish_access = in_array('content_manager_action_regional',$user->roles) || in_array('content_manager_action',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	$action_return_publication_access = in_array('content_manager_action',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || in_array('content_manager_action_regional', $user->roles);
	//Fix for UATIM-682 and UATIM-595 - RegionalModerator can now archive any content
	$action_archive_access = in_array('content_manager_action_regional',$user->roles) || in_array('content_manager_action',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	$action_archive_draft_access = in_array('content_manager_action',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	
	//print 'Archive Status :- ' . $action_archive_access; exit;
	//Add Content Form
	if(!isset($form['nid']['#value'])){
	    //Display the Save As Draft button
	  	if(user_access('save draft')) {
		  	$form['actions']['save_draft'] = array (
				'#type' => 'submit',
				'#value' => t('Save as Draft'),
				'#access' => TRUE,
				'#weight' => 6,
				'#submit' => array('save_as_draft_submit'),
		  		'#validate' => array('im_agenda_form_validate'),
			);
		}
		
		if(user_access('ask for publication')) {
			$form['actions']['ask_for_publication'] = array (
				'#type' => 'submit',
				'#value' => t('Save and ask for Publication'),
				'#access' => TRUE,
				'#weight' => 7,
				'#submit' => array('ask_for_publication_submit'),
				'#validate' => array('im_agenda_form_validate'),
				//Display this button if Scope of content is National
				'#states' => array(
			      'visible' => array(
			        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'national'),
			      ),
			    ),
			);
			$form['actions']['save_prepare'] = array (
				'#type' => 'submit',
				'#value' => t('Save and Prepare for Regional Moderation'),
				'#access' => TRUE,
				'#submit' => array('save_prepare_regional_moderation_submit'),
				'#validate' => array('im_agenda_form_validate'),
				'#weight' => 8,
				//Display this button if Scope of content is Regional
				'#states' => array(
			      'visible' => array(
			        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'regional'),
			      ),
			    ),				
			);	  	
		}
		if($action_publish_access) {
			$form['actions']['publish'] = array (
				'#type' => 'submit',
				'#value' => t('Publish'),
				'#access' => TRUE,
				'#weight' => 9,
				//Display this button if Scope of content is National
				'#states' => array(
			      'visible' => array(
			        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'national'),
			      ),
			    ),
				'#submit' => array('publish_submit'),
		  		'#validate' => array('im_agenda_form_validate'),
			);
		}
		
		//Display the Save & Prepare button for National Content Manager and Regional Content Manager
		if(in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director', $user->roles)){
			$form['actions']['save_prepare'] = array (
					'#type' => 'submit',
					'#value' => t('Save and Prepare for Regional Moderation'),
					'#access' => TRUE,
					'#weight' => 8,
					//Display this button if Scope of content is Regional
					'#states' => array(
				      'visible' => array(
				        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'regional'),
				      ),
				    ),				
					'#submit' => array('save_prepare_regional_moderation_submit'),
					'#validate' => array('im_agenda_form_validate'),
				);
		} 
	 }
	 //Edit Content Form
	 else {
	 	$node_obj = node_load($form['nid']['#value']);
  		if (isset($node_obj->workbench_moderation['current']->state)) {		 
		  $workbench_moderation_status = $node_obj->workbench_moderation['current']->state;
		}
		else {
		  if(empty($workbench_moderation_status)) {
		  	$workbench_moderation_status = '';
		  }	
		}
		$node_status = $node_obj->status;
		$archived = '';
		if (isset($node_obj->field_node_archive['und'][0]['value'])) {
		  $archived = $node_obj->field_node_archive['und'][0]['value'];
		}
		
	 	$content_scope = $node_obj->field_action_scope_of_content['und'][0]['value'];
	 	if (isset($node_obj->field_agenda_store['und'][0]['value']) && !empty($node_obj->field_agenda_store['und'][0]['value'])) {
		  $node_stores = explode(",",$node_obj->field_agenda_store['und'][0]['value']);
	 	}
		$user_id = $user->uid;
		
		/**
		 * If logged in user is Regional Content Manager, retrieve the regional stores assigned to him
		 * get the count of stores matched with the stores added to node. 
		 */		
		$node_user_stores = array();
		if(in_array('content_manager_action_regional', $user->roles)){
			$user_regional_stores = array();
                       //This Query has changed to implement the UATIM-614
			$regional_stores = db_query("SELECT user_regional_stores.field_user_regional_profile_stor_value AS regional_stores FROM {field_data_field_user_regional_profile_stor} AS user_regional_stores WHERE user_regional_stores.entity_id = $user_id");
		 
			foreach($regional_stores as $regional_stores_result){
				$user_regional_stores = (array)$regional_stores_result;
			}
			if(!empty($user_regional_stores)){
				$user_regional_stores_arr = explode(",",$user_regional_stores['regional_stores']);
				$node_user_stores = array_intersect($node_stores, $user_regional_stores_arr);
			}
		}
		$delete_button_flag = FALSE;
		//Display the Ask for Publication button
	 	if($workbench_moderation_status == "draft" && $archived!=1 ) {
	 		if(user_access('ask for publication')){
			  		$form['actions']['ask_for_publication'] = array (
						'#type' => 'submit',
						'#value' => t('Save and ask for Publication'),
						'#access' => TRUE,
						'#weight' => 7,
			  			//Display this button if Scope of content is Regional
						'#states' => array(
					      'visible' => array(
					        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'national'),
					      ),
					    ),
						'#submit' => array('ask_for_publication_submit'),
			  			'#validate' => array('im_agenda_form_validate'),
					);
	 		}
			if(in_array('content_manager_action', $user->roles) || in_array('contributor_action', $user->roles) || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'regional' && (count($node_user_stores)>=1 || $node_obj->uid==$user->uid)) || in_array('administrator',$user->roles) || in_array('technical_director', $user->roles)){
				$form['actions']['save_prepare'] = array (
					'#type' => 'submit',
					'#value' => t('Save and Prepare for Regional Moderation'),
					'#access' => TRUE,
					'#weight' => 8,
					//Display this button if Scope of content is Regional
					'#states' => array(
				      'visible' => array(
				        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'regional'),
				      ),
				    ),				
					'#submit' => array('save_prepare_regional_moderation_submit'),
					'#validate' => array('im_agenda_form_validate'),
				);
 			}
	 		
	 		//Display the Save As Draft button
	 		if(($action_draft_access) || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'national') || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'regional' && (count($node_user_stores)>=1 || $node_obj->uid==$user->uid))){
	 			$form['actions']['save_draft'] = array (
					'#type' => 'submit',
					'#value' => t('Save as Draft'),
					'#access' => TRUE,
					'#weight' => 6,
					'#submit' => array('save_as_draft_submit_action'),
			  		'#validate' => array('im_agenda_form_validate'),
				);
				$delete_button_flag = TRUE;
	 		}
	 		
	 		//Display Publish button		
			if((in_array('content_manager_action', $user->roles) and $content_scope == 'national') || (in_array('content_manager_action_regional', $user->roles) and $content_scope == 'national') || (in_array('administrator', $user->roles) and $content_scope == 'national') || (in_array('technical_director', $user->roles) and $content_scope == 'national')){
				$form['actions']['publish'] = array (
					'#type' => 'submit',
					'#value' => t('Publish'),
					'#access' => TRUE,
					'#weight' => 9,
					//Display this button if Scope of content is National
					'#states' => array(
				      'visible' => array(
				        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'national'),
				      ),
				    ),
					'#submit' => array('publish_submit'),
			  		'#validate' => array('im_agenda_form_validate'),
				);
			}
			
		 	//Display the Save & Prepare button for National Content Manager and Regional Content Manager
			if(in_array('content_manager_action',$user->roles) || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'regional' && (count($node_user_stores)>=1 || $node_obj->uid==$user->uid))){
				$form['actions']['save_prepare'] = array (
					'#type' => 'submit',
					'#value' => t('Save and Prepare for Regional Moderation'),
					'#access' => TRUE,
					'#weight' => 8,
					//Display this button if Scope of content is Regional
					'#states' => array(
				      'visible' => array(
				        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'regional'),
				      ),
				    ),				
					'#submit' => array('save_prepare_regional_moderation_submit'),
					'#validate' => array('im_agenda_form_validate'),
				);
			}
		}
		
		//Display buttons for Needs Review status contents					
		if($workbench_moderation_status == "needs_review"){
			if($action_return_publication_access){
				//Display the Return Publication button	 
				if(user_access('return publication')) {
					if((in_array('administrator',$user->roles) || in_array('content_manager_action',$user->roles) || in_array('technical_director',$user->roles)) || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'national') || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'regional' && count($node_user_stores)>=1)){
						$nid = $node_obj->nid;
				    	$vid = $node_obj->vid;	    	
				    	$ctools_url = "admin/popup/nojs/node/".$nid."/moderation/".$vid."/change-state/draft";
				    	$form['actions']['return_publication'] = array (
							'#type' => 'item',
							'#markup' => ctools_modal_text_button(t('Return the Publication'), $ctools_url, t('Return the Publication'),  'ctools-modal-ctools-sample-style'),
							'#weight' => 7,
						);
					}		 			
			  	}
		  	
			  	//Display the Save button for Needs Review contents
				if($action_save_button_access || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'national') || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'regional' && count($node_user_stores)>=1)){
		  			$form['actions']['save'] = array (
				        '#type' => 'submit',
				        '#value' => t('Save'),
				        '#access' => TRUE,
				        '#weight' => 6,
		  				'#submit' => array('_im_agenda_node_submit'),
		  				'#validate' => array('im_agenda_form_validate'),
				    );
				}
			}
			//Display Publish button		
			if($action_publish_access || ($content_scope == 'regional' && in_array('content_manager_action_regional', $user->roles) && count($node_user_stores)>=1)){
				$form['actions']['publish'] = array (
					'#type' => 'submit',
					'#value' => t('Publish'),
					'#access' => TRUE,
					'#weight' => 9,						
					'#submit' => array('publish_submit'),
			  		'#validate' => array('im_agenda_form_validate'),
				);
			}else if($action_publish_access || (in_array('content_manager_action_regional', $user->roles) && $content_scope == 'national')){
				$form['actions']['publish'] = array (
					'#type' => 'submit',
					'#value' => t('Publish'),
					'#access' => TRUE,
					'#weight' => 9,
					//Display this button if Scope of content is National
					'#states' => array(
				      'visible' => array(
				        ':input[name="field_action_scope_of_content[und]"]' => array('value' => 'national'),
				      ),
				    ),
					'#submit' => array('publish_submit'),
			  		'#validate' => array('im_agenda_form_validate'),
				);
			}
		}
		
		//print $workbench_moderation_status; exit;
		//Buttons to display for Published contents
		if($node_status == 1 && $workbench_moderation_status == "published"){
			if($action_publish_access || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'national') || ($content_scope == 'regional' && in_array('content_manager_action_regional', $user->roles) && count($node_user_stores)>=1)){
				$form['actions']['save'] = array (
			        '#type' => 'submit',
			        '#value' => t('Publish modification (Save)'),
			        '#access' => TRUE,
			        '#weight' => 6,
			        '#submit' => array('_im_agenda_node_submit'),
	  				'#validate' => array('im_agenda_form_validate'),
			    );
			}
			
			if($action_archive_access || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'national') || ($content_scope == 'regional' && in_array('content_manager_action_regional', $user->roles) && count($node_user_stores)>=1)){
				$form['actions']['archive'] = array (
		  			'#type' => 'submit',
		  			'#value' => t('Archiver'),
		  			'#access' => TRUE,
		  			'#weight' => 10,
		  			'#submit' => array('archive_submit'),
		  			'#validate' => array('im_agenda_form_validate'),
		  		);
			}			
		}    
		//Buttons to display for Archived contents
		if($node_status == 0 && $archived == 1){
			if($action_archive_draft_access || (in_array('content_manager_action_regional',$user->roles) && $content_scope == 'national') || ($content_scope == 'regional' && in_array('content_manager_action_regional', $user->roles) && count($node_user_stores)>=1)){
	  			$form['actions']['save_draft'] = array (
					'#type' => 'submit',
					'#value' => t('Save as Draft'),
					'#access' => TRUE,
					'#weight' => 6,
					'#submit' => array('save_as_draft_submit_action'),
	  				'#validate' => array('im_agenda_form_validate'),
				);
				$form['actions']['publish'] = array (
					'#type' => 'submit',
					'#value' => t('Save and publish'),
					'#access' => TRUE,
					'#weight' => 9,
					'#submit' => array('publish_submit'),
					'#validate' => array('im_agenda_form_validate'),
				);
  			}
  			if(in_array('administrator', $user->roles) || in_array('technical_director', $user->roles) || in_array('content_manager_action',$user->roles) || in_array('content_manager_action_regional',$user->roles)){
  				$delete_button_flag = TRUE;
  			}
		}		
		
	 	//Hide the Delete button
	 	if($delete_button_flag == FALSE){
	 		unset($form['actions']['delete']);
	 	}
	 	
  		if($archived == 1 && in_array('administrator',$user->roles)){
  			drupal_add_js('jQuery(document).ready(function () {jQuery("#edit-field-node-archive-und").attr("checked",false) });', 'inline');
  		}
	 }
	 return $form;
}

/**
 * Displaying workflow buttons for Operational Model content type
 */
	
function im_ageda_operational_model_workflow(&$form, &$form_state, $form_id){
	  global $user;
	  $om_publish_access = '';
	  $om_askpublication_access = '';
	  $om_draft_access = '';
	  $om_archive_draft_access = '';
	  $om_return_publication_access = '';
	  $om_archive_access = '';
	  $om_save_button_access = '';
	  $om_review_draft_access = '';
	  
	    //Assign roles to access workflow buttons
	  $om_save_button_access = in_array('content_manager_om',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	  $om_publish_access = in_array('content_manager_om',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	  $om_askpublication_access = in_array('contributor_om',$user->roles);
	  $om_draft_access = in_array('contributor_om',$user->roles);
	  $om_archive_draft_access = in_array('content_manager_om',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	  $om_return_publication_access = in_array('content_manager_om',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	  $om_archive_access = in_array('content_manager_om',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles);
	  $om_review_draft_access = in_array('content_manager_om',$user->roles);
	  
	  
	    //Add Content Form
	  if(!isset($form['nid']['#value'])){
	  	//Display the Save As Draft button
	  	if(user_access('save draft')) {
		  	$form['actions']['save_draft'] = array (
				'#type' => 'submit',
				'#value' => t('Save as Draft'),
				'#access' => TRUE,
				'#weight' => 6,
				'#submit' => array('save_as_draft_submit'),
		  		'#validate' => array('im_agenda_form_validate'),
			);
		}	  	
		if($om_askpublication_access){
			$form['actions']['ask_for_publication'] = array (
				'#type' => 'submit',
				'#value' => t('Save and ask for Publication'),
				'#access' => TRUE,
				'#weight' => 7,
				'#submit' => array('ask_for_publication_submit'),
				'#validate' => array('im_agenda_form_validate'),
			);
		}
		//Display the Publish button
		global $user;
		if($om_publish_access){		
			if(user_access('publish')){
				$form['actions']['publish'] = array (
					'#type' => 'submit',
					'#value' => t('Publish'),
					'#access' => TRUE,
					'#weight' => 9,
					'#submit' => array('publish_submit'),
			  		'#validate' => array('im_agenda_form_validate'),
				);
			}
		}
	  }
	  //Edit Content Form
	  else {
	  		global $user;
	  		$user_obj = user_load($user->uid); 
	  		$node_obj = node_load($form['nid']['#value']);
	  		if (isset($node_obj->workbench_moderation['current']->state)) {		 
			  $workbench_moderation_status = $node_obj->workbench_moderation['current']->state;
			}
			else {
			  if(empty($workbench_moderation_status)) {
			  	$workbench_moderation_status = '';
			  }	
			}
			$node_status = $node_obj->status;
			$archived = '';
			if (isset($node_obj->field_node_archive['und'][0]['value'])) {
			  $archived = $node_obj->field_node_archive['und'][0]['value'];
			}
			
			
	  		$expert_fullname = '';
	    	if (isset($user_obj->field_full_name['und'][0]['value'])) {
	    	  $expert_fullname = $user_obj->field_full_name['und'][0]['value'];
	    	}
	    	$expert_match = 0;
	    	if(!empty($node_obj->field_om_experts['und'])){
		    	foreach($node_obj->field_om_experts['und'] as $expert_name){	
			    	if(in_array($expert_fullname,$expert_name)){
			    		$expert_match = 1;
			    	}		    	
		    	}
	    	}
	    	$delete_button_flag = FALSE;
	    	
			//Display buttons for draft contents
			if($workbench_moderation_status == "draft" && $archived!=1 ) {
				//Display the Ask for Publication button
				if($om_askpublication_access || (in_array('expert',$user->roles) && ($expert_match == 1 || $node_obj->uid == $user->uid))){
			  		$form['actions']['ask_for_publication'] = array (
						'#type' => 'submit',
						'#value' => t('Save and ask for Publication'),
						'#access' => TRUE,
						'#weight' => 7,			  			
						'#submit' => array('ask_for_publication_submit'),
			  			'#validate' => array('im_agenda_form_validate'),
					);
					$delete_button_flag = TRUE;
		  		}
		  		
				//Display the Save button for Draft contents for administrator/Content Manager/Technical Director roles
		  		if($om_draft_access || (in_array('expert',$user->roles) && ($expert_match == 1 || $node_obj->uid == $user->uid))){
		  			$form['actions']['save'] = array (
				        '#type' => 'submit',
				        '#value' => t('Save'),
				        '#access' => TRUE,
				        '#weight' => 6,
		  				'#submit' => array('_im_agenda_node_submit'),
		  				'#validate' => array('im_agenda_form_validate'),
				    );
		  		}
		  		
				//Display the Save As Draft button until the node status is draft
			    if($om_publish_access && (($om_publish_access && $archived!=1))){
				  	$form['actions']['save_draft'] = array (
						'#type' => 'submit',
						'#value' => t('Save as Draft'),
						'#access' => TRUE,
						'#weight' => 7,
						'#submit' => array('save_as_draft_submit_action'),
				  		'#validate' => array('im_agenda_form_validate'),
					);
			    }
			    
				//Display the Save As Draft button even after content is published - only for the manager roles
				if($om_publish_access) {
					$form['actions']['save_draft'] = array (
				        '#type' => 'submit',
				        '#value' => t('Save as Draft'),
				        '#access' => TRUE,
				        '#weight' => 7,
				        '#submit' => array('save_as_draft_submit_action'),
						'#validate' => array('im_agenda_form_validate'),
				      );
				}
				if($om_publish_access){
					//Display the Publish button for manager/administrator role
					$form['actions']['publish'] = array (
						'#type' => 'submit',
						'#value' => t('Publish'),
						'#access' => TRUE,
						'#weight' => 9,						
						'#submit' => array('publish_submit'),
				  		'#validate' => array('im_agenda_form_validate'),
					);
				}
				
				if(in_array('administrator', $user->roles) || in_array('technical_director', $user->roles) || in_array('content_manager_om', $user->roles)){
					$delete_button_flag = TRUE;
				}
			}
			//Display buttons for Needs Review status contents					
			if($workbench_moderation_status == "needs_review"){				
				//Display Save button for Admin/Content manager/Expert
				if($om_save_button_access || (in_array('expert',$user->roles) && ($expert_match == 1 || $node_obj->uid == $user->uid))){
		  			$form['actions']['save'] = array (
				        '#type' => 'submit',
				        '#value' => t('Save'),
				        '#access' => TRUE,
				        '#weight' => 6,
		  				'#submit' => array('_im_agenda_node_submit'),
		  				'#validate' => array('im_agenda_form_validate'),
				    );
		  		}
		  		
		  		//Display Return Publication button for Admin/Content manager
				if(user_access('return publication')) {
			    	$nid = $node_obj->nid;
			    	$vid = $node_obj->vid;	    	
			    	$ctools_url = "admin/popup/nojs/node/".$nid."/moderation/".$vid."/change-state/draft";
			    	$form['actions']['return_publication'] = array (
						'#type' => 'item',
						'#markup' => ctools_modal_text_button(t('Return the Publication'), $ctools_url, t('Return the Publication'),  'ctools-modal-ctools-sample-style'),
						'#weight' => 7,
					);
			  	}
			  	
				//Display Save as Draft button for Content manager/Expert
		  		if((in_array('expert',$user->roles) && ($expert_match == 1 || $node_obj->uid == $user->uid))){
		  			$form['actions']['save_draft'] = array (
			        '#type' => 'submit',
			        '#value' => t('Save as Draft'),
			        '#access' => TRUE,
			        '#weight' => 7,
			        '#submit' => array('save_as_draft_submit_action'),
					'#validate' => array('im_agenda_form_validate'),
			      );
		  		}
		  		
		  		if($om_publish_access){
		  			$form['actions']['publish'] = array (
						'#type' => 'submit',
						'#value' => t('Publish'),
						'#access' => TRUE,
						'#weight' => 9,						
						'#submit' => array('publish_submit'),
				  		'#validate' => array('im_agenda_form_validate'),
					);
		  		}
		  		
		  		if(in_array('expert',$user->roles) && ($expert_match == 1 || $node_obj->uid == $user->uid)){
		  			$delete_button_flag = TRUE;
		  		}
			}
			
			//Buttons to display for Published contents
			if($node_status == 1 && $workbench_moderation_status == "published"){
				//Display Archive button for Admin/Manager
				if($om_archive_access){
					$form['actions']['archive'] = array (
			  			'#type' => 'submit',
			  			'#value' => t('Archiver'),
			  			'#access' => TRUE,
			  			'#weight' => 10,
			  			'#submit' => array('archive_submit'),
			  			'#validate' => array('im_agenda_form_validate'),
			  		);
				}
				
				//Display the Save button for Published contents for administrator/Content Manager/Technical Director roles
		  		if(in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || in_array('content_manager_om',$user->roles)){
		  			$form['actions']['save'] = array (
				        '#type' => 'submit',
				        '#value' => t('Publish modification (Save)'),
				        '#access' => TRUE,
				        '#weight' => 6,
				        '#submit' => array('_im_agenda_node_submit'),
		  				'#validate' => array('im_agenda_form_validate'),
				    );
				    if(!in_array('content_manager_om',$user->roles)){
				    	$delete_button_flag = TRUE;
				    }
		  		}
			}
			//Buttons to display for Archived contents
			if(($node_status == 0 || $node_status == 1) && $archived == 1){
				if(in_array('administrator',$user->roles) || in_array('technical_director',$user->roles)){
		  			$form['actions']['save'] = array (
				        '#type' => 'submit',
				        '#value' => t('Save'),
				        '#access' => TRUE,
				        '#weight' => 6,
				        '#submit' => array('_im_agenda_node_submit'),
		  				'#validate' => array('im_agenda_form_validate'),
				    );
				    $delete_button_flag = TRUE;
		  		}
			}
			
	  		//Display the Create New version button
	  		$node_parent_id = _im_features_om_get_parent_node($form['nid']['#value']);
	  		if((($node_status == 1 && $workbench_moderation_status == "published") && empty($node_parent_id) && user_access('create new version')) || ($node_status == 0 && $archived == 1 && empty($node_parent_id) && user_access('create new version'))){
		  		$form['actions']['new_version'] = array (
		  			'#type' => 'submit',
		  			'#value' => t('Create new version'),
		  			'#access' => TRUE,
		  			'#weight' => 10,
		  			'#submit' => array('im_features_om_create_new_version'),
		  		);
	  		}
	  		
	  		//Hide the Delete button
			if($delete_button_flag == FALSE){
				unset($form['actions']['delete']);
			}
	  		if($archived == 1 && in_array('administrator',$user->roles)){
	  			drupal_add_js('jQuery(document).ready(function () {jQuery("#edit-field-node-archive-und").attr("checked",false) });', 'inline');
	  		}
	  	}
	  return $form;
}

/**
 * Function to trigger mail to Regional Content manager. 
 */

function _im_agenda_duplication_content_email($user_id,$node_id,$node_title) {
  //mail id of content manager regional
  $uids = array();
  $users = array();
  $select_options = array();
  $role_obj = user_role_load_by_name('content_manager_action');
  //If mail needs to be send to  content manager action national
  $module = 'im_agenda';
  $key = 'action_mail_duplication';
  $language = language_default();
  $params = array();
  $params['title'] = '';
  $params['comment'] = '';
  $params['nid'] = '';
   $params['node_date'] = '';
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $send = TRUE;
  if ($user_id == 'national') {
  	$results = db_query("SELECT u.uid, 
                    u.mail 
             FROM {users} u, 
                  {role} r,
                  {users_roles} ur
             WHERE r.rid = ur.rid
             AND u.uid = ur.uid
             AND r.name = 'content_manager_action'");
  	$national_emails = '';
  	foreach ($results as $result) {
  		$national_emails .= $result->mail . ';';
  	}
    if($national_emails) {
      $params['account'] = ''; 
      $content_details = '';
      // foreach($node_ids as $ukey=>$node_title){
      if (!empty($node_title)) {
        $content_details = url('node/' . $node_id, array('absolute' => TRUE));
      }
      $params['list'] = $content_details;
      $message = drupal_mail($module, $key, $national_emails, $language, $params, $from, $send);
      if (!$message['result']) {
        watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);
        drupal_set_message(t('Unable to send e-mail. Contact the site administrator if the problem persists.'), 'error');
      }
      else{
        if ($_SESSION['email_status'] == TRUE) { 
            drupal_set_message(t("Email send to content managers"));
            $_SESSION['email_status'] = FALSE;
        }
      }
    }
  }
  else{
  	//Regional Moderator
  	if ($user_id) {
  		$userObj = user_load($user_id);
	  	if($userObj->mail) {
	  		$params['account'] = ''; 
	      $content_details = '';
	      // foreach($node_ids as $ukey=>$node_title){
	      if (!empty($node_title)) {
	        $content_details = url('node/' . $node_id, array('absolute' => TRUE));
	      }
	      $params['list'] = $content_details;
	      $message = drupal_mail($module, $key, $userObj->mail, $language, $params, $from, $send);
	      if (!$message['result']) {
	        watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);
	        drupal_set_message(t('Unable to send e-mail. Contact the site administrator if the problem persists.'), 'error');
	      }
	      else{
	        if ($_SESSION['email_status'] == TRUE) { 
	          drupal_set_message(t("Email send to content managers."));
	          $_SESSION['email_status'] = FALSE;
	        }
	      }
  		}
  	}
  }
}


/**
 * Add additional content on Ajax callback of plus.
 */
function _im_agenda_add_additional_content() {
  if (!empty($_POST['start_date']) && !empty($_POST['store']) &&!empty($_POST['department']) && !empty($_POST['type']) && !empty($_POST['type']) == 'full') {
    $output .= im_agenda_load_contents($_POST['start_date'],$_POST['start_date'],$_POST['store'],$_POST['department'],'maximized', TRUE);   
    print $output;
  }
}

/**
 * Remove additional content on Ajax callback of minus.
 */
function _im_agenda_remove_additional_content() {
  if (!empty($_POST['start_date']) && !empty($_POST['store']) &&!empty($_POST['department']) && !empty($_POST['type']) && $_POST['type'] == 'less') {  	
    $output = im_agenda_load_contents($_POST['start_date'],$_POST['start_date'],$_POST['store'],$_POST['department'],'minimized', TRUE);
    print $output;
  }
}

/**
 * Implementation of agenda_autosave_save
 * This is a overridden function of auto save module to handle the auto save for the store preffered form nid.
 */

function agenda_autosave_save() {
   global $user;  
   list($form, $form_state) = ajax_get_form();
   $path = $form_state['input']['autosave_form_path'];
   $form_id = $form_state['input']['form_id'];
   // To Append the Store preference Node Id:
  if ($form_id == 'action_node_form' || $form_id == 'alert_node_form' || $form_id == 'news_node_form' || $form_id == 'benchmark_node_form') {
	  if (isset($_SESSION['selected_store_preference_nid'])) {	  	
	  	$form_state['field_agenda_preference_nid']['und'][0]['value'] = $_SESSION['selected_store_preference_nid'];
	  }
  } 
   $serialized = serialize($form_state);   
  // check if node has just been saved - if it has then it's because AS ajax fired off as user was submitting
  // if it had just been submitted - no need to AS now
  //    - easy to figure out if we are submitting an edit to existing node
  //    - little harder if we have just added a node
  $path_args = explode("/", $path);
  // update case
  if (is_numeric($path_args[1])) {
    $submitted = node_load($path_args[1]);
  }
  else {
    // add case
    $submitted = db_query_range("SELECT created AS changed FROM {node} WHERE uid = :uid and type = :type ORDER BY created DESC", 0, 1, array(
      ':uid' => $user->uid,
      ':type' => str_replace("-", "_", $path_args[2])))->fetchObject();
  }

  if (!$submitted || (REQUEST_TIME - $submitted->changed) > 10) {
    // Currently, each user can have only one autosave form at a particular path.
    db_merge('autosaved_forms')->key(array(
      'form_id' => $form_id,
      'path' => $path,
      'uid' => $user->uid,
    ))
    ->fields(array(
      'timestamp' => REQUEST_TIME,
      'serialized' => $serialized,
    ))
    ->execute();
  }
  exit();
}
function im_agenda_message_popup_settings() {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');  
  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  // Create our own javascript that will be used to theme a modal.
  $sample_style = array(
    'ctools-sample-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 200,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'IntranetPopup',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );

  drupal_add_js($sample_style, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
  ctools_add_css('ctools-ajax-sample', 'ctools_ajax_sample');
}

