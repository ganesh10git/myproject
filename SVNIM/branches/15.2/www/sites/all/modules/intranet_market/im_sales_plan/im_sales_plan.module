<?php

/*
 * Implementation of hook_menu
 */
function im_sales_plan_menu(){
  $items = array();
  $items['calender_field_validation/%'] = array(
    'title' => 'Calender field validation in holiday content type',
    'page callback' => '_im_sales_plan_calender_validation',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  //sales-plan/year-now/tid
/*  $items['sales-plan/%/%'] = array(
    'page callback' => 'im_sales_plan_page',
    'file' => 'includes/im_sales_plan_page.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,  
    'weight' => 1,
  );*/
  $items['sales-plan-replace'] = array(
    'page callback' => 'im_sales_plan_page_replace_content',
    'file' => 'includes/im_sales_plan_page.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,  
    'weight' => 1,
  );
  $items['sales-plan/ajax'] = array(
    'page callback' => 'im_sales_plan_page',
    'file' => 'includes/im_sales_plan_page.inc',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,  
    'weight' => 1,
  );
  $items['admin/im/sales_plan_settings'] = array(
    'title' => t('IM Sales Plan Settings'),
    'description' => 'Configure Sales plan categories.',
    'page callback' => 'drupal_get_form',
    'file' => 'im_sales_plan.admin.inc',
    'access callback' => '_im_sales_plan_settings_access',
    'page arguments' => array('im_sales_plan_admin_form'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Custom Function.
 * Access permissions to im/sales_plan_settings page.
 * 
 */
function _im_sales_plan_settings_access(){
  global $user;

  if(in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) || $user->uid == 1){
    return TRUE;
  }
}

function im_sales_plan_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'holiday_node_form') {
    $form['#attached']['css'][] = drupal_get_path('module', 'im_sales_plan') . '/css/im_sales_plan.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'im_sales_plan') . '/js/im_sales_plan_holiday_bo.js';
      /*drupal_add_js(drupal_get_path('module', 'im_sales_plan') . '/js/im_sales_plan_holiday_bo.js');
      drupal_add_css(drupal_get_path('module', 'im_sales_plan') . '/css/im_sales_plan.css');*/
      $form['field_holiday_calender_year'] =  array(
        '#title' => t('Calender year'),
        '#type' => 'textfield',
        '#size' => 15,
        '#default_value' => '',
        '#required' => TRUE,
      );
      if((arg(2) =='edit' || is_numeric(arg(1)))){
        $node_data = node_load(arg(1));
        $form['field_holiday_calender_year']['#default_value']= $node_data->title;
      }
      //removed title form holiday content type.
      $form['title']['#required'] = 0;
      $form['title']['#attributes']['style'] = 'display:none';
      $form['title']['#title'] = '';
      //field_holiday_period_des_vaccanc[und][0][field_holiday_zone_a][und][0][value][date]
      if(isset($form['field_holiday_period_des_vaccanc']['und'][0]['field_holiday_type']['und'][0]['value']['#title'])) {
      	
      foreach ($form['field_holiday_period_des_vaccanc']['und'] as $field_index => $holiday_fields) {
        //Removes Title
        if(isset($form['field_holiday_period_des_vaccanc']['und'][(int)$field_index]['field_holiday_type']['und'][0]['value']['#title'])) {
          unset($form['field_holiday_period_des_vaccanc']['und'][(int)$field_index]['field_holiday_type']['und'][0]['value']['#title']); 
        } 
        //Keep Single Zone Title
        if(isset($form['field_holiday_period_des_vaccanc']['und'][(int)$field_index]['field_holiday_zone_a']['und'][0]['#title'])) {
          if($field_index){
            $form['field_holiday_period_des_vaccanc']['und'][(int)$field_index]['field_holiday_zone_a']['und'][0]['#title'] = '';
            $form['field_holiday_period_des_vaccanc']['und'][(int)$field_index]['field_holiday_zone_b']['und'][0]['#title'] = '';
            $form['field_holiday_period_des_vaccanc']['und'][(int)$field_index]['field_holiday_zone_c']['und'][0]['#title'] = '';
          }
        }
      }
    }
    if(isset($form['field_holiday_jours_sp_ciaux']['und'][0]['field_holiday_special_day']['und'][0]['#title'])) {
      foreach ($form['field_holiday_jours_sp_ciaux']['und'] as $field_index => $holiday_special) {
        $form['field_holiday_jours_sp_ciaux']['und'][(int)$field_index]['field_holiday_special_day']['und'][0]['#title'] = '';
      }
    }
    if(isset($form['field_holiday_jours_sp_ciaux']['und'][0]['field_holiday_special_name']['und'][0]['value']['#title'])) {
        foreach ($form['field_holiday_jours_sp_ciaux']['und'] as $field_index => $holiday_special) {
        unset($form['field_holiday_jours_sp_ciaux']['und'][(int)$field_index]['field_holiday_special_name']['und'][0]['value']['#title']);
        unset($form['field_holiday_jours_sp_ciaux']['und'][(int)$field_index]['field_holiday_special_name']['und'][0]['#title']);
      }
    }
    foreach ($form['field_holiday_period_des_vaccanc']['und'] as $index => $item) {
    	$form['field_holiday_period_des_vaccanc']['und'][(int)$index]['remove_button']['#value'] = 'X';
    	$form['field_holiday_period_des_vaccanc']['und'][(int)$index]['remove_button']['#attributes'] = array('class' => array('remove-holiday'));
    }
    $form['field_holiday_period_des_vaccanc']['und']['add_more']['#value'] = '+';
    $form['field_holiday_period_des_vaccanc']['und']['add_more']['#attributes']['class'][] = 'add-holiday';
    	
    foreach ($form['field_holiday_jours_sp_ciaux']['und'] as $index => $item) {
    	$form['field_holiday_jours_sp_ciaux']['und'][(int)$index]['remove_button']['#value'] = 'X';
    	$form['field_holiday_jours_sp_ciaux']['und'][(int)$index]['remove_button']['#attributes'] = array('class' => array('remove-special-holiday'));
    }
    $form['field_holiday_jours_sp_ciaux']['und']['add_more']['#value'] = '+';
    $form['field_holiday_jours_sp_ciaux']['und']['add_more']['#attributes']['class'][] = 'add-special-holiday';
    
    
    $form['field_holiday_period_des_vaccanc']['und'][0]['#post_render'] = array('_im_sales_plan_field_collection_render');
    $form['field_node_archive']['#attributes']['style'] = 'display:none';    
  }
  if($form_id == 'sales_plan_node_form'){
    $form['options']['#access'] = 0;
  	global $user;
  	$form['field_sp_regions']['und']['#title']= t('Regions'). " ". theme('form_required_marker');
  	$author_name = $form['#node']->name;
  	$status = '';
  if(isset($form['#node']->nid)){
    $author = _im_user_get_data($form['#node']->uid);
    $status = im_sales_plan_node_status($form['#node']->nid);
    $default_name = $author['full_name'];
    $created_time = date('d/m/Y', $form['#node']->created);
    $modified_time = date('d/m/Y', $form['#node']->changed);
  }else{
    $author = _im_user_get_data($user->uid);
    $default_name = $author['full_name'];
    $created_time = date('d/m/Y');
    $modified_time = date('d/m/Y');
  }
  if($default_name==NULL) {
  	$default_name = 'Anonymous';
  }
  $form['sp_created_by'] = array(
    '#type' => 'item',
    '#title' => t('Created by'),
    '#markup' => $default_name,
    '#weight' => -5,
  );
  $form['sp_created_date'] = array(
    '#type' => 'item',
    '#title' => t('Created Date'),
    '#markup' => $created_time,
    '#weight' => -5,
  );
  $form['sp_status'] = array(
    '#type' => 'item',
    '#title' => t('Status'),
    '#markup' => t($status),
    '#weight' => -5,
  );
  $form['sp_last_modified_date'] = array(
    '#type' => 'item',
    '#title' => t('Last Modification Date'),
    '#markup' => $modified_time,
    '#weight' => -5,
  );
  $form['field_sp_order_period']['und']['#suffix'] = '<b>'. t('Documents to destination stores').'</b>';
  drupal_add_js(drupal_get_path('module', 'im_sales_plan') . '/js/im_sales_plan_contenttype.js');
  $form['field_node_archive']['#attributes']['style'] = 'display:none';
  $form['field_draft_status']['#attributes']['style'] = 'display:none';
  if(!isset($form['nid']['#value'])){
    global $user;
      //Display the Save As Draft button
      if(user_access('save draft')) {
        $form['actions']['save_draft'] = array (
          '#type' => 'submit',
          '#value' => t('Save as Draft'),
          '#access' => TRUE,
          '#weight' => 6,
          '#submit' => array('save_as_draft_submit'),
        );
      }
 	  //Display the Publish button for action content type and manager/administrator role
	  if(user_access('publish') && (in_array('contributor_sales_plan',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles))) {
	  	$form['actions']['publish'] = array (
			'#type' => 'submit',
			'#value' => t('Publish'),
			'#access' => TRUE,
			'#weight' => 9,
			'#submit' => array('publish_submit'),
		);
	  }
	  //Hide the Save button
      unset($form['actions']['submit']);
  }
  //Display save As draft, archive button and delete button
  if(arg(2)== 'edit'){
    $form['options']['status']['#default_value'] = 1;
    $nid = $form['nid']['#value'];
    $node = node_load($nid);
    global $user;
    $delete_button_flag = FALSE;
    
    //save draft button.in draft edit page
    if ((user_access('save draft') && $node->status == 0 && $node->field_node_archive['und'][0]['value'] == 0)) {
      $form['actions']['save_draft'] = array (
        '#type' => 'submit',
        '#value' => t('Save as Draft'),
        '#access' => TRUE,
        '#weight' => 6,
        '#submit' => array('save_as_draft_submit'),
      );
      //Display the Publish button for sales plan contributor/administrator/technical role
	  if(user_access('publish') && (in_array('contributor_sales_plan',$user->roles) || in_array('administrator',$user->roles) || in_array('technical_director',$user->roles))) {
		  	$form['actions']['publish'] = array (
				'#type' => 'submit',
				'#value' => t('Publish'),
				'#access' => TRUE,
				'#weight' => 9,
				'#submit' => array('publish_submit'),
			);
		}
		$delete_button_flag = TRUE;
    }
    //save draft button in archive edit page
    if ($node->field_node_archive['und'][0]['value'] == 1 && 
      (in_array('administrator',$user->roles) || in_array('technical_director',$user->roles) && !in_array('contributor_sales_plan',$user->roles)) && $node->status == 0) {
      $form['actions']['save_draft'] = array (
        '#type' => 'submit',
        '#value' => t('Save as Draft'),
        '#access' => TRUE,
        '#weight' => 6,
        '#submit' => array('save_as_draft_submit'),
      );
      $form['actions']['submit']['#value'] = t('Save and Publish');
      //Fix for UATIM - 719. Commented the below line and made delete button flag 'FALSE'
      //$form['actions']['delete']['#attributes']['style'] = 'display:none';
      $delete_button_flag = FALSE;
    }
    //Display the publish button for archived content to admin role
	if($node->status == 0 && $node->field_node_archive['und'][0]['value'] == 1 && (in_array('administrator',$user->roles) || in_array('technical_director',$user->roles))){
		$form['actions']['publish'] = array (
			'#type' => 'submit',
			'#value' => t('Save and publish'),
			'#access' => TRUE,
			'#weight' => 7,
			'#submit' => array('publish_submit'),
		);
	}  
  //archive button in edit page of Published content for admin
    if ($node->status == 1) {
		if(user_access('archive')){
	      $form['actions']['archive'] = array (
	        '#type' => 'submit',
	        '#value' => t('Archive'),
	        '#access' => TRUE,
	        '#weight' => 10,
	        '#submit' => array('archive_submit'),
	      );
    	}
       
    	//Display the Save button for published contents for administrator/Content Manager/Technical Director roles
  		$form['actions']['save'] = array (
	        '#type' => 'submit',
	        '#value' => t('Publish modification (Save)'),
	        '#access' => TRUE,
	        '#weight' => 6,
	        '#submit' => array('_im_agenda_node_submit'),
  			'#validate' => array('im_agenda_form_validate'),
	    );
	    if(in_array('contributor_sales_plan',$user->roles)){
	    	$delete_button_flag = TRUE;
	    }
    }
  	//Display the Delete button  	
  	if($node->status == 0 && $node->field_node_archive['und'][0]['value'] == 1){
  		if(in_array('administrator',$user->roles)) {
  			$delete_button_flag = TRUE;
  		}
  		else {
  	      $delete_button_flag = FALSE;
  		}  		
  	}
  	
  	if($delete_button_flag == FALSE){
  		unset($form['actions']['delete']);
  	}
  //removing the node_archive checkbox 
    if (in_array('administrator',$user->roles) && $node->field_node_archive['und'][0]['value'] == 1){
      drupal_add_js('jQuery(document).ready(function () {jQuery("#edit-field-node-archive-und").attr("checked",false) });', 'inline');
    }
    //Hide the Save button
    unset($form['actions']['submit']);
  }
  
  }
  //Region code
  //Region code taxo field value is obtained from db.
  if($form_id == 'taxonomy_form_term'){
    $form['#validated'] = TRUE;
  $form['field_taxo_sp_region_code']['und']['#options'] =  _im_sales_plan_get_taxonomy_tid();
  if(arg(3) == 'edit') {
    $term = taxonomy_term_load(arg(2));
    $tid = isset($term->field_taxo_sp_region_code['und'][0]['value']) ? $term->field_taxo_sp_region_code['und'][0]['value'] : 0;
    $form['field_taxo_sp_region_code']['und']['#default_value'] = $tid;
  }
  }
}

function _im_sales_plan_field_collection_render(&$element) {
	$element = '<div class="im-holiday-zone-title"><span><h4 class="zone-a">Zone A</h4></span><span><h4 class="zone-b">Zone B</h4></span><span><h4 class="zone-c">Zone C</h4></span></div>' . $element;
	return $element;
}
/**
* Implements hook_date_combo_process_alter().
*/
function im_sales_plan_date_combo_process_alter(&$element, $form_state, $context) {
  if (in_array($element['#field_name'], array('field_holiday_zone_a', 'field_holiday_zone_b', 'field_holiday_zone_c'))) {
  	$element['value']['#date_title'] = 'DU';
    $element['value2']['#date_title'] = 'AU';
    $element['value2']['#title'] = '';
    $element['value']['#datepicker_options'] =array(
      'showOn' => 'button',
      'buttonImage' => base_path() .drupal_get_path('theme','im').'/css/images/calender.png',
      'buttonImageOnly' => true,
     );
     $element['value2']['#datepicker_options'] =array(
      'showOn' => 'button',
      'buttonImage' =>base_path() .drupal_get_path('theme','im').'/css/images/calender.png',
      'buttonImageOnly' => true,
     );
  }
  if (in_array($element['#field_name'], array('field_sp_operation_period','field_sp_order_period'))) {
    $element['value']['#title'] = 'From';
    $element['value2']['#title'] = 'To';
  }
if (in_array($element['#field_name'], array('field_holiday_special_day'))) {
    $element['value']['#datepicker_options'] =array(
      'showOn' => 'button',
      'buttonImage' => base_path() .drupal_get_path('theme','im').'/css/images/calender.png',
      'buttonImageOnly' => true,
     );
  }
if (in_array($element['#field_name'], array('field_holiday_special_day'))) {
    $element['value']['#datepicker_options'] =array(
      'showOn' => 'button',
      'buttonImage' => base_path() .drupal_get_path('theme','im').'/css/images/calender.png',
      'buttonImageOnly' => true,
     );
  }
}

//calender field validation function
function _im_sales_plan_calender_validation(){
if(isset($_POST['data'])){
    $title = $_POST['data'];
    $query = db_select('node', 'n')
           ->fields('n', array('type','nid','title'))
           ->condition('n.title', $title, '=')
           ->condition('n.type', 'holiday', '=')
           ->execute()->fetchAssoc();
   if(!empty($query)){
     $node_id = $query['nid'];
     print $node_id;
   }
  }
}
/*
 * Implementation of hook_theme
 */
function im_sales_plan_theme($existing, $type, $theme, $path) {
  return array(
    'holiday_node_form' => array(
      'arguments' => array('form' => null),
      'path' => drupal_get_path('module', 'im_sales_plan').'/theme/',
      'template' => 'holiday--node-form', //name of your template file
      'render element' => 'form'
    ),
    'im_sales_plan_calendar_template' =>  array(
	    'template' => 'theme/im_sales_plan_calendar_template'
	   ),
	  'sales_plan_content_template' =>  array(
      'template' => 'theme/sales_plan_content_template'
    ),
  );
}
function _im_sales_plan_get_taxonomy_tid(){
 $value = 'region-commerciale';
    $options = db_select('store_item_fields','s')
              ->fields('s',array('ite_lib_value'))
              ->distinct()
              ->condition('s.dit_cod_item',$value, '=')
              ->execute();
    $option = array();
    $option[] = t('Select');
    while($record = $options->fetchfield()) {
      $option[] = $record;
    }
    return $option;
}
//region taxonomy is populated in sales plan landing page for the region dropdown
function _im_sales_plan_get_taxonomy_region(){
  $vid = taxonomy_vocabulary_machine_name_load('regions');
  $taxo_tree = taxonomy_get_tree($vid->vid);
  $options = array();
  foreach($taxo_tree as $terms){
  	$options['all'] = t('All business areas');
    $options[$terms->tid] =  $terms->name;
  }
  return $options;
}

/*
 * sales plan header part
 */
function im_sales_plan_navigation_form($form,&$form_state){
	drupal_add_js(drupal_get_path('module', 'im_sales_plan') . '/js/im_sales_plan.js');
	global $base_url;
	if(arg(1) && arg(0)== 'sales-plan'){
	  if(arg(1) == 'now'){
	    $node_title = date('Y');
	  }
	  else {
	    $node_title = arg(1); 
	  }
	}

	$node = node_load_multiple(array(),array('title' => $node_title,'type' => 'holiday'));
	$node = array_values($node);
  //$pos_download_link = isset($node[0]->field_holiday_pos_file['und'][0]['uri']) ?  urldecode(file_create_url($node[0]->field_holiday_pos_file['und'][0]['uri'])) : '';
  $pos_download_link = isset($node[0]->field_holiday_pos_file['und'][0]['uri']) ?  file_create_url($node[0]->field_holiday_pos_file['und'][0]['uri']) : '';
  $pos_filename = isset($node[0]->field_holiday_pos_file['und'][0]['filename']) ? $node[0]->field_holiday_pos_file['und'][0]['filename'] : '';  
  if(!is_numeric(arg(1)) && arg(1) == 'now' ){
    $year = date('Y')-1;
  	$value ='YEAR N-1';
  }
  else {
    $year = date('Y');
    $value ='YEAR N';
  }
  /* if(!is_numeric(arg(1)) && arg(1) == 'now') {
     if(date('Y',strtotime($_SESSION['date-begun'])) == date('Y')-1){
   	  $year = date('Y');
   	}   	
   	//if URL is current year and Calender year is next year
   	else if(date('Y',strtotime($_SESSION['date-begun'])) == date('Y')+ 1){
   	  $year = date('Y')+1;
   	}else if(date('Y',strtotime($_SESSION['date-begun'])) == date('Y')){
   	  $year = date('Y')-1;
   	}else{
   	$year = date('Y')-1;
   	}
     //$year = date('Y')-1;
   }
   elseif(is_numeric(arg(1))){
   	if(date('Y',strtotime($_SESSION['date-begun'])) == date('Y')-1 && arg(1) != date('Y') || arg(1) == date('Y')-1   ){
   	  $year = date('Y');
   	}   	//if URL is current year and Calender year is next year
   	else if(date('Y',strtotime($_SESSION['date-begun'])) == date('Y')+ 1 && arg(1) != date('Y')  || arg(1) == date('Y')+1){
   	  $year = date('Y')+1;
   	}else if(date('Y',strtotime($_SESSION['date-begun'])) == date('Y')  || arg(1) == date('Y')){
   	  $year = date('Y')-1;
   	}else{
   	$year = arg(1)-1;
   	}
   }*/
  $yr_nav = '';
  
   if(isset($_GET['yr_nav']) && $_GET['yr_nav']== 'cy'){
  	$yr_nav = 'py';
  	if(is_numeric(arg(1))){
  	  $year = arg(1)-1;
  	}else{
  	  $year = date('Y')-1;
  	}
  }
  else if(isset($_GET['yr_nav']) && $_GET['yr_nav']== 'py'){
  	$yr_nav = 'cy';
    if(is_numeric(arg(1))){
  	  $year = date('Y');
  	}else{
  	  $year = date('Y');
  	}
  }else{
  	$yr_nav = 'py';
  	$year = date('Y')-1;
  }
  if(is_numeric(arg(3)) && arg(3) != ''){
    $week_no = arg(3);
  }else{
    $week_no = date('W');
  }
  if(!is_numeric(arg(1)) && arg(1) == 'now' ){
    $year = date('Y')-1;
  	//$value ='YEAR N-1';
  }
  $session_year = date('Y',strtotime($_SESSION['date-begun']));
  $session_week = date('W',strtotime($_SESSION['date-begun']));
  if(isset($session_week)){
  	$week_no = $session_week;
  }
  if(isset($session_year) && isset($_GET['yr_nav']) && $_GET['yr_nav']== 'cy'){
  	if($session_year < date('Y')-1){
      $year = date('Y');
  	}
    if($session_year > date('Y')+1){
      $year = date('Y');
  	}else{
  	  $year = date('Y')-1;
  	}
  }
  else if(isset($session_year) && isset($_GET['yr_nav']) &&  $_GET['yr_nav']== 'py'){
   if($session_year < date('Y')-1){
      $year = date('Y');
  	}
    if($session_year > date('Y')+1){
      $year = date('Y');
  	}else{
  	  $year = date('Y');
  	}
  }elseif(isset($session_year)){
    if($session_year < date('Y')-1 || $session_year == date('Y')-1){
      $year = date('Y');
  	}
    if($session_year > date('Y')+1 || $session_year == date('Y')+1){
      $year = date('Y');
  	}else{
  	  $year = date('Y')-1;
  	}
  }else{
    $year = date('Y')-1;
  }
  $form = array();
  $yr_options = array('attributes' => array('class' => 'sp_year_link', 'html' => TRUE), 'query' => array('yr_nav' => $yr_nav));
  //$yr_options = array('attributes' => array('class' => 'sp_year_link'));
    $year_nav_url = 'sales-plan/' . $year.'/'.arg(2).'/'.$week_no;
    $form['sp_year'] = array(
    '#type' => 'markup',
    '#markup' => l(t($value),$year_nav_url,$yr_options),
  );
  $default_region = (arg(2) == 'all') ? t(arg(2)) : arg(2);
  $form['sp_nothern_region'] = array(
    '#type' => 'select',
    '#default_value' => $default_region,
    '#options' =>_im_sales_plan_get_taxonomy_region(),
  );
  if($pos_download_link) {
    $form['sp_pos_field'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="/check_file_access/'. $node[0]->field_holiday_pos_file['und'][0]['fid'].'" onclick="return xt_click(this, \'C\',\'1\',\'download::'.t(sales_plan_page).'::'.str_replace(" ","_",rawurlencode(rawurldecode($pos_filename))).'\',\'A\')">'.$pos_filename.'</a>',
    
    	'#prefix' => '<div class = "sp-header-file-download-link">',
    	'#suffix' => '</div>',  
    );
  }
  $form['sp_special_days'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class= "sp-color-identifiers"><div class = "sp-special-day-id">',
    '#markup' => t('Special days'),
    '#suffix' => '</div>',  
  );
  $form['sp_past_days'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class = "sp-past-day-id">',
    '#markup' => t('Past'),
    '#suffix' => '</div>',  
  );
  $form['sp_ongoing_days'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class = "sp-ongoing-day-id">',
    '#markup' => t('Ongoing'),
    '#suffix' => '</div>',  
  );
  $form['sp_future_days'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class = "sp-future-day-id">',
    '#markup' => t('Future'),
    '#suffix' => '</div></div>',  
  );
  return $form;
}
//hook_node_validate
function im_sales_plan_node_validate($node, $form, &$form_state){
  if ($node->type == 'sales_plan') {
    drupal_add_js(drupal_get_path('module', 'im_sales_plan') . '/js/im_sales_plan_contenttype.js');
    if (isset($form_state['values']['field_sp_type']['und'][0]['value'])) {
      if ($form_state['values']['field_sp_type']['und'][0]['value'] == "regionale"){
        if (empty($form_state['values']['field_sp_regions']['und'][0]['tid'])){
          $region_field = $form_state['values']['field_sp_regions'];
          form_set_error('field_sp_regions', t('Region field is not selected'));
        }
      }
    }
  }
}
//hook_node_submit 
function im_sales_plan_node_submit($node, $form, &$form_state){
  if($node->type == 'holiday'){
    $title = $node->title;
    $query = db_select('node', 'n')
           ->fields('n', array('title'))
           ->condition('n.title', $title, '=')
           ->condition('n.type', 'holiday', '=')
            ->execute()->fetchfield();
            drupal_set_message($query);
    if(empty($query)){
    	$node->nid ='';
    	$node->vid ='';
      node_save($node);
      drupal_goto('node/'.$node->nid);
    }
  }
}

//hook_image_default_styles
function im_sales_plan_image_default_styles() {
$styles = array();

  $styles['im_sales_plan_content_image'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => '125' , 'height' => '150', 'upscale' => false),
        'weight' => 0,
      ),
    )
  );
  return $styles;
}

//function to retrieve status of node
function im_sales_plan_node_status($nid){
	$status_text = '';
	if($nid){
		$node_details = node_load($nid);
		if($node_details){
		  $status = $node_details->status;
		  if(isset($node_details->field_node_archive)){
		    if ($status == 0 && $node_details->field_node_archive['und'][0]['value'] == 1) {
		      $status_text = 'Archived';
		    }
		    elseif ($status == 0 && $node_details->field_node_archive['und'][0]['value'] == 0) {
		      $status_text = 'Draft';
		    }
		  }
		  if($status == 1){
		  	$status_text = 'Published';
		  }
		}
	}
	return $status_text;
}

function _im_sales_plan_padzero($num){
return sprintf("%02s", $num);
}