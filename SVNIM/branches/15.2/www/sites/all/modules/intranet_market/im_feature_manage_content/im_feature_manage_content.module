<?php
/**
 * @file
 * Code for the Im Feature Manage Content feature.
 */

include_once 'im_feature_manage_content.features.inc';

/**
* Implements hook_form_views_exposed_form_alter.
*/
function im_feature_manage_content_form_views_exposed_form_alter(&$form, &$form_state) {	
	//form alter for manage operational model view
  if($form['#id'] == 'views-exposed-form-manage-messages-page') {
    $form['field_publication_from_date_value']['value']['#date_format'] = 'd/m/Y';
   }
  if ($form['#id'] == 'views-exposed-form-sales-plan-management-page') {
    $form['field_sp_operation_period_value']['value']['#date_format'] = 'd/m/Y';
    $form['field_sp_operation_period_value2']['value']['#date_format'] = 'd/m/Y';
  }
  if($form['#id'] == 'views-exposed-form-manage-operational-model-page' && $form['#form_id'] == 'views_exposed_form'){
  	include_once drupal_get_path('module', 'im_features_om') . '/im_features_om.module';
  	$domain_value = array();
  	$domain_value= _im_get_domain_terms();
  	$domain_values['All']= t('- Tous -');
  	foreach($domain_value as $key=>$value){
      $domain_values[$key] = $value;
  	}
    $form['field_om_domain_tid']['#options'] = $domain_values;
    $taxo_subdomain = _im_get_subdomain_terms();
    $form['field_om_subdomain_tid']['#options'] = $taxo_subdomain;
    $taxo_macro = _im_get_macro_terms();
    $form['field_om_macro_activity_tid']['#options'] =  $taxo_macro;
    
    $form['state']['#options'] = array(
	  	'All' => t('- Tous -'),
	  	'draft' => t('Drafts'),
	  	'needs_review' => t('Needs Review'),
	  	'published' => t('Published'),
	  	'archive' => t('Archive'),
	  );
	  
	  $form['field_om_location_tid']['#weight'] = 0;
	  $form['field_om_domain_tid']['#weight'] = 1;
	  $form['field_om_subdomain_tid']['#weight'] = 2;
	  $form['field_om_macro_activity_tid']['#weight'] = 3;
	  $form['field_om_actuers_tid']['#weight'] = 4;
	  $form['state']['#weight'] = 5;
	  $form['title']['#weight'] = 6;
	  
	  $experts_list = _im_features_om_experts();
	  $experts_options['All']= t('- Tous -');
	  if($experts_list){
	  	foreach($experts_list as $expert){
	  		if(empty($expert)){
	  			$experts_options['0'] = '';
	  		}else{
	  			$experts_options[$expert] = $expert;
	  		}
	  	}
	  }
	  $expert_default = isset($_GET['field_om_experts_value']) ? $_GET['field_om_experts_value'] : 'All';
	  $form['field_om_experts_value'] = array(
	  	'#type' => 'select',
	  	'#title' => t("Expert Validation"),
	  	'#options' => $experts_options,
	    '#default_value' => $expert_default,
	  	'#weight' => 7,
	  );
	  $form['submit']['#weight'] = 8;
  }
  //form alter for manage sales plan view
  
  if($form['#id'] == 'views-exposed-form-sales-plan-management-page'){
    $form['type']['#options'] = array('All' => t('- Tous -'),'holiday' => t('Holiday'),'sales_plan' => t('Sales plan'));
  }
  
  if($form['#id'] == 'views-exposed-form-workbench-edited-page-1' || $form['#id'] == 'views-exposed-form-workbench-recent-content-page-1'){  	
  	//Hide the Preferred Store option from the Content Type exposed filter
  	$form['type']['#options'] = array(
  		'All' => t('- Tous -'),
  		'action' => t('Action'),
  		'alert' => t('Alert'),
  		'application' => t('Application'),
  		'benchmark' => t('Benchmark'),
  		'holiday' => t('Holiday'),
  		'message' => t('Message'),
  		'news' => t('News'),
  		'operational_model' => t('Operational Model'),
  		'sales_plan' => t('Sales plan'),
  	);
  }
  //Hide all the Content Types which is not having Needs Review status from the exposed filter under Needs Review Tab
  if($form['#id'] == 'views-exposed-form-workbench-moderation-needs-review-page'){   
  	global $user;
  	if(in_array('content_manager_action_regional',$user->roles) || in_array('content_manager_action',$user->roles)){	
	  	$form['type']['#options'] = array(
	  		'All' => t('- Tous -'),
	  		'action' => t('Action'),
	  	);
  	}else{
  		$form['type']['#options'] = array(
	  		'All' => t('- Tous -'),
	  		'action' => t('Action'),
	  		'operational_model' => t('Operational Model'),
	  	);
  	}
  }
  
  if($form['#id'] == 'views-exposed-form-manage-operational-model-page'){
  	if(empty($_GET['state'])){
  		$form['state']['#value'] = 'All';
  	}
  }
}
/**
 * 
 * Subdomain taxonomy terms obtained
 */
function _im_get_subdomain_terms(){	
    $taxonomy_machine_name = 'om_domains';
    $vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy_machine_name);
    $vid = $vocabulary->vid;
    $get_all_terms = taxonomy_get_tree($vid);
    $all_term = array();
    $all_subdomain_term = array();
    foreach($get_all_terms as $all_term){
    	$all_subdomain_term['All']= t('- Tous -');
    if ($all_term->depth == '1'){
      $all_subdomain_term[$all_term->tid] = $all_term->name;
    }
  }
  return $all_subdomain_term;
}
/**
 * 
 * Macro taxonomy terms obtained
 */
function _im_get_macro_terms(){	
    $taxonomy_machine_name = 'om_domains';
    $vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy_machine_name);
    $vid = $vocabulary->vid;
    $get_all_terms = taxonomy_get_tree($vid);
    $all_term = array();
    $all_macro_term = array();
    foreach($get_all_terms as $all_term){
    $all_macro_term['All']= t('- Tous -');
    if ($all_term->depth == '2'){
      $all_macro_term[$all_term->tid] = $all_term->name;
    }
  }
  return $all_macro_term;
}

/**
 * Implements of hook_views_query_alter()
 * Used to add the custom node title condition to the manage content types views for filtering with French and English letters
 * UATIM - 101
 * @param object $view
 * @param object $query
 */
function im_feature_manage_content_views_query_alter(&$view, &$query) {
  global $user;
  $user_obj = user_load($user->uid); 
  if (($view->name == "manage_operational_model" || $view->name == "manage_applications" || $view->name == "manage_directory" || $view->name == "manage_messages" || $view->name == "sales_plan_management" || $view->name == "news_benchmark") && $view->current_display == "page") {
  	$text_value = "";
  	foreach ($query->where[1]['conditions'] as $key=>$value) {
  	  if ($value['field'] == "node.title") {
  	    $text_value = $key;
  	  }
  	}
  	if (!empty($text_value)) {
	  	if (isset($query->where[1]['conditions'][$text_value])) {
	      $string = trim(str_replace("%", "", $query->where[1]['conditions'][$text_value]['value']));
	      $result = _im_feature_manage_content_views_query_chars_support($string);
	      $string_decode = $result['string_decode'];
	      $string_encode = $result['string_encode'];
	      $special_chars_flag = $result['special_chars_flag'];
	      $group = count($query->where) + 1;
	      $query->add_where($group, "translate(lower(node.title), 'âãäåāăąèééêëēĕėęěìíîïìĩīĭóôõöōŏőùúûüũūŭů', 'aaaaaaaeeeeeeeeeeiiiiiiiiooooooouuuuuuu') LIKE :node_title_value", array(':node_title_value' => "%" . $string_decode . "%") , 'formula');
	      $query->add_where($group, "translate(lower(node.title), 'aaaaaaaeeeeeeeeeeiiiiiiiiooooooouuuuuuu', 'âãäåāăąèééêëēĕėęěìíîïìĩīĭóôõöōŏőùúûüũūŭů') LIKE :node_title_value", array(':node_title_value' => "%" . $string_encode . "%") , 'formula');
	      unset($query->where[1]['conditions'][$text_value]);
	      $query->set_where_group('OR', $group);
	    }
  	}
  }
  
  if($view->name == "manage_operational_model"){
	  	//If logged in user is Contributor_om + Expert 	
	  	if(in_array('contributor_om',$user->roles) && in_array('expert',$user->roles)) {  		
	  		$expert_fullname = $user_obj->field_full_name['und'][0]['value'];
	    	
	    	$join = new views_join();
	    	$join->construct('field_data_field_om_experts', 'node', 'nid', 'entity_id');
	    	$query->table_queue['node__field_data_field_om_experts'] = array(
		      'table' => 'field_data_field_om_experts',
		      'num' => 1,
		      'alias' => 'node__field_data_field_om_experts',
		      'join' => $join,
		      'relationship' => 'node',
		    );
		    $query->add_where('exp_contrgrp','users_node.uid','***CURRENT_USER***');
		    $query->add_where('exp_contrgrp', 'node__field_data_field_om_experts.field_om_experts_value', $expert_fullname, '=');
		    $query->where['exp_contrgrp']['type'] = 'OR';
	  	}
	  	//If logged in user is contributor_om display contents created only by themself
	    else if(in_array('contributor_om',$user->roles)){
	  	 	$query->add_where(2,'users_node.uid','***CURRENT_USER***');  	 	
	    }
	    
	    //If logged in user is Expert, display the contents on which they are referenced as experts
	    else if(!in_array('administrator',$user->roles) && !in_array('content_manager_om',$user->roles) && !in_array('technical_director',$user->roles) && !in_array('contributor_om',$user->roles) && $user->uid<>'1'){
	    	$expert_fullname = '';
	    	if (isset($user_obj->field_full_name['und'][0]['value'])) {
	    	  $expert_fullname = $user_obj->field_full_name['und'][0]['value'];
	    	}
	    	$join = new views_join();
	    	$join->construct('field_data_field_om_experts', 'node', 'nid', 'entity_id');
	    	$query->table_queue['node__field_data_field_om_experts'] = array(
		      'table' => 'field_data_field_om_experts',
		      'num' => 1,
		      'alias' => 'node__field_data_field_om_experts',
		      'join' => $join,
		      'relationship' => 'node',
		    );	    
		   $query->add_where(2, 'node__field_data_field_om_experts.field_om_experts_value', $expert_fullname, '=');
	    }	   
 	}
}

/**
 * Used to get the French encoded and decoded strings
 * UATIM - 101
 * @param string $string
 */
function _im_feature_manage_content_views_query_chars_support($string) {
  $string = str_replace("'", "", $string);
  $patterns_encode = array();
  $patterns_decode = array();
  $replacements_encode = array(); 
  $replacements_decode = array(); 
  $matches = array();
  $option_type =array();
  $patterns_str = 'â ã ä å ā ă ą à ç è é é ê ë ē ĕ ė ę ě ì í î ï ì ĩ ī ĭ ó ô õ ö ō ŏ ő ù ú û ü ũ ū ŭ ů';
  $patterns_encode = explode(" ", $patterns_str);
  $replacements_str = '/a/ /a/ /a/ /a/ /a/ /a/ /a/ /a/ /c/ /e/ /e/ /e/ /e/ /e/ /e/ /e/ /e/ /e/ /e/ /i/ /i/ /i/ /i/ /i/ /i/ /i/ /i/ /o/ /o/ /o/ /o/ /o/ /o/ /o/ /u/ /u/ /u/ /u/ /u/ /u/ /u/ /u/';
  $replacements_encode = explode(" ", $replacements_str);
  $patterns_str = '/â/ /ã/ /ä/ /å/ /ā/ /ă/ /ą/ /à/ /ç/ /è/ /é/ /é/ /ê/ /ë/ /ē/ /ĕ/ /ė/ /ę/ /ě/ /ì/ /í/ /î/ /ï/ /ì/ /ĩ/ /ī/ /ĭ/ /ó/ /ô/ /õ/ /ö/ /ō/ /ŏ/ /ő/ /ù/ /ú/ /û/ /ü/ /ũ/ /ū/ /ŭ/ /ů/';
  $patterns_decode = explode(" ", $patterns_str);
  $replacements_str = 'a a a a a a a a c e e e e e e e e e e i i i i i i i i o o o o o o o u u u u u u u u';
  $replacements_decode = explode(" ", $replacements_str);
  $string_decode = preg_replace($patterns_decode, $replacements_decode, strtolower($string));
  $string_encode = preg_replace($replacements_encode, $patterns_encode, strtolower($string));
  $special_chars_flag = 0;
  for($i=0; $i<strlen($string); $i++) {
    if (in_array($string{$i}, $patterns_encode)) {
      $special_chars_flag = 1;
    }
  }
  return array('string_encode' => $string_encode, 'string_decode' => $string_decode, 'special_chars_flag' => $special_chars_flag);
}