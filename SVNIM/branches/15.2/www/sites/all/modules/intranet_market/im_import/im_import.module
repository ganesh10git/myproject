<?php
/**
 * @file
 * Module file for im_import.
 */
//ini_set('memory_limit','-1');
//ini_set('max_execution_time', 3000000);
include_once (drupal_get_path("module", "im_import") . "/im_import.om.inc");
include_once (drupal_get_path("module", "im_import") . "/im_import.store.inc");
include_once (drupal_get_path("module", "im_import") . "/im_import.om_predata_taxonomy.inc");
include_once (drupal_get_path("module", "im_import") . "/im_import.om_predata_files.inc");
include_once (drupal_get_path("module", "im_import") . "/im_import.om_predata_content.inc");
/**
* Implements hook_menu().
*/
function im_import_menu() {
  $items = array();
 /* // Start - the Export Predata
  $items['admin/im/domain/predata/export'] = array(
    'title' => t('IM Export Procedure predata'),
    'description' => t('Export (Domain, Subdomain, Macro and Procedures) predata'),
    'page callback' => '_im_import_export_procedure_predata',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'im_import.om_predata_export.inc',
  );
  // End - the Export Predata
  // Start - the Import Predata
  $items['admin/im/domain/predata/import'] = array(
    'title' => t('IM Import Procedure predata'),
    'description' => t('Import (Domain, Subdomain, Macro and Procedures) predata'),
    'page callback' => '_im_import_insert_procedure_predata',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  // End - the Import Predata
  $items['admin/im/domain/import'] = array(
    'title' => t('IM Domain Import'),
    'description' => t('Import (Domain, Subdomain, Macro and Procedures)'),
    'page callback' => '_im_import_domain_asset_xml',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'im_import.om.inc',
  );
  */
  $items['admin/im/store/import'] = array(
    'title' => t('IM Store Import'),
    'description' => t('Import Store Data'),
    'page callback' => '_im_import_store_import_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'im_import.store.inc',
  );
  $items['admin/im/settings/import/saint'] = array(
    'title' => t('IM Saint Of The Day Import'),
    'description' => t('Import Saint Of The Day Data'),
    'page callback' => '_im_import_saint_day_import_page',
    'access callback' => 'user_access',
    'access arguments' => array('configure im custom settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'im_import.saint.inc',
  );
  return $items;
}

/**
 * This function is a Import procedure predata callback
 */
function _im_import_insert_procedure_predata() {
  // Import om_roles, operational_model_location and om_domains vocabulary taxonomy terms
  $output = drupal_get_form('_im_import_insert_procedure_assets');
  // Import all files to the corresponding place.
  return $output;
}

/**
 * This function is used to make a form to import the taxonomy, procedure files and procedures with a batch process
 * @param $form array
 * @param $form_state array
 */
function _im_import_insert_procedure_assets($form, &$form_state) {
  $form['fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t("Import Procedure assets"),
  );
  $form['fieldset']['step1'] = array(
    '#type' => 'item',
    '#markup' => html_entity_decode(t("@st_strongStep 1: Import the procedure taxonomy (Roles, Location and Domains)@ed_strong", array('@st_strong' => '<strong>', '@ed_strong' => '</strong>'))),
  );
  
  $form['fieldset']['taxonomy'] = array(
    '#type' => 'submit',
    '#value' => t("Import Taxonomy"),
    '#submit' => array('_im_import_insert_taxonomy_batch_process'),
  );
  
  $form['fieldset']['step2'] = array(
    '#type' => 'item',
    '#markup' => html_entity_decode(t("@st_strongStep 2: Import the procedure attachment files@ed_strong", array('@st_strong' => '<strong>', '@ed_strong' => '</strong>'))),
  );
  
  $form['fieldset']['files'] = array(
    '#type' => 'submit',
    '#value' => t("Import Procedure Files"),
    '#submit' => array('_im_import_insert_procedure_files_batch_process'),
  );
  
  $form['fieldset']['step3'] = array(
    '#type' => 'item',
    '#markup' => html_entity_decode(t("@st_strongStep 3: Import the procedure node contents@ed_strong", array('@st_strong' => '<strong>', '@ed_strong' => '</strong>'))),
  );
  
  $form['fieldset']['nodes'] = array(
    '#type' => 'submit',
    '#value' => t("Import Procedures Contents"),
    '#submit' => array('_im_import_insert_procedure_contents_batch_process'),
  );
  return $form;
}

/**
 * This function is used to import the procedures node contents
 * @param $form array
 * @param $form_state array
 */
function _im_import_insert_procedure_contents_batch_process($form, &$form_state) {
  $function = '_im_import_procedure_contents_batch_process';
  $_SESSION['procedure_valid_content_count'] = 0;
  $_SESSION['content_http_request_count'] = 0; // reset counter for debug information.
  $batch = $function();
  batch_set($batch);
}

/**
 * This function is used to import the procedures attachment files
 * @param $form array
 * @param $form_state array
 */
function _im_import_insert_procedure_files_batch_process($form, &$form_state) {
  $function = '_im_import_procedure_files_batch_process';
  $_SESSION['files_http_request_count'] = 0; // reset counter for debug information.
  $batch = $function();
  batch_set($batch);
}

/**
 * This function is used to create a batch process to import the om_roles, operational_model_location and om_domains taxonomy terms
 * @param $form array
 * @param $form_state array
 */
function _im_import_insert_taxonomy_batch_process($form, &$form_state) {
  /**
   * Delete the om_roles, operational_model_location and om_domains vocabulary taxonomy terms
   */
  $vocabulary_machine_name_set = array("om_roles", "operational_model_location", "om_domains");
  foreach ($vocabulary_machine_name_set as $vocabulary_name) {
    $vocabulary_object = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $result = db_query('SELECT t.tid FROM {taxonomy_term_data} t INNER JOIN {taxonomy_term_hierarchy} th ON th.tid = t.tid WHERE t.vid = :vid AND th.parent = 0', array(':vid' => $vocabulary_object->vid))->fetchCol();
    foreach ($result as $tid) {
      taxonomy_term_delete($tid);
    }
  }
  $vocabulary_object = taxonomy_vocabulary_machine_name_load("om_domains");
  $result = db_query('SELECT t.tid FROM {taxonomy_term_data} t INNER JOIN {taxonomy_term_hierarchy} th ON th.tid = t.tid WHERE t.vid = :vid AND th.parent = 0', array(':vid' => $vocabulary_object->vid))->fetchCol();
  if (count($result) == 0) {
	  $function = '_im_import_taxonomy_batch_process';
	  $_SESSION['http_request_count'] = 0; // reset counter for debug information.
	  $batch = $function();
	  batch_set($batch);
  }
}

/**
 *
 * Creates a directory if it is not existing and modify the folder permission ug+w
 *  Set the variable for this folder path.
 * @param STRING $module_name
 * @param STRING $variable_name
 * @param STRING $folder_path
 */
function _im_import_file_system_create_directory_system($module_name, $variable_name, $folder_path) {
	ini_set('memory_limit','-1');
  $path = $folder_path;
  if (file_exists(drupal_realpath($path))) {
    rmdir(drupal_realpath($path));
  }
  if (file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    variable_set($module_name. '_'. $variable_name, $path);
  }
}

/**
 * Deletes the directory(if $remove_dir is TRUE) and all its files.
 * @param STRING $path
 * @param STRING $remove_dir
 */
function _im_import_file_system_delete_directory_system($path, $remove_dir = FALSE) {
	ini_set('memory_limit','-1');
  $path = $path . '/';
  if (!is_dir($path)) {
    return;
  }
  $files = scandir($path);
  foreach ($files as $file) {
    if ($file != '.' && $file != '..') {
      $file_path = $path . $file;
      if (is_dir($file_path)) {
        _im_import_file_system_delete_directory_system($file_path, TRUE);
      }
      else {
        file_unmanaged_delete($file_path);
      }
    }
  }
  if ($remove_dir) {
    rmdir($path);
  }
}

/**
 * List entire files and directory lists separately.
 * @param $root string
 */
function _im_import_read_all_files($root = '.'){
	ini_set('memory_limit','-1');
  $files  = array('files'=>array(), 'dirs'=>array());
  $directories  = array();
  $last_letter  = $root[strlen($root)-1];
  $root  = ($last_letter == '\\' || $last_letter == '/') ? $root : $root.DIRECTORY_SEPARATOR;
 
  $directories[]  = $root;
  while (sizeof($directories)) {
    $dir  = array_pop($directories);
    $flag_dir = explode("/", $dir);
    if (strlen($flag_dir[count($flag_dir)-2]) != 3 && $dir != $root) {
    	continue;
    }
    if ($handle = opendir($dir)) {
      while (false !== ($file = readdir($handle))) {
        if ($file == '.' || $file == '..') {
          continue;
        }
        $file  = $dir.$file;
        if (is_dir($file)) {
          $directory_path = $file.DIRECTORY_SEPARATOR;
          array_push($directories, $directory_path);
          $flag_dir = explode("/", $directory_path);
		      if (strlen($flag_dir[count($flag_dir)-2]) != 3 && $directory_path != $root) {
		        continue;
		      }
		      else {
            $files['dirs'][]  = $directory_path;
		      }
        } elseif (is_file($file)) {
          $files['files'][]  = $file;
        }
      }
      closedir($handle);
    }
  }
 
  return $files;
}

/**
 * Used to archive the imported files to the archive destination folder
 * @param $src string
 * @param $dst string
 */
function _im_import_archive_imported_files($src, $dst) {
  $dir = opendir($src); 
  while(false !== ( $file = readdir($dir)) ) { 
    if (( $file != '.' ) && ( $file != '..' )) { 
      if ( is_dir($src . '/' . $file) ) { 
        _im_import_archive_imported_files($src . '/' . $file,$dst . '/' . $file); 
      } 
      else { 
        copy($src . '/' . $file,$dst . '/' . $file); 
      } 
    } 
  } 
  closedir($dir); 
} 